{
  "version": 3,
  "sources": ["../../../src/web-wallet-channel/dapp-post-message-channel.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { safeParse } from 'valibot';\nimport type { JsonData, RequestDataType, RequestType } from './requests.js';\nimport type { ResponseTypes } from './responses.js';\nimport { Response } from './responses.js';\nimport { promiseWithResolvers } from '@mysten/utils';\nimport { getClientMetadata } from './utils.js';\n\ntype DappPostMessageChannelOptions = {\n\tappName: string;\n\thostOrigin: string;\n\thostPathname?: string;\n\textraRequestOptions?: Record<string, JsonData>;\n\tpopupWindow?: Window;\n};\n\nexport class DappPostMessageChannel {\n\t#popup: Window;\n\t#version = '1' as const;\n\t#id: string;\n\t#hostOrigin: string;\n\t#hostPathname: string;\n\t#appName: string;\n\t#extraRequestOptions?: Record<string, JsonData>;\n\t#promise: Promise<unknown>;\n\t#resolve: (data: unknown) => void;\n\t#reject: (error: Error) => void;\n\t#interval: ReturnType<typeof setInterval> | null = null;\n\t#isSendCalled: boolean = false;\n\n\tconstructor({\n\t\tappName,\n\t\thostOrigin,\n\t\thostPathname = 'dapp-request',\n\t\textraRequestOptions,\n\t\tpopupWindow,\n\t}: DappPostMessageChannelOptions) {\n\t\tconst popup = popupWindow ?? window.open('about:blank', '_blank');\n\n\t\tif (!popup) {\n\t\t\tthrow new Error('Failed to open new window');\n\t\t}\n\n\t\tthis.#id = crypto.randomUUID();\n\t\tthis.#popup = popup;\n\t\tthis.#hostOrigin = hostOrigin;\n\t\tthis.#hostPathname = hostPathname;\n\t\tthis.#appName = appName;\n\n\t\tconst { promise, resolve, reject } = promiseWithResolvers();\n\n\t\tthis.#promise = promise;\n\t\tthis.#resolve = resolve;\n\t\tthis.#reject = reject;\n\t\tthis.#extraRequestOptions = extraRequestOptions;\n\t\tthis.#interval = setInterval(() => {\n\t\t\ttry {\n\t\t\t\tif (this.#popup.closed) {\n\t\t\t\t\tthis.#cleanup();\n\t\t\t\t\treject(new Error('User closed the wallet window'));\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// This can error during the login flow, but that's fine.\n\t\t\t}\n\t\t}, 1000);\n\t}\n\n\tsend<T extends RequestDataType['type']>({\n\t\ttype,\n\t\t...data\n\t}: {\n\t\ttype: T;\n\t} & Extract<RequestDataType, { type: T }>): Promise<ResponseTypes[T]> {\n\t\tif (this.#popup.closed) {\n\t\t\tthrow new Error('User closed the wallet window');\n\t\t}\n\n\t\tif (this.#isSendCalled) {\n\t\t\tthrow new Error('send() can only be called once');\n\t\t}\n\n\t\tthis.#isSendCalled = true;\n\n\t\twindow.addEventListener('message', this.#listener);\n\n\t\tconst requestData = {\n\t\t\tversion: this.#version,\n\t\t\trequestId: this.#id,\n\t\t\tappUrl: window.location.href.split('#')[0],\n\t\t\tappName: this.#appName,\n\t\t\tpayload: {\n\t\t\t\ttype,\n\t\t\t\t...data,\n\t\t\t} as RequestDataType,\n\t\t\tmetadata: getClientMetadata(),\n\t\t\textraRequestOptions: this.#extraRequestOptions,\n\t\t} satisfies RequestType;\n\t\tconst encodedRequestData = encodeURIComponent(btoa(JSON.stringify(requestData)));\n\n\t\tthis.#popup.location.assign(`${this.#hostOrigin}/${this.#hostPathname}#${encodedRequestData}`);\n\n\t\treturn this.#promise as Promise<ResponseTypes[T]>;\n\t}\n\n\tclose() {\n\t\tthis.#cleanup();\n\t\tthis.#popup.close();\n\t}\n\n\t#listener = (event: MessageEvent) => {\n\t\tif (event.origin !== this.#hostOrigin) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { success, output } = safeParse(Response, event.data);\n\n\t\tif (!success || output.id !== this.#id) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#cleanup();\n\n\t\tif (output.payload.type === 'reject') {\n\t\t\tthis.#reject(new Error('User rejected the request'));\n\t\t} else if (output.payload.type === 'resolve') {\n\t\t\tthis.#resolve(output.payload.data);\n\t\t}\n\t};\n\n\t#cleanup() {\n\t\tif (this.#interval) {\n\t\t\tclearInterval(this.#interval);\n\t\t\tthis.#interval = null;\n\t\t}\n\t\twindow.removeEventListener('message', this.#listener);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["import_utils"]
}
