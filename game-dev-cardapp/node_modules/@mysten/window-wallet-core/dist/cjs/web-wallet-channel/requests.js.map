{
  "version": 3,
  "sources": ["../../../src/web-wallet-channel/requests.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as v from 'valibot';\n\nexport type JsonData = string | number | boolean | null | { [key: string]: JsonData } | JsonData[];\n\nconst JsonSchema: v.GenericSchema<JsonData> = v.lazy(() =>\n\tv.union([\n\t\tv.string(),\n\t\tv.number(),\n\t\tv.boolean(),\n\t\tv.null(),\n\t\tv.record(v.string(), JsonSchema),\n\t\tv.array(JsonSchema),\n\t]),\n);\n\nexport const RequestData = v.variant('type', [\n\tv.object({\n\t\ttype: v.literal('connect'),\n\t}),\n\tv.object({\n\t\ttype: v.literal('sign-transaction'),\n\t\ttransaction: v.string('`transaction` is required'),\n\t\taddress: v.string('`address` is required'),\n\t\tchain: v.string('`chain` is required'),\n\t\tsession: v.string('`session` is required'),\n\t}),\n\tv.object({\n\t\ttype: v.literal('sign-and-execute-transaction'),\n\t\ttransaction: v.string('`transaction` is required'),\n\t\taddress: v.string('`address` is required'),\n\t\tchain: v.string('`chain` is required'),\n\t\tsession: v.string('`session` is required'),\n\t}),\n\tv.object({\n\t\ttype: v.literal('sign-personal-message'),\n\t\tchain: v.string('`chain` is required'),\n\t\tmessage: v.string('`message` is required'),\n\t\taddress: v.string('`address` is required'),\n\t\tsession: v.string('`session` is required'),\n\t}),\n]);\nexport type RequestDataType = v.InferOutput<typeof RequestData>;\n\nexport const Request = v.object({\n\tversion: v.literal('1'),\n\trequestId: v.pipe(v.string('`requestId` is required'), v.uuid()),\n\tappUrl: v.pipe(v.string(), v.url('`appUrl` must be a valid URL')),\n\tappName: v.string('`appName` is required'),\n\tpayload: RequestData,\n\tmetadata: v.optional(v.record(v.string(), JsonSchema)),\n\textraRequestOptions: v.optional(v.record(v.string(), JsonSchema)),\n});\nexport type RequestType = v.InferOutput<typeof Request>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,QAAmB;AAInB,MAAM,aAAwC,EAAE;AAAA,EAAK,MACpD,EAAE,MAAM;AAAA,IACP,EAAE,OAAO;AAAA,IACT,EAAE,OAAO;AAAA,IACT,EAAE,QAAQ;AAAA,IACV,EAAE,KAAK;AAAA,IACP,EAAE,OAAO,EAAE,OAAO,GAAG,UAAU;AAAA,IAC/B,EAAE,MAAM,UAAU;AAAA,EACnB,CAAC;AACF;AAEO,MAAM,cAAc,EAAE,QAAQ,QAAQ;AAAA,EAC5C,EAAE,OAAO;AAAA,IACR,MAAM,EAAE,QAAQ,SAAS;AAAA,EAC1B,CAAC;AAAA,EACD,EAAE,OAAO;AAAA,IACR,MAAM,EAAE,QAAQ,kBAAkB;AAAA,IAClC,aAAa,EAAE,OAAO,2BAA2B;AAAA,IACjD,SAAS,EAAE,OAAO,uBAAuB;AAAA,IACzC,OAAO,EAAE,OAAO,qBAAqB;AAAA,IACrC,SAAS,EAAE,OAAO,uBAAuB;AAAA,EAC1C,CAAC;AAAA,EACD,EAAE,OAAO;AAAA,IACR,MAAM,EAAE,QAAQ,8BAA8B;AAAA,IAC9C,aAAa,EAAE,OAAO,2BAA2B;AAAA,IACjD,SAAS,EAAE,OAAO,uBAAuB;AAAA,IACzC,OAAO,EAAE,OAAO,qBAAqB;AAAA,IACrC,SAAS,EAAE,OAAO,uBAAuB;AAAA,EAC1C,CAAC;AAAA,EACD,EAAE,OAAO;AAAA,IACR,MAAM,EAAE,QAAQ,uBAAuB;AAAA,IACvC,OAAO,EAAE,OAAO,qBAAqB;AAAA,IACrC,SAAS,EAAE,OAAO,uBAAuB;AAAA,IACzC,SAAS,EAAE,OAAO,uBAAuB;AAAA,IACzC,SAAS,EAAE,OAAO,uBAAuB;AAAA,EAC1C,CAAC;AACF,CAAC;AAGM,MAAM,UAAU,EAAE,OAAO;AAAA,EAC/B,SAAS,EAAE,QAAQ,GAAG;AAAA,EACtB,WAAW,EAAE,KAAK,EAAE,OAAO,yBAAyB,GAAG,EAAE,KAAK,CAAC;AAAA,EAC/D,QAAQ,EAAE,KAAK,EAAE,OAAO,GAAG,EAAE,IAAI,8BAA8B,CAAC;AAAA,EAChE,SAAS,EAAE,OAAO,uBAAuB;AAAA,EACzC,SAAS;AAAA,EACT,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,GAAG,UAAU,CAAC;AAAA,EACrD,qBAAqB,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,GAAG,UAAU,CAAC;AACjE,CAAC;",
  "names": []
}
