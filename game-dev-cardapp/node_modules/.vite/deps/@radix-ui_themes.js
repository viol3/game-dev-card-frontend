import {
  Anchor,
  Anchor2,
  Arrow,
  Arrow2,
  Branch,
  CheckboxItem,
  Close,
  Combination_default,
  Content,
  Content2,
  Content23 as Content22,
  Description,
  DismissableLayer,
  FocusScope,
  Group,
  Item,
  Item2,
  ItemIndicator,
  Label,
  Overlay,
  Portal,
  Portal2,
  Portal3,
  Presence,
  Primitive,
  RadioGroup,
  RadioItem,
  Root,
  Root2,
  Root23 as Root22,
  Root3,
  Root34 as Root32,
  Root4,
  Separator,
  Sub,
  SubContent,
  SubTrigger,
  Title,
  Trigger,
  WarningProvider,
  composeEventHandlers,
  composeRefs,
  createCollection,
  createCollection2,
  createContextScope,
  createDialogScope,
  createMenuScope,
  createPopperScope,
  createRovingFocusGroupScope,
  createSlot,
  createSlottable,
  dispatchDiscreteCustomEvent,
  dist_exports,
  dist_exports2,
  dist_exports3,
  dist_exports4,
  dist_exports5,
  dist_exports6,
  dist_exports7,
  hideOthers,
  require_shim,
  useCallbackRef,
  useComposedRefs,
  useControllableState,
  useDirection,
  useEffectEvent,
  useFocusGuards,
  useId,
  useLayoutEffect2,
  useSize
} from "./chunk-CLNQ7Y2Y.js";
import {
  require_jsx_runtime
} from "./chunk-I5VJ3O4U.js";
import {
  require_react_dom
} from "./chunk-K23GC2QC.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i24 = 0; i24 < arguments.length; i24++) {
          var arg = arguments[i24];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/@radix-ui/react-accessible-icon/dist/index.mjs
var dist_exports9 = {};
__export(dist_exports9, {
  AccessibleIcon: () => AccessibleIcon,
  Root: () => Root23
});
var React2 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-visually-hidden/dist/index.mjs
var dist_exports8 = {};
__export(dist_exports8, {
  Root: () => Root5,
  VISUALLY_HIDDEN_STYLES: () => VISUALLY_HIDDEN_STYLES,
  VisuallyHidden: () => VisuallyHidden
});
var React = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var VISUALLY_HIDDEN_STYLES = Object.freeze({
  // See: https://github.com/twbs/bootstrap/blob/main/scss/mixins/_visually-hidden.scss
  position: "absolute",
  border: 0,
  width: 1,
  height: 1,
  padding: 0,
  margin: -1,
  overflow: "hidden",
  clip: "rect(0, 0, 0, 0)",
  whiteSpace: "nowrap",
  wordWrap: "normal"
});
var NAME = "VisuallyHidden";
var VisuallyHidden = React.forwardRef(
  (props, forwardedRef) => {
    return (0, import_jsx_runtime.jsx)(
      Primitive.span,
      {
        ...props,
        ref: forwardedRef,
        style: { ...VISUALLY_HIDDEN_STYLES, ...props.style }
      }
    );
  }
);
VisuallyHidden.displayName = NAME;
var Root5 = VisuallyHidden;

// node_modules/@radix-ui/react-accessible-icon/dist/index.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var NAME2 = "AccessibleIcon";
var AccessibleIcon = ({ children, label }) => {
  const child = React2.Children.only(children);
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    React2.cloneElement(child, {
      // accessibility
      "aria-hidden": "true",
      focusable: "false"
      // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable
    }),
    (0, import_jsx_runtime2.jsx)(Root5, { children: label })
  ] });
};
AccessibleIcon.displayName = NAME2;
var Root23 = AccessibleIcon;

// node_modules/@radix-ui/react-accordion/dist/index.mjs
var import_react = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-collapsible/dist/index.mjs
var React3 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var COLLAPSIBLE_NAME = "Collapsible";
var [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);
var [CollapsibleProvider, useCollapsibleContext] = createCollapsibleContext(COLLAPSIBLE_NAME);
var Collapsible = React3.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeCollapsible,
      open: openProp,
      defaultOpen,
      disabled,
      onOpenChange,
      ...collapsibleProps
    } = props;
    const [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen ?? false,
      onChange: onOpenChange,
      caller: COLLAPSIBLE_NAME
    });
    return (0, import_jsx_runtime3.jsx)(
      CollapsibleProvider,
      {
        scope: __scopeCollapsible,
        disabled,
        contentId: useId(),
        open,
        onOpenToggle: React3.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
        children: (0, import_jsx_runtime3.jsx)(
          Primitive.div,
          {
            "data-state": getState(open),
            "data-disabled": disabled ? "" : void 0,
            ...collapsibleProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
Collapsible.displayName = COLLAPSIBLE_NAME;
var TRIGGER_NAME = "CollapsibleTrigger";
var CollapsibleTrigger = React3.forwardRef(
  (props, forwardedRef) => {
    const { __scopeCollapsible, ...triggerProps } = props;
    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);
    return (0, import_jsx_runtime3.jsx)(
      Primitive.button,
      {
        type: "button",
        "aria-controls": context.contentId,
        "aria-expanded": context.open || false,
        "data-state": getState(context.open),
        "data-disabled": context.disabled ? "" : void 0,
        disabled: context.disabled,
        ...triggerProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
      }
    );
  }
);
CollapsibleTrigger.displayName = TRIGGER_NAME;
var CONTENT_NAME = "CollapsibleContent";
var CollapsibleContent = React3.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, ...contentProps } = props;
    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);
    return (0, import_jsx_runtime3.jsx)(Presence, { present: forceMount || context.open, children: ({ present }) => (0, import_jsx_runtime3.jsx)(CollapsibleContentImpl, { ...contentProps, ref: forwardedRef, present }) });
  }
);
CollapsibleContent.displayName = CONTENT_NAME;
var CollapsibleContentImpl = React3.forwardRef((props, forwardedRef) => {
  const { __scopeCollapsible, present, children, ...contentProps } = props;
  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);
  const [isPresent, setIsPresent] = React3.useState(present);
  const ref = React3.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const heightRef = React3.useRef(0);
  const height = heightRef.current;
  const widthRef = React3.useRef(0);
  const width = widthRef.current;
  const isOpen = context.open || isPresent;
  const isMountAnimationPreventedRef = React3.useRef(isOpen);
  const originalStylesRef = React3.useRef(void 0);
  React3.useEffect(() => {
    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
    return () => cancelAnimationFrame(rAF);
  }, []);
  useLayoutEffect2(() => {
    const node = ref.current;
    if (node) {
      originalStylesRef.current = originalStylesRef.current || {
        transitionDuration: node.style.transitionDuration,
        animationName: node.style.animationName
      };
      node.style.transitionDuration = "0s";
      node.style.animationName = "none";
      const rect = node.getBoundingClientRect();
      heightRef.current = rect.height;
      widthRef.current = rect.width;
      if (!isMountAnimationPreventedRef.current) {
        node.style.transitionDuration = originalStylesRef.current.transitionDuration;
        node.style.animationName = originalStylesRef.current.animationName;
      }
      setIsPresent(present);
    }
  }, [context.open, present]);
  return (0, import_jsx_runtime3.jsx)(
    Primitive.div,
    {
      "data-state": getState(context.open),
      "data-disabled": context.disabled ? "" : void 0,
      id: context.contentId,
      hidden: !isOpen,
      ...contentProps,
      ref: composedRefs,
      style: {
        [`--radix-collapsible-content-height`]: height ? `${height}px` : void 0,
        [`--radix-collapsible-content-width`]: width ? `${width}px` : void 0,
        ...props.style
      },
      children: isOpen && children
    }
  );
});
function getState(open) {
  return open ? "open" : "closed";
}
var Root6 = Collapsible;
var Trigger2 = CollapsibleTrigger;
var Content3 = CollapsibleContent;

// node_modules/@radix-ui/react-accordion/dist/index.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var ACCORDION_NAME = "Accordion";
var ACCORDION_KEYS = ["Home", "End", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"];
var [Collection, useCollection, createCollectionScope] = createCollection(ACCORDION_NAME);
var [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [
  createCollectionScope,
  createCollapsibleScope
]);
var useCollapsibleScope = createCollapsibleScope();
var Accordion = import_react.default.forwardRef(
  (props, forwardedRef) => {
    const { type, ...accordionProps } = props;
    const singleProps = accordionProps;
    const multipleProps = accordionProps;
    return (0, import_jsx_runtime4.jsx)(Collection.Provider, { scope: props.__scopeAccordion, children: type === "multiple" ? (0, import_jsx_runtime4.jsx)(AccordionImplMultiple, { ...multipleProps, ref: forwardedRef }) : (0, import_jsx_runtime4.jsx)(AccordionImplSingle, { ...singleProps, ref: forwardedRef }) });
  }
);
Accordion.displayName = ACCORDION_NAME;
var [AccordionValueProvider, useAccordionValueContext] = createAccordionContext(ACCORDION_NAME);
var [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(
  ACCORDION_NAME,
  { collapsible: false }
);
var AccordionImplSingle = import_react.default.forwardRef(
  (props, forwardedRef) => {
    const {
      value: valueProp,
      defaultValue,
      onValueChange = () => {
      },
      collapsible = false,
      ...accordionSingleProps
    } = props;
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue ?? "",
      onChange: onValueChange,
      caller: ACCORDION_NAME
    });
    return (0, import_jsx_runtime4.jsx)(
      AccordionValueProvider,
      {
        scope: props.__scopeAccordion,
        value: import_react.default.useMemo(() => value ? [value] : [], [value]),
        onItemOpen: setValue,
        onItemClose: import_react.default.useCallback(() => collapsible && setValue(""), [collapsible, setValue]),
        children: (0, import_jsx_runtime4.jsx)(AccordionCollapsibleProvider, { scope: props.__scopeAccordion, collapsible, children: (0, import_jsx_runtime4.jsx)(AccordionImpl, { ...accordionSingleProps, ref: forwardedRef }) })
      }
    );
  }
);
var AccordionImplMultiple = import_react.default.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    ...accordionMultipleProps
  } = props;
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue ?? [],
    onChange: onValueChange,
    caller: ACCORDION_NAME
  });
  const handleItemOpen = import_react.default.useCallback(
    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),
    [setValue]
  );
  const handleItemClose = import_react.default.useCallback(
    (itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)),
    [setValue]
  );
  return (0, import_jsx_runtime4.jsx)(
    AccordionValueProvider,
    {
      scope: props.__scopeAccordion,
      value,
      onItemOpen: handleItemOpen,
      onItemClose: handleItemClose,
      children: (0, import_jsx_runtime4.jsx)(AccordionCollapsibleProvider, { scope: props.__scopeAccordion, collapsible: true, children: (0, import_jsx_runtime4.jsx)(AccordionImpl, { ...accordionMultipleProps, ref: forwardedRef }) })
    }
  );
});
var [AccordionImplProvider, useAccordionContext] = createAccordionContext(ACCORDION_NAME);
var AccordionImpl = import_react.default.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, disabled, dir, orientation = "vertical", ...accordionProps } = props;
    const accordionRef = import_react.default.useRef(null);
    const composedRefs = useComposedRefs(accordionRef, forwardedRef);
    const getItems = useCollection(__scopeAccordion);
    const direction = useDirection(dir);
    const isDirectionLTR = direction === "ltr";
    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {
      if (!ACCORDION_KEYS.includes(event.key)) return;
      const target = event.target;
      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);
      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);
      const triggerCount = triggerCollection.length;
      if (triggerIndex === -1) return;
      event.preventDefault();
      let nextIndex = triggerIndex;
      const homeIndex = 0;
      const endIndex = triggerCount - 1;
      const moveNext = () => {
        nextIndex = triggerIndex + 1;
        if (nextIndex > endIndex) {
          nextIndex = homeIndex;
        }
      };
      const movePrev = () => {
        nextIndex = triggerIndex - 1;
        if (nextIndex < homeIndex) {
          nextIndex = endIndex;
        }
      };
      switch (event.key) {
        case "Home":
          nextIndex = homeIndex;
          break;
        case "End":
          nextIndex = endIndex;
          break;
        case "ArrowRight":
          if (orientation === "horizontal") {
            if (isDirectionLTR) {
              moveNext();
            } else {
              movePrev();
            }
          }
          break;
        case "ArrowDown":
          if (orientation === "vertical") {
            moveNext();
          }
          break;
        case "ArrowLeft":
          if (orientation === "horizontal") {
            if (isDirectionLTR) {
              movePrev();
            } else {
              moveNext();
            }
          }
          break;
        case "ArrowUp":
          if (orientation === "vertical") {
            movePrev();
          }
          break;
      }
      const clampedIndex = nextIndex % triggerCount;
      triggerCollection[clampedIndex].ref.current?.focus();
    });
    return (0, import_jsx_runtime4.jsx)(
      AccordionImplProvider,
      {
        scope: __scopeAccordion,
        disabled,
        direction: dir,
        orientation,
        children: (0, import_jsx_runtime4.jsx)(Collection.Slot, { scope: __scopeAccordion, children: (0, import_jsx_runtime4.jsx)(
          Primitive.div,
          {
            ...accordionProps,
            "data-orientation": orientation,
            ref: composedRefs,
            onKeyDown: disabled ? void 0 : handleKeyDown
          }
        ) })
      }
    );
  }
);
var ITEM_NAME = "AccordionItem";
var [AccordionItemProvider, useAccordionItemContext] = createAccordionContext(ITEM_NAME);
var AccordionItem = import_react.default.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, value, ...accordionItemProps } = props;
    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);
    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    const triggerId = useId();
    const open = value && valueContext.value.includes(value) || false;
    const disabled = accordionContext.disabled || props.disabled;
    return (0, import_jsx_runtime4.jsx)(
      AccordionItemProvider,
      {
        scope: __scopeAccordion,
        open,
        disabled,
        triggerId,
        children: (0, import_jsx_runtime4.jsx)(
          Root6,
          {
            "data-orientation": accordionContext.orientation,
            "data-state": getState2(open),
            ...collapsibleScope,
            ...accordionItemProps,
            ref: forwardedRef,
            disabled,
            open,
            onOpenChange: (open2) => {
              if (open2) {
                valueContext.onItemOpen(value);
              } else {
                valueContext.onItemClose(value);
              }
            }
          }
        )
      }
    );
  }
);
AccordionItem.displayName = ITEM_NAME;
var HEADER_NAME = "AccordionHeader";
var AccordionHeader = import_react.default.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, ...headerProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);
    return (0, import_jsx_runtime4.jsx)(
      Primitive.h3,
      {
        "data-orientation": accordionContext.orientation,
        "data-state": getState2(itemContext.open),
        "data-disabled": itemContext.disabled ? "" : void 0,
        ...headerProps,
        ref: forwardedRef
      }
    );
  }
);
AccordionHeader.displayName = HEADER_NAME;
var TRIGGER_NAME2 = "AccordionTrigger";
var AccordionTrigger = import_react.default.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, ...triggerProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(TRIGGER_NAME2, __scopeAccordion);
    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME2, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    return (0, import_jsx_runtime4.jsx)(Collection.ItemSlot, { scope: __scopeAccordion, children: (0, import_jsx_runtime4.jsx)(
      Trigger2,
      {
        "aria-disabled": itemContext.open && !collapsibleContext.collapsible || void 0,
        "data-orientation": accordionContext.orientation,
        id: itemContext.triggerId,
        ...collapsibleScope,
        ...triggerProps,
        ref: forwardedRef
      }
    ) });
  }
);
AccordionTrigger.displayName = TRIGGER_NAME2;
var CONTENT_NAME2 = "AccordionContent";
var AccordionContent = import_react.default.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, ...contentProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(CONTENT_NAME2, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    return (0, import_jsx_runtime4.jsx)(
      Content3,
      {
        role: "region",
        "aria-labelledby": itemContext.triggerId,
        "data-orientation": accordionContext.orientation,
        ...collapsibleScope,
        ...contentProps,
        ref: forwardedRef,
        style: {
          ["--radix-accordion-content-height"]: "var(--radix-collapsible-content-height)",
          ["--radix-accordion-content-width"]: "var(--radix-collapsible-content-width)",
          ...props.style
        }
      }
    );
  }
);
AccordionContent.displayName = CONTENT_NAME2;
function getState2(open) {
  return open ? "open" : "closed";
}

// node_modules/@radix-ui/react-alert-dialog/dist/index.mjs
var dist_exports11 = {};
__export(dist_exports11, {
  Action: () => Action,
  AlertDialog: () => AlertDialog,
  AlertDialogAction: () => AlertDialogAction,
  AlertDialogCancel: () => AlertDialogCancel,
  AlertDialogContent: () => AlertDialogContent,
  AlertDialogDescription: () => AlertDialogDescription,
  AlertDialogOverlay: () => AlertDialogOverlay,
  AlertDialogPortal: () => AlertDialogPortal,
  AlertDialogTitle: () => AlertDialogTitle,
  AlertDialogTrigger: () => AlertDialogTrigger,
  Cancel: () => Cancel,
  Content: () => Content23,
  Description: () => Description2,
  Overlay: () => Overlay2,
  Portal: () => Portal22,
  Root: () => Root24,
  Title: () => Title2,
  Trigger: () => Trigger22,
  createAlertDialogScope: () => createAlertDialogScope
});
var React5 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var ROOT_NAME = "AlertDialog";
var [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [
  createDialogScope
]);
var useDialogScope = createDialogScope();
var AlertDialog = (props) => {
  const { __scopeAlertDialog, ...alertDialogProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime5.jsx)(Root3, { ...dialogScope, ...alertDialogProps, modal: true });
};
AlertDialog.displayName = ROOT_NAME;
var TRIGGER_NAME3 = "AlertDialogTrigger";
var AlertDialogTrigger = React5.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...triggerProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime5.jsx)(Trigger, { ...dialogScope, ...triggerProps, ref: forwardedRef });
  }
);
AlertDialogTrigger.displayName = TRIGGER_NAME3;
var PORTAL_NAME = "AlertDialogPortal";
var AlertDialogPortal = (props) => {
  const { __scopeAlertDialog, ...portalProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime5.jsx)(Portal2, { ...dialogScope, ...portalProps });
};
AlertDialogPortal.displayName = PORTAL_NAME;
var OVERLAY_NAME = "AlertDialogOverlay";
var AlertDialogOverlay = React5.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...overlayProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime5.jsx)(Overlay, { ...dialogScope, ...overlayProps, ref: forwardedRef });
  }
);
AlertDialogOverlay.displayName = OVERLAY_NAME;
var CONTENT_NAME3 = "AlertDialogContent";
var [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME3);
var Slottable = createSlottable("AlertDialogContent");
var AlertDialogContent = React5.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, children, ...contentProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const contentRef = React5.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const cancelRef = React5.useRef(null);
    return (0, import_jsx_runtime5.jsx)(
      WarningProvider,
      {
        contentName: CONTENT_NAME3,
        titleName: TITLE_NAME,
        docsSlug: "alert-dialog",
        children: (0, import_jsx_runtime5.jsx)(AlertDialogContentProvider, { scope: __scopeAlertDialog, cancelRef, children: (0, import_jsx_runtime5.jsxs)(
          Content,
          {
            role: "alertdialog",
            ...dialogScope,
            ...contentProps,
            ref: composedRefs,
            onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {
              event.preventDefault();
              cancelRef.current?.focus({ preventScroll: true });
            }),
            onPointerDownOutside: (event) => event.preventDefault(),
            onInteractOutside: (event) => event.preventDefault(),
            children: [
              (0, import_jsx_runtime5.jsx)(Slottable, { children }),
              (0, import_jsx_runtime5.jsx)(DescriptionWarning, { contentRef })
            ]
          }
        ) })
      }
    );
  }
);
AlertDialogContent.displayName = CONTENT_NAME3;
var TITLE_NAME = "AlertDialogTitle";
var AlertDialogTitle = React5.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...titleProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime5.jsx)(Title, { ...dialogScope, ...titleProps, ref: forwardedRef });
  }
);
AlertDialogTitle.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "AlertDialogDescription";
var AlertDialogDescription = React5.forwardRef((props, forwardedRef) => {
  const { __scopeAlertDialog, ...descriptionProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime5.jsx)(Description, { ...dialogScope, ...descriptionProps, ref: forwardedRef });
});
AlertDialogDescription.displayName = DESCRIPTION_NAME;
var ACTION_NAME = "AlertDialogAction";
var AlertDialogAction = React5.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...actionProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime5.jsx)(Close, { ...dialogScope, ...actionProps, ref: forwardedRef });
  }
);
AlertDialogAction.displayName = ACTION_NAME;
var CANCEL_NAME = "AlertDialogCancel";
var AlertDialogCancel = React5.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...cancelProps } = props;
    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const ref = useComposedRefs(forwardedRef, cancelRef);
    return (0, import_jsx_runtime5.jsx)(Close, { ...dialogScope, ...cancelProps, ref });
  }
);
AlertDialogCancel.displayName = CANCEL_NAME;
var DescriptionWarning = ({ contentRef }) => {
  const MESSAGE = `\`${CONTENT_NAME3}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${CONTENT_NAME3}\` by passing a \`${DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME3}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;
  React5.useEffect(() => {
    const hasDescription = document.getElementById(
      contentRef.current?.getAttribute("aria-describedby")
    );
    if (!hasDescription) console.warn(MESSAGE);
  }, [MESSAGE, contentRef]);
  return null;
};
var Root24 = AlertDialog;
var Trigger22 = AlertDialogTrigger;
var Portal22 = AlertDialogPortal;
var Overlay2 = AlertDialogOverlay;
var Content23 = AlertDialogContent;
var Action = AlertDialogAction;
var Cancel = AlertDialogCancel;
var Title2 = AlertDialogTitle;
var Description2 = AlertDialogDescription;

// node_modules/@radix-ui/react-aspect-ratio/dist/index.mjs
var dist_exports12 = {};
__export(dist_exports12, {
  AspectRatio: () => AspectRatio,
  Root: () => Root7
});
var React6 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var NAME3 = "AspectRatio";
var AspectRatio = React6.forwardRef(
  (props, forwardedRef) => {
    const { ratio = 1 / 1, style, ...aspectRatioProps } = props;
    return (0, import_jsx_runtime6.jsx)(
      "div",
      {
        style: {
          // ensures inner element is contained
          position: "relative",
          // ensures padding bottom trick maths works
          width: "100%",
          paddingBottom: `${100 / ratio}%`
        },
        "data-radix-aspect-ratio-wrapper": "",
        children: (0, import_jsx_runtime6.jsx)(
          Primitive.div,
          {
            ...aspectRatioProps,
            ref: forwardedRef,
            style: {
              ...style,
              // ensures children expand in ratio
              position: "absolute",
              top: 0,
              right: 0,
              bottom: 0,
              left: 0
            }
          }
        )
      }
    );
  }
);
AspectRatio.displayName = NAME3;
var Root7 = AspectRatio;

// node_modules/@radix-ui/react-avatar/dist/index.mjs
var dist_exports13 = {};
__export(dist_exports13, {
  Avatar: () => Avatar,
  AvatarFallback: () => AvatarFallback,
  AvatarImage: () => AvatarImage,
  Fallback: () => Fallback,
  Image: () => Image,
  Root: () => Root8,
  createAvatarScope: () => createAvatarScope
});
var React7 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-is-hydrated/dist/index.mjs
var import_shim = __toESM(require_shim(), 1);
function useIsHydrated() {
  return (0, import_shim.useSyncExternalStore)(
    subscribe,
    () => true,
    () => false
  );
}
function subscribe() {
  return () => {
  };
}

// node_modules/@radix-ui/react-avatar/dist/index.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var AVATAR_NAME = "Avatar";
var [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);
var [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);
var Avatar = React7.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAvatar, ...avatarProps } = props;
    const [imageLoadingStatus, setImageLoadingStatus] = React7.useState("idle");
    return (0, import_jsx_runtime7.jsx)(
      AvatarProvider,
      {
        scope: __scopeAvatar,
        imageLoadingStatus,
        onImageLoadingStatusChange: setImageLoadingStatus,
        children: (0, import_jsx_runtime7.jsx)(Primitive.span, { ...avatarProps, ref: forwardedRef })
      }
    );
  }
);
Avatar.displayName = AVATAR_NAME;
var IMAGE_NAME = "AvatarImage";
var AvatarImage = React7.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAvatar, src, onLoadingStatusChange = () => {
    }, ...imageProps } = props;
    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);
    const imageLoadingStatus = useImageLoadingStatus(src, imageProps);
    const handleLoadingStatusChange = useCallbackRef((status) => {
      onLoadingStatusChange(status);
      context.onImageLoadingStatusChange(status);
    });
    useLayoutEffect2(() => {
      if (imageLoadingStatus !== "idle") {
        handleLoadingStatusChange(imageLoadingStatus);
      }
    }, [imageLoadingStatus, handleLoadingStatusChange]);
    return imageLoadingStatus === "loaded" ? (0, import_jsx_runtime7.jsx)(Primitive.img, { ...imageProps, ref: forwardedRef, src }) : null;
  }
);
AvatarImage.displayName = IMAGE_NAME;
var FALLBACK_NAME = "AvatarFallback";
var AvatarFallback = React7.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAvatar, delayMs, ...fallbackProps } = props;
    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);
    const [canRender, setCanRender] = React7.useState(delayMs === void 0);
    React7.useEffect(() => {
      if (delayMs !== void 0) {
        const timerId = window.setTimeout(() => setCanRender(true), delayMs);
        return () => window.clearTimeout(timerId);
      }
    }, [delayMs]);
    return canRender && context.imageLoadingStatus !== "loaded" ? (0, import_jsx_runtime7.jsx)(Primitive.span, { ...fallbackProps, ref: forwardedRef }) : null;
  }
);
AvatarFallback.displayName = FALLBACK_NAME;
function resolveLoadingStatus(image, src) {
  if (!image) {
    return "idle";
  }
  if (!src) {
    return "error";
  }
  if (image.src !== src) {
    image.src = src;
  }
  return image.complete && image.naturalWidth > 0 ? "loaded" : "loading";
}
function useImageLoadingStatus(src, { referrerPolicy, crossOrigin }) {
  const isHydrated = useIsHydrated();
  const imageRef = React7.useRef(null);
  const image = (() => {
    if (!isHydrated) return null;
    if (!imageRef.current) {
      imageRef.current = new window.Image();
    }
    return imageRef.current;
  })();
  const [loadingStatus, setLoadingStatus] = React7.useState(
    () => resolveLoadingStatus(image, src)
  );
  useLayoutEffect2(() => {
    setLoadingStatus(resolveLoadingStatus(image, src));
  }, [image, src]);
  useLayoutEffect2(() => {
    const updateStatus = (status) => () => {
      setLoadingStatus(status);
    };
    if (!image) return;
    const handleLoad = updateStatus("loaded");
    const handleError = updateStatus("error");
    image.addEventListener("load", handleLoad);
    image.addEventListener("error", handleError);
    if (referrerPolicy) {
      image.referrerPolicy = referrerPolicy;
    }
    if (typeof crossOrigin === "string") {
      image.crossOrigin = crossOrigin;
    }
    return () => {
      image.removeEventListener("load", handleLoad);
      image.removeEventListener("error", handleError);
    };
  }, [image, crossOrigin, referrerPolicy]);
  return loadingStatus;
}
var Root8 = Avatar;
var Image = AvatarImage;
var Fallback = AvatarFallback;

// node_modules/@radix-ui/react-checkbox/dist/index.mjs
var dist_exports14 = {};
__export(dist_exports14, {
  Checkbox: () => Checkbox,
  CheckboxIndicator: () => CheckboxIndicator,
  Indicator: () => CheckboxIndicator,
  Root: () => Checkbox,
  createCheckboxScope: () => createCheckboxScope,
  unstable_BubbleInput: () => CheckboxBubbleInput,
  unstable_CheckboxBubbleInput: () => CheckboxBubbleInput,
  unstable_CheckboxProvider: () => CheckboxProvider,
  unstable_CheckboxTrigger: () => CheckboxTrigger,
  unstable_Provider: () => CheckboxProvider,
  unstable_Trigger: () => CheckboxTrigger
});
var React9 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-previous/dist/index.mjs
var React8 = __toESM(require_react(), 1);
function usePrevious(value) {
  const ref = React8.useRef({ value, previous: value });
  return React8.useMemo(() => {
    if (ref.current.value !== value) {
      ref.current.previous = ref.current.value;
      ref.current.value = value;
    }
    return ref.current.previous;
  }, [value]);
}

// node_modules/@radix-ui/react-checkbox/dist/index.mjs
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var CHECKBOX_NAME = "Checkbox";
var [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);
var [CheckboxProviderImpl, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
function CheckboxProvider(props) {
  const {
    __scopeCheckbox,
    checked: checkedProp,
    children,
    defaultChecked,
    disabled,
    form,
    name,
    onCheckedChange,
    required,
    value = "on",
    // @ts-expect-error
    internal_do_not_use_render
  } = props;
  const [checked, setChecked] = useControllableState({
    prop: checkedProp,
    defaultProp: defaultChecked ?? false,
    onChange: onCheckedChange,
    caller: CHECKBOX_NAME
  });
  const [control, setControl] = React9.useState(null);
  const [bubbleInput, setBubbleInput] = React9.useState(null);
  const hasConsumerStoppedPropagationRef = React9.useRef(false);
  const isFormControl2 = control ? !!form || !!control.closest("form") : (
    // We set this to true by default so that events bubble to forms without JS (SSR)
    true
  );
  const context = {
    checked,
    disabled,
    setChecked,
    control,
    setControl,
    name,
    form,
    value,
    hasConsumerStoppedPropagationRef,
    required,
    defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked,
    isFormControl: isFormControl2,
    bubbleInput,
    setBubbleInput
  };
  return (0, import_jsx_runtime8.jsx)(
    CheckboxProviderImpl,
    {
      scope: __scopeCheckbox,
      ...context,
      children: isFunction(internal_do_not_use_render) ? internal_do_not_use_render(context) : children
    }
  );
}
var TRIGGER_NAME4 = "CheckboxTrigger";
var CheckboxTrigger = React9.forwardRef(
  ({ __scopeCheckbox, onKeyDown, onClick, ...checkboxProps }, forwardedRef) => {
    const {
      control,
      value,
      disabled,
      checked,
      required,
      setControl,
      setChecked,
      hasConsumerStoppedPropagationRef,
      isFormControl: isFormControl2,
      bubbleInput
    } = useCheckboxContext(TRIGGER_NAME4, __scopeCheckbox);
    const composedRefs = useComposedRefs(forwardedRef, setControl);
    const initialCheckedStateRef = React9.useRef(checked);
    React9.useEffect(() => {
      const form = control?.form;
      if (form) {
        const reset = () => setChecked(initialCheckedStateRef.current);
        form.addEventListener("reset", reset);
        return () => form.removeEventListener("reset", reset);
      }
    }, [control, setChecked]);
    return (0, import_jsx_runtime8.jsx)(
      Primitive.button,
      {
        type: "button",
        role: "checkbox",
        "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
        "aria-required": required,
        "data-state": getState3(checked),
        "data-disabled": disabled ? "" : void 0,
        disabled,
        value,
        ...checkboxProps,
        ref: composedRefs,
        onKeyDown: composeEventHandlers(onKeyDown, (event) => {
          if (event.key === "Enter") event.preventDefault();
        }),
        onClick: composeEventHandlers(onClick, (event) => {
          setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);
          if (bubbleInput && isFormControl2) {
            hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
            if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
          }
        })
      }
    );
  }
);
CheckboxTrigger.displayName = TRIGGER_NAME4;
var Checkbox = React9.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeCheckbox,
      name,
      checked,
      defaultChecked,
      required,
      disabled,
      value,
      onCheckedChange,
      form,
      ...checkboxProps
    } = props;
    return (0, import_jsx_runtime8.jsx)(
      CheckboxProvider,
      {
        __scopeCheckbox,
        checked,
        defaultChecked,
        disabled,
        required,
        onCheckedChange,
        name,
        form,
        value,
        internal_do_not_use_render: ({ isFormControl: isFormControl2 }) => (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [
          (0, import_jsx_runtime8.jsx)(
            CheckboxTrigger,
            {
              ...checkboxProps,
              ref: forwardedRef,
              __scopeCheckbox
            }
          ),
          isFormControl2 && (0, import_jsx_runtime8.jsx)(
            CheckboxBubbleInput,
            {
              __scopeCheckbox
            }
          )
        ] })
      }
    );
  }
);
Checkbox.displayName = CHECKBOX_NAME;
var INDICATOR_NAME = "CheckboxIndicator";
var CheckboxIndicator = React9.forwardRef(
  (props, forwardedRef) => {
    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;
    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
    return (0, import_jsx_runtime8.jsx)(
      Presence,
      {
        present: forceMount || isIndeterminate(context.checked) || context.checked === true,
        children: (0, import_jsx_runtime8.jsx)(
          Primitive.span,
          {
            "data-state": getState3(context.checked),
            "data-disabled": context.disabled ? "" : void 0,
            ...indicatorProps,
            ref: forwardedRef,
            style: { pointerEvents: "none", ...props.style }
          }
        )
      }
    );
  }
);
CheckboxIndicator.displayName = INDICATOR_NAME;
var BUBBLE_INPUT_NAME = "CheckboxBubbleInput";
var CheckboxBubbleInput = React9.forwardRef(
  ({ __scopeCheckbox, ...props }, forwardedRef) => {
    const {
      control,
      hasConsumerStoppedPropagationRef,
      checked,
      defaultChecked,
      required,
      disabled,
      name,
      value,
      form,
      bubbleInput,
      setBubbleInput
    } = useCheckboxContext(BUBBLE_INPUT_NAME, __scopeCheckbox);
    const composedRefs = useComposedRefs(forwardedRef, setBubbleInput);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React9.useEffect(() => {
      const input = bubbleInput;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      const bubbles = !hasConsumerStoppedPropagationRef.current;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        input.indeterminate = isIndeterminate(checked);
        setChecked.call(input, isIndeterminate(checked) ? false : checked);
        input.dispatchEvent(event);
      }
    }, [bubbleInput, prevChecked, checked, hasConsumerStoppedPropagationRef]);
    const defaultCheckedRef = React9.useRef(isIndeterminate(checked) ? false : checked);
    return (0, import_jsx_runtime8.jsx)(
      Primitive.input,
      {
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: defaultChecked ?? defaultCheckedRef.current,
        required,
        disabled,
        name,
        value,
        form,
        ...props,
        tabIndex: -1,
        ref: composedRefs,
        style: {
          ...props.style,
          ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0,
          // We transform because the input is absolutely positioned but we have
          // rendered it **after** the button. This pulls it back to sit on top
          // of the button.
          transform: "translateX(-100%)"
        }
      }
    );
  }
);
CheckboxBubbleInput.displayName = BUBBLE_INPUT_NAME;
function isFunction(value) {
  return typeof value === "function";
}
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getState3(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}

// node_modules/@radix-ui/react-context-menu/dist/index.mjs
var dist_exports15 = {};
__export(dist_exports15, {
  Arrow: () => Arrow22,
  CheckboxItem: () => CheckboxItem2,
  Content: () => Content24,
  ContextMenu: () => ContextMenu,
  ContextMenuArrow: () => ContextMenuArrow,
  ContextMenuCheckboxItem: () => ContextMenuCheckboxItem,
  ContextMenuContent: () => ContextMenuContent,
  ContextMenuGroup: () => ContextMenuGroup,
  ContextMenuItem: () => ContextMenuItem,
  ContextMenuItemIndicator: () => ContextMenuItemIndicator,
  ContextMenuLabel: () => ContextMenuLabel,
  ContextMenuPortal: () => ContextMenuPortal,
  ContextMenuRadioGroup: () => ContextMenuRadioGroup,
  ContextMenuRadioItem: () => ContextMenuRadioItem,
  ContextMenuSeparator: () => ContextMenuSeparator,
  ContextMenuSub: () => ContextMenuSub,
  ContextMenuSubContent: () => ContextMenuSubContent,
  ContextMenuSubTrigger: () => ContextMenuSubTrigger,
  ContextMenuTrigger: () => ContextMenuTrigger,
  Group: () => Group2,
  Item: () => Item22,
  ItemIndicator: () => ItemIndicator2,
  Label: () => Label2,
  Portal: () => Portal23,
  RadioGroup: () => RadioGroup2,
  RadioItem: () => RadioItem2,
  Root: () => Root25,
  Separator: () => Separator2,
  Sub: () => Sub2,
  SubContent: () => SubContent2,
  SubTrigger: () => SubTrigger2,
  Trigger: () => Trigger3,
  createContextMenuScope: () => createContextMenuScope
});
var React10 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var CONTEXT_MENU_NAME = "ContextMenu";
var [createContextMenuContext, createContextMenuScope] = createContextScope(CONTEXT_MENU_NAME, [
  createMenuScope
]);
var useMenuScope = createMenuScope();
var [ContextMenuProvider, useContextMenuContext] = createContextMenuContext(CONTEXT_MENU_NAME);
var ContextMenu = (props) => {
  const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;
  const [open, setOpen] = React10.useState(false);
  const menuScope = useMenuScope(__scopeContextMenu);
  const handleOpenChangeProp = useCallbackRef(onOpenChange);
  const handleOpenChange = React10.useCallback(
    (open2) => {
      setOpen(open2);
      handleOpenChangeProp(open2);
    },
    [handleOpenChangeProp]
  );
  return (0, import_jsx_runtime9.jsx)(
    ContextMenuProvider,
    {
      scope: __scopeContextMenu,
      open,
      onOpenChange: handleOpenChange,
      modal,
      children: (0, import_jsx_runtime9.jsx)(
        Root32,
        {
          ...menuScope,
          dir,
          open,
          onOpenChange: handleOpenChange,
          modal,
          children
        }
      )
    }
  );
};
ContextMenu.displayName = CONTEXT_MENU_NAME;
var TRIGGER_NAME5 = "ContextMenuTrigger";
var ContextMenuTrigger = React10.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, disabled = false, ...triggerProps } = props;
    const context = useContextMenuContext(TRIGGER_NAME5, __scopeContextMenu);
    const menuScope = useMenuScope(__scopeContextMenu);
    const pointRef = React10.useRef({ x: 0, y: 0 });
    const virtualRef = React10.useRef({
      getBoundingClientRect: () => DOMRect.fromRect({ width: 0, height: 0, ...pointRef.current })
    });
    const longPressTimerRef = React10.useRef(0);
    const clearLongPress = React10.useCallback(
      () => window.clearTimeout(longPressTimerRef.current),
      []
    );
    const handleOpen = (event) => {
      pointRef.current = { x: event.clientX, y: event.clientY };
      context.onOpenChange(true);
    };
    React10.useEffect(() => clearLongPress, [clearLongPress]);
    React10.useEffect(() => void (disabled && clearLongPress()), [disabled, clearLongPress]);
    return (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
      (0, import_jsx_runtime9.jsx)(Anchor2, { ...menuScope, virtualRef }),
      (0, import_jsx_runtime9.jsx)(
        Primitive.span,
        {
          "data-state": context.open ? "open" : "closed",
          "data-disabled": disabled ? "" : void 0,
          ...triggerProps,
          ref: forwardedRef,
          style: { WebkitTouchCallout: "none", ...props.style },
          onContextMenu: disabled ? props.onContextMenu : composeEventHandlers(props.onContextMenu, (event) => {
            clearLongPress();
            handleOpen(event);
            event.preventDefault();
          }),
          onPointerDown: disabled ? props.onPointerDown : composeEventHandlers(
            props.onPointerDown,
            whenTouchOrPen((event) => {
              clearLongPress();
              longPressTimerRef.current = window.setTimeout(() => handleOpen(event), 700);
            })
          ),
          onPointerMove: disabled ? props.onPointerMove : composeEventHandlers(props.onPointerMove, whenTouchOrPen(clearLongPress)),
          onPointerCancel: disabled ? props.onPointerCancel : composeEventHandlers(props.onPointerCancel, whenTouchOrPen(clearLongPress)),
          onPointerUp: disabled ? props.onPointerUp : composeEventHandlers(props.onPointerUp, whenTouchOrPen(clearLongPress))
        }
      )
    ] });
  }
);
ContextMenuTrigger.displayName = TRIGGER_NAME5;
var PORTAL_NAME2 = "ContextMenuPortal";
var ContextMenuPortal = (props) => {
  const { __scopeContextMenu, ...portalProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(Portal3, { ...menuScope, ...portalProps });
};
ContextMenuPortal.displayName = PORTAL_NAME2;
var CONTENT_NAME4 = "ContextMenuContent";
var ContextMenuContent = React10.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...contentProps } = props;
    const context = useContextMenuContext(CONTENT_NAME4, __scopeContextMenu);
    const menuScope = useMenuScope(__scopeContextMenu);
    const hasInteractedOutsideRef = React10.useRef(false);
    return (0, import_jsx_runtime9.jsx)(
      Content22,
      {
        ...menuScope,
        ...contentProps,
        ref: forwardedRef,
        side: "right",
        sideOffset: 2,
        align: "start",
        onCloseAutoFocus: (event) => {
          props.onCloseAutoFocus?.(event);
          if (!event.defaultPrevented && hasInteractedOutsideRef.current) {
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          props.onInteractOutside?.(event);
          if (!event.defaultPrevented && !context.modal) hasInteractedOutsideRef.current = true;
        },
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
ContextMenuContent.displayName = CONTENT_NAME4;
var GROUP_NAME = "ContextMenuGroup";
var ContextMenuGroup = React10.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...groupProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime9.jsx)(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
  }
);
ContextMenuGroup.displayName = GROUP_NAME;
var LABEL_NAME = "ContextMenuLabel";
var ContextMenuLabel = React10.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...labelProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime9.jsx)(Label, { ...menuScope, ...labelProps, ref: forwardedRef });
  }
);
ContextMenuLabel.displayName = LABEL_NAME;
var ITEM_NAME2 = "ContextMenuItem";
var ContextMenuItem = React10.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...itemProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime9.jsx)(Item2, { ...menuScope, ...itemProps, ref: forwardedRef });
  }
);
ContextMenuItem.displayName = ITEM_NAME2;
var CHECKBOX_ITEM_NAME = "ContextMenuCheckboxItem";
var ContextMenuCheckboxItem = React10.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...checkboxItemProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
});
ContextMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;
var RADIO_GROUP_NAME = "ContextMenuRadioGroup";
var ContextMenuRadioGroup = React10.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...radioGroupProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
});
ContextMenuRadioGroup.displayName = RADIO_GROUP_NAME;
var RADIO_ITEM_NAME = "ContextMenuRadioItem";
var ContextMenuRadioItem = React10.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...radioItemProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
});
ContextMenuRadioItem.displayName = RADIO_ITEM_NAME;
var INDICATOR_NAME2 = "ContextMenuItemIndicator";
var ContextMenuItemIndicator = React10.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...itemIndicatorProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
});
ContextMenuItemIndicator.displayName = INDICATOR_NAME2;
var SEPARATOR_NAME = "ContextMenuSeparator";
var ContextMenuSeparator = React10.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...separatorProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });
});
ContextMenuSeparator.displayName = SEPARATOR_NAME;
var ARROW_NAME = "ContextMenuArrow";
var ContextMenuArrow = React10.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...arrowProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime9.jsx)(Arrow2, { ...menuScope, ...arrowProps, ref: forwardedRef });
  }
);
ContextMenuArrow.displayName = ARROW_NAME;
var SUB_NAME = "ContextMenuSub";
var ContextMenuSub = (props) => {
  const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: SUB_NAME
  });
  return (0, import_jsx_runtime9.jsx)(Sub, { ...menuScope, open, onOpenChange: setOpen, children });
};
ContextMenuSub.displayName = SUB_NAME;
var SUB_TRIGGER_NAME = "ContextMenuSubTrigger";
var ContextMenuSubTrigger = React10.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...triggerItemProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(SubTrigger, { ...menuScope, ...triggerItemProps, ref: forwardedRef });
});
ContextMenuSubTrigger.displayName = SUB_TRIGGER_NAME;
var SUB_CONTENT_NAME = "ContextMenuSubContent";
var ContextMenuSubContent = React10.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...subContentProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime9.jsx)(
    SubContent,
    {
      ...menuScope,
      ...subContentProps,
      ref: forwardedRef,
      style: {
        ...props.style,
        // re-namespace exposed content custom properties
        ...{
          "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
          "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
          "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    }
  );
});
ContextMenuSubContent.displayName = SUB_CONTENT_NAME;
function whenTouchOrPen(handler) {
  return (event) => event.pointerType !== "mouse" ? handler(event) : void 0;
}
var Root25 = ContextMenu;
var Trigger3 = ContextMenuTrigger;
var Portal23 = ContextMenuPortal;
var Content24 = ContextMenuContent;
var Group2 = ContextMenuGroup;
var Label2 = ContextMenuLabel;
var Item22 = ContextMenuItem;
var CheckboxItem2 = ContextMenuCheckboxItem;
var RadioGroup2 = ContextMenuRadioGroup;
var RadioItem2 = ContextMenuRadioItem;
var ItemIndicator2 = ContextMenuItemIndicator;
var Separator2 = ContextMenuSeparator;
var Arrow22 = ContextMenuArrow;
var Sub2 = ContextMenuSub;
var SubTrigger2 = ContextMenuSubTrigger;
var SubContent2 = ContextMenuSubContent;

// node_modules/@radix-ui/react-form/dist/index.mjs
var React12 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-label/dist/index.mjs
var React11 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var NAME4 = "Label";
var Label3 = React11.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime10.jsx)(
    Primitive.label,
    {
      ...props,
      ref: forwardedRef,
      onMouseDown: (event) => {
        const target = event.target;
        if (target.closest("button, input, select, textarea")) return;
        props.onMouseDown?.(event);
        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
      }
    }
  );
});
Label3.displayName = NAME4;

// node_modules/@radix-ui/react-form/dist/index.mjs
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var [createFormContext, createFormScope] = createContextScope("Form");
var FORM_NAME = "Form";
var [ValidationProvider, useValidationContext] = createFormContext(FORM_NAME);
var [AriaDescriptionProvider, useAriaDescriptionContext] = createFormContext(FORM_NAME);
var Form = React12.forwardRef(
  (props, forwardedRef) => {
    const { __scopeForm, onClearServerErrors = () => {
    }, ...rootProps } = props;
    const formRef = React12.useRef(null);
    const composedFormRef = useComposedRefs(forwardedRef, formRef);
    const [validityMap, setValidityMap] = React12.useState({});
    const getFieldValidity = React12.useCallback(
      (fieldName) => validityMap[fieldName],
      [validityMap]
    );
    const handleFieldValidityChange = React12.useCallback(
      (fieldName, validity) => setValidityMap((prevValidityMap) => ({
        ...prevValidityMap,
        [fieldName]: { ...prevValidityMap[fieldName] ?? {}, ...validity }
      })),
      []
    );
    const handleFieldValiditionClear = React12.useCallback((fieldName) => {
      setValidityMap((prevValidityMap) => ({ ...prevValidityMap, [fieldName]: void 0 }));
      setCustomErrorsMap((prevCustomErrorsMap) => ({ ...prevCustomErrorsMap, [fieldName]: {} }));
    }, []);
    const [customMatcherEntriesMap, setCustomMatcherEntriesMap] = React12.useState({});
    const getFieldCustomMatcherEntries = React12.useCallback(
      (fieldName) => customMatcherEntriesMap[fieldName] ?? [],
      [customMatcherEntriesMap]
    );
    const handleFieldCustomMatcherAdd = React12.useCallback((fieldName, matcherEntry) => {
      setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({
        ...prevCustomMatcherEntriesMap,
        [fieldName]: [...prevCustomMatcherEntriesMap[fieldName] ?? [], matcherEntry]
      }));
    }, []);
    const handleFieldCustomMatcherRemove = React12.useCallback((fieldName, matcherEntryId) => {
      setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({
        ...prevCustomMatcherEntriesMap,
        [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter(
          (matcherEntry) => matcherEntry.id !== matcherEntryId
        )
      }));
    }, []);
    const [customErrorsMap, setCustomErrorsMap] = React12.useState({});
    const getFieldCustomErrors = React12.useCallback(
      (fieldName) => customErrorsMap[fieldName] ?? {},
      [customErrorsMap]
    );
    const handleFieldCustomErrorsChange = React12.useCallback((fieldName, customErrors) => {
      setCustomErrorsMap((prevCustomErrorsMap) => ({
        ...prevCustomErrorsMap,
        [fieldName]: { ...prevCustomErrorsMap[fieldName] ?? {}, ...customErrors }
      }));
    }, []);
    const [messageIdsMap, setMessageIdsMap] = React12.useState({});
    const handleFieldMessageIdAdd = React12.useCallback((fieldName, id) => {
      setMessageIdsMap((prevMessageIdsMap) => {
        const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);
        return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };
      });
    }, []);
    const handleFieldMessageIdRemove = React12.useCallback((fieldName, id) => {
      setMessageIdsMap((prevMessageIdsMap) => {
        const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);
        fieldDescriptionIds.delete(id);
        return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };
      });
    }, []);
    const getFieldDescription = React12.useCallback(
      (fieldName) => Array.from(messageIdsMap[fieldName] ?? []).join(" ") || void 0,
      [messageIdsMap]
    );
    return (0, import_jsx_runtime11.jsx)(
      ValidationProvider,
      {
        scope: __scopeForm,
        getFieldValidity,
        onFieldValidityChange: handleFieldValidityChange,
        getFieldCustomMatcherEntries,
        onFieldCustomMatcherEntryAdd: handleFieldCustomMatcherAdd,
        onFieldCustomMatcherEntryRemove: handleFieldCustomMatcherRemove,
        getFieldCustomErrors,
        onFieldCustomErrorsChange: handleFieldCustomErrorsChange,
        onFieldValiditionClear: handleFieldValiditionClear,
        children: (0, import_jsx_runtime11.jsx)(
          AriaDescriptionProvider,
          {
            scope: __scopeForm,
            onFieldMessageIdAdd: handleFieldMessageIdAdd,
            onFieldMessageIdRemove: handleFieldMessageIdRemove,
            getFieldDescription,
            children: (0, import_jsx_runtime11.jsx)(
              Primitive.form,
              {
                ...rootProps,
                ref: composedFormRef,
                onInvalid: composeEventHandlers(props.onInvalid, (event) => {
                  const firstInvalidControl = getFirstInvalidControl(event.currentTarget);
                  if (firstInvalidControl === event.target) firstInvalidControl.focus();
                  event.preventDefault();
                }),
                onSubmit: composeEventHandlers(props.onSubmit, onClearServerErrors, {
                  checkForDefaultPrevented: false
                }),
                onReset: composeEventHandlers(props.onReset, onClearServerErrors)
              }
            )
          }
        )
      }
    );
  }
);
Form.displayName = FORM_NAME;
var FIELD_NAME = "FormField";
var [FormFieldProvider, useFormFieldContext] = createFormContext(FIELD_NAME);
var FormField = React12.forwardRef(
  (props, forwardedRef) => {
    const { __scopeForm, name, serverInvalid = false, ...fieldProps } = props;
    const validationContext = useValidationContext(FIELD_NAME, __scopeForm);
    const validity = validationContext.getFieldValidity(name);
    const id = useId();
    return (0, import_jsx_runtime11.jsx)(FormFieldProvider, { scope: __scopeForm, id, name, serverInvalid, children: (0, import_jsx_runtime11.jsx)(
      Primitive.div,
      {
        "data-valid": getValidAttribute(validity, serverInvalid),
        "data-invalid": getInvalidAttribute(validity, serverInvalid),
        ...fieldProps,
        ref: forwardedRef
      }
    ) });
  }
);
FormField.displayName = FIELD_NAME;
var LABEL_NAME2 = "FormLabel";
var FormLabel = React12.forwardRef(
  (props, forwardedRef) => {
    const { __scopeForm, ...labelProps } = props;
    const validationContext = useValidationContext(LABEL_NAME2, __scopeForm);
    const fieldContext = useFormFieldContext(LABEL_NAME2, __scopeForm);
    const htmlFor = labelProps.htmlFor || fieldContext.id;
    const validity = validationContext.getFieldValidity(fieldContext.name);
    return (0, import_jsx_runtime11.jsx)(
      Label3,
      {
        "data-valid": getValidAttribute(validity, fieldContext.serverInvalid),
        "data-invalid": getInvalidAttribute(validity, fieldContext.serverInvalid),
        ...labelProps,
        ref: forwardedRef,
        htmlFor
      }
    );
  }
);
FormLabel.displayName = LABEL_NAME2;
var CONTROL_NAME = "FormControl";
var FormControl = React12.forwardRef(
  (props, forwardedRef) => {
    const { __scopeForm, ...controlProps } = props;
    const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);
    const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);
    const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);
    const ref = React12.useRef(null);
    const composedRef = useComposedRefs(forwardedRef, ref);
    const name = controlProps.name || fieldContext.name;
    const id = controlProps.id || fieldContext.id;
    const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);
    const { onFieldValidityChange, onFieldCustomErrorsChange, onFieldValiditionClear } = validationContext;
    const updateControlValidity = React12.useCallback(
      async (control) => {
        if (hasBuiltInError(control.validity)) {
          const controlValidity2 = validityStateToObject(control.validity);
          onFieldValidityChange(name, controlValidity2);
          return;
        }
        const formData = control.form ? new FormData(control.form) : new FormData();
        const matcherArgs = [control.value, formData];
        const syncCustomMatcherEntries = [];
        const ayncCustomMatcherEntries = [];
        customMatcherEntries.forEach((customMatcherEntry) => {
          if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {
            ayncCustomMatcherEntries.push(customMatcherEntry);
          } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {
            syncCustomMatcherEntries.push(customMatcherEntry);
          }
        });
        const syncCustomErrors = syncCustomMatcherEntries.map(({ id: id2, match }) => {
          return [id2, match(...matcherArgs)];
        });
        const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);
        const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);
        const hasCustomError = hasSyncCustomErrors;
        control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : "");
        const controlValidity = validityStateToObject(control.validity);
        onFieldValidityChange(name, controlValidity);
        onFieldCustomErrorsChange(name, syncCustomErrorsById);
        if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {
          const promisedCustomErrors = ayncCustomMatcherEntries.map(
            ({ id: id2, match }) => match(...matcherArgs).then((matches) => [id2, matches])
          );
          const asyncCustomErrors = await Promise.all(promisedCustomErrors);
          const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);
          const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);
          const hasCustomError2 = hasAsyncCustomErrors;
          control.setCustomValidity(hasCustomError2 ? DEFAULT_INVALID_MESSAGE : "");
          const controlValidity2 = validityStateToObject(control.validity);
          onFieldValidityChange(name, controlValidity2);
          onFieldCustomErrorsChange(name, asyncCustomErrorsById);
        }
      },
      [customMatcherEntries, name, onFieldCustomErrorsChange, onFieldValidityChange]
    );
    React12.useEffect(() => {
      const control = ref.current;
      if (control) {
        const handleChange = () => updateControlValidity(control);
        control.addEventListener("change", handleChange);
        return () => control.removeEventListener("change", handleChange);
      }
    }, [updateControlValidity]);
    const resetControlValidity = React12.useCallback(() => {
      const control = ref.current;
      if (control) {
        control.setCustomValidity("");
        onFieldValiditionClear(name);
      }
    }, [name, onFieldValiditionClear]);
    React12.useEffect(() => {
      const form = ref.current?.form;
      if (form) {
        form.addEventListener("reset", resetControlValidity);
        return () => form.removeEventListener("reset", resetControlValidity);
      }
    }, [resetControlValidity]);
    React12.useEffect(() => {
      const control = ref.current;
      const form = control?.closest("form");
      if (form && fieldContext.serverInvalid) {
        const firstInvalidControl = getFirstInvalidControl(form);
        if (firstInvalidControl === control) firstInvalidControl.focus();
      }
    }, [fieldContext.serverInvalid]);
    const validity = validationContext.getFieldValidity(name);
    return (0, import_jsx_runtime11.jsx)(
      Primitive.input,
      {
        "data-valid": getValidAttribute(validity, fieldContext.serverInvalid),
        "data-invalid": getInvalidAttribute(validity, fieldContext.serverInvalid),
        "aria-invalid": fieldContext.serverInvalid ? true : void 0,
        "aria-describedby": ariaDescriptionContext.getFieldDescription(name),
        title: "",
        ...controlProps,
        ref: composedRef,
        id,
        name,
        onInvalid: composeEventHandlers(props.onInvalid, (event) => {
          const control = event.currentTarget;
          updateControlValidity(control);
        }),
        onChange: composeEventHandlers(props.onChange, (_event) => {
          resetControlValidity();
        })
      }
    );
  }
);
FormControl.displayName = CONTROL_NAME;
var DEFAULT_INVALID_MESSAGE = "This value is not valid";
var DEFAULT_BUILT_IN_MESSAGES = {
  badInput: DEFAULT_INVALID_MESSAGE,
  patternMismatch: "This value does not match the required pattern",
  rangeOverflow: "This value is too large",
  rangeUnderflow: "This value is too small",
  stepMismatch: "This value does not match the required step",
  tooLong: "This value is too long",
  tooShort: "This value is too short",
  typeMismatch: "This value does not match the required type",
  valid: void 0,
  valueMissing: "This value is missing"
};
var MESSAGE_NAME = "FormMessage";
var FormMessage = React12.forwardRef(
  (props, forwardedRef) => {
    const { match, name: nameProp, ...messageProps } = props;
    const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);
    const name = nameProp ?? fieldContext.name;
    if (match === void 0) {
      return (0, import_jsx_runtime11.jsx)(FormMessageImpl, { ...messageProps, ref: forwardedRef, name, children: props.children || DEFAULT_INVALID_MESSAGE });
    } else if (typeof match === "function") {
      return (0, import_jsx_runtime11.jsx)(FormCustomMessage, { match, ...messageProps, ref: forwardedRef, name });
    } else {
      return (0, import_jsx_runtime11.jsx)(FormBuiltInMessage, { match, ...messageProps, ref: forwardedRef, name });
    }
  }
);
FormMessage.displayName = MESSAGE_NAME;
var FormBuiltInMessage = React12.forwardRef(
  (props, forwardedRef) => {
    const { match, forceMatch = false, name, children, ...messageProps } = props;
    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);
    const validity = validationContext.getFieldValidity(name);
    const matches = forceMatch || validity?.[match];
    if (matches) {
      return (0, import_jsx_runtime11.jsx)(FormMessageImpl, { ref: forwardedRef, ...messageProps, name, children: children ?? DEFAULT_BUILT_IN_MESSAGES[match] });
    }
    return null;
  }
);
var FormCustomMessage = React12.forwardRef(
  (props, forwardedRef) => {
    const { match, forceMatch = false, name, id: idProp, children, ...messageProps } = props;
    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);
    const ref = React12.useRef(null);
    const composedRef = useComposedRefs(forwardedRef, ref);
    const _id = useId();
    const id = idProp ?? _id;
    const customMatcherEntry = React12.useMemo(() => ({ id, match }), [id, match]);
    const { onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove } = validationContext;
    React12.useEffect(() => {
      onFieldCustomMatcherEntryAdd(name, customMatcherEntry);
      return () => onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id);
    }, [customMatcherEntry, name, onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove]);
    const validity = validationContext.getFieldValidity(name);
    const customErrors = validationContext.getFieldCustomErrors(name);
    const hasMatchingCustomError = customErrors[id];
    const matches = forceMatch || validity && !hasBuiltInError(validity) && hasMatchingCustomError;
    if (matches) {
      return (0, import_jsx_runtime11.jsx)(FormMessageImpl, { id, ref: composedRef, ...messageProps, name, children: children ?? DEFAULT_INVALID_MESSAGE });
    }
    return null;
  }
);
var FormMessageImpl = React12.forwardRef(
  (props, forwardedRef) => {
    const { __scopeForm, id: idProp, name, ...messageProps } = props;
    const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);
    const _id = useId();
    const id = idProp ?? _id;
    const { onFieldMessageIdAdd, onFieldMessageIdRemove } = ariaDescriptionContext;
    React12.useEffect(() => {
      onFieldMessageIdAdd(name, id);
      return () => onFieldMessageIdRemove(name, id);
    }, [name, id, onFieldMessageIdAdd, onFieldMessageIdRemove]);
    return (0, import_jsx_runtime11.jsx)(Primitive.span, { id, ...messageProps, ref: forwardedRef });
  }
);
var VALIDITY_STATE_NAME = "FormValidityState";
var FormValidityState = (props) => {
  const { __scopeForm, name: nameProp, children } = props;
  const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);
  const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);
  const name = nameProp ?? fieldContext.name;
  const validity = validationContext.getFieldValidity(name);
  return (0, import_jsx_runtime11.jsx)(import_jsx_runtime11.Fragment, { children: children(validity) });
};
FormValidityState.displayName = VALIDITY_STATE_NAME;
var SUBMIT_NAME = "FormSubmit";
var FormSubmit = React12.forwardRef(
  (props, forwardedRef) => {
    const { __scopeForm, ...submitProps } = props;
    return (0, import_jsx_runtime11.jsx)(Primitive.button, { type: "submit", ...submitProps, ref: forwardedRef });
  }
);
FormSubmit.displayName = SUBMIT_NAME;
function validityStateToObject(validity) {
  const object = {};
  for (const key in validity) {
    object[key] = validity[key];
  }
  return object;
}
function isHTMLElement(element) {
  return element instanceof HTMLElement;
}
function isFormControl(element) {
  return "validity" in element;
}
function isInvalid(control) {
  return isFormControl(control) && (control.validity.valid === false || control.getAttribute("aria-invalid") === "true");
}
function getFirstInvalidControl(form) {
  const elements = form.elements;
  const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);
  return firstInvalidControl;
}
function isAsyncCustomMatcherEntry(entry, args) {
  return entry.match.constructor.name === "AsyncFunction" || returnsPromise(entry.match, args);
}
function isSyncCustomMatcherEntry(entry) {
  return entry.match.constructor.name === "Function";
}
function returnsPromise(func, args) {
  return func(...args) instanceof Promise;
}
function hasBuiltInError(validity) {
  let error = false;
  for (const validityKey in validity) {
    const key = validityKey;
    if (key !== "valid" && key !== "customError" && validity[key]) {
      error = true;
      break;
    }
  }
  return error;
}
function getValidAttribute(validity, serverInvalid) {
  if (validity?.valid === true && !serverInvalid) return true;
  return void 0;
}
function getInvalidAttribute(validity, serverInvalid) {
  if (validity?.valid === false || serverInvalid) return true;
  return void 0;
}

// node_modules/@radix-ui/react-hover-card/dist/index.mjs
var dist_exports17 = {};
__export(dist_exports17, {
  Arrow: () => Arrow23,
  Content: () => Content25,
  HoverCard: () => HoverCard,
  HoverCardArrow: () => HoverCardArrow,
  HoverCardContent: () => HoverCardContent,
  HoverCardPortal: () => HoverCardPortal,
  HoverCardTrigger: () => HoverCardTrigger,
  Portal: () => Portal4,
  Root: () => Root26,
  Trigger: () => Trigger4,
  createHoverCardScope: () => createHoverCardScope
});
var React13 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var originalBodyUserSelect;
var HOVERCARD_NAME = "HoverCard";
var [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [
  createPopperScope
]);
var usePopperScope = createPopperScope();
var [HoverCardProvider, useHoverCardContext] = createHoverCardContext(HOVERCARD_NAME);
var HoverCard = (props) => {
  const {
    __scopeHoverCard,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    openDelay = 700,
    closeDelay = 300
  } = props;
  const popperScope = usePopperScope(__scopeHoverCard);
  const openTimerRef = React13.useRef(0);
  const closeTimerRef = React13.useRef(0);
  const hasSelectionRef = React13.useRef(false);
  const isPointerDownOnContentRef = React13.useRef(false);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: HOVERCARD_NAME
  });
  const handleOpen = React13.useCallback(() => {
    clearTimeout(closeTimerRef.current);
    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);
  }, [openDelay, setOpen]);
  const handleClose = React13.useCallback(() => {
    clearTimeout(openTimerRef.current);
    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {
      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);
    }
  }, [closeDelay, setOpen]);
  const handleDismiss = React13.useCallback(() => setOpen(false), [setOpen]);
  React13.useEffect(() => {
    return () => {
      clearTimeout(openTimerRef.current);
      clearTimeout(closeTimerRef.current);
    };
  }, []);
  return (0, import_jsx_runtime12.jsx)(
    HoverCardProvider,
    {
      scope: __scopeHoverCard,
      open,
      onOpenChange: setOpen,
      onOpen: handleOpen,
      onClose: handleClose,
      onDismiss: handleDismiss,
      hasSelectionRef,
      isPointerDownOnContentRef,
      children: (0, import_jsx_runtime12.jsx)(Root22, { ...popperScope, children })
    }
  );
};
HoverCard.displayName = HOVERCARD_NAME;
var TRIGGER_NAME6 = "HoverCardTrigger";
var HoverCardTrigger = React13.forwardRef(
  (props, forwardedRef) => {
    const { __scopeHoverCard, ...triggerProps } = props;
    const context = useHoverCardContext(TRIGGER_NAME6, __scopeHoverCard);
    const popperScope = usePopperScope(__scopeHoverCard);
    return (0, import_jsx_runtime12.jsx)(Anchor, { asChild: true, ...popperScope, children: (0, import_jsx_runtime12.jsx)(
      Primitive.a,
      {
        "data-state": context.open ? "open" : "closed",
        ...triggerProps,
        ref: forwardedRef,
        onPointerEnter: composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen)),
        onPointerLeave: composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose)),
        onFocus: composeEventHandlers(props.onFocus, context.onOpen),
        onBlur: composeEventHandlers(props.onBlur, context.onClose),
        onTouchStart: composeEventHandlers(props.onTouchStart, (event) => event.preventDefault())
      }
    ) });
  }
);
HoverCardTrigger.displayName = TRIGGER_NAME6;
var PORTAL_NAME3 = "HoverCardPortal";
var [PortalProvider, usePortalContext] = createHoverCardContext(PORTAL_NAME3, {
  forceMount: void 0
});
var HoverCardPortal = (props) => {
  const { __scopeHoverCard, forceMount, children, container } = props;
  const context = useHoverCardContext(PORTAL_NAME3, __scopeHoverCard);
  return (0, import_jsx_runtime12.jsx)(PortalProvider, { scope: __scopeHoverCard, forceMount, children: (0, import_jsx_runtime12.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime12.jsx)(Portal, { asChild: true, container, children }) }) });
};
HoverCardPortal.displayName = PORTAL_NAME3;
var CONTENT_NAME5 = "HoverCardContent";
var HoverCardContent = React13.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME5, props.__scopeHoverCard);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = useHoverCardContext(CONTENT_NAME5, props.__scopeHoverCard);
    return (0, import_jsx_runtime12.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime12.jsx)(
      HoverCardContentImpl,
      {
        "data-state": context.open ? "open" : "closed",
        ...contentProps,
        onPointerEnter: composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen)),
        onPointerLeave: composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose)),
        ref: forwardedRef
      }
    ) });
  }
);
HoverCardContent.displayName = CONTENT_NAME5;
var HoverCardContentImpl = React13.forwardRef((props, forwardedRef) => {
  const {
    __scopeHoverCard,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    ...contentProps
  } = props;
  const context = useHoverCardContext(CONTENT_NAME5, __scopeHoverCard);
  const popperScope = usePopperScope(__scopeHoverCard);
  const ref = React13.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const [containSelection, setContainSelection] = React13.useState(false);
  React13.useEffect(() => {
    if (containSelection) {
      const body = document.body;
      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;
      body.style.userSelect = "none";
      body.style.webkitUserSelect = "none";
      return () => {
        body.style.userSelect = originalBodyUserSelect;
        body.style.webkitUserSelect = originalBodyUserSelect;
      };
    }
  }, [containSelection]);
  React13.useEffect(() => {
    if (ref.current) {
      const handlePointerUp = () => {
        setContainSelection(false);
        context.isPointerDownOnContentRef.current = false;
        setTimeout(() => {
          const hasSelection = document.getSelection()?.toString() !== "";
          if (hasSelection) context.hasSelectionRef.current = true;
        });
      };
      document.addEventListener("pointerup", handlePointerUp);
      return () => {
        document.removeEventListener("pointerup", handlePointerUp);
        context.hasSelectionRef.current = false;
        context.isPointerDownOnContentRef.current = false;
      };
    }
  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);
  React13.useEffect(() => {
    if (ref.current) {
      const tabbables = getTabbableNodes(ref.current);
      tabbables.forEach((tabbable) => tabbable.setAttribute("tabindex", "-1"));
    }
  });
  return (0, import_jsx_runtime12.jsx)(
    DismissableLayer,
    {
      asChild: true,
      disableOutsidePointerEvents: false,
      onInteractOutside,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside: composeEventHandlers(onFocusOutside, (event) => {
        event.preventDefault();
      }),
      onDismiss: context.onDismiss,
      children: (0, import_jsx_runtime12.jsx)(
        Content2,
        {
          ...popperScope,
          ...contentProps,
          onPointerDown: composeEventHandlers(contentProps.onPointerDown, (event) => {
            if (event.currentTarget.contains(event.target)) {
              setContainSelection(true);
            }
            context.hasSelectionRef.current = false;
            context.isPointerDownOnContentRef.current = true;
          }),
          ref: composedRefs,
          style: {
            ...contentProps.style,
            userSelect: containSelection ? "text" : void 0,
            // Safari requires prefix
            WebkitUserSelect: containSelection ? "text" : void 0,
            // re-namespace exposed content custom properties
            ...{
              "--radix-hover-card-content-transform-origin": "var(--radix-popper-transform-origin)",
              "--radix-hover-card-content-available-width": "var(--radix-popper-available-width)",
              "--radix-hover-card-content-available-height": "var(--radix-popper-available-height)",
              "--radix-hover-card-trigger-width": "var(--radix-popper-anchor-width)",
              "--radix-hover-card-trigger-height": "var(--radix-popper-anchor-height)"
            }
          }
        }
      )
    }
  );
});
var ARROW_NAME2 = "HoverCardArrow";
var HoverCardArrow = React13.forwardRef(
  (props, forwardedRef) => {
    const { __scopeHoverCard, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopeHoverCard);
    return (0, import_jsx_runtime12.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
HoverCardArrow.displayName = ARROW_NAME2;
function excludeTouch(eventHandler) {
  return (event) => event.pointerType === "touch" ? void 0 : eventHandler();
}
function getTabbableNodes(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode()) nodes.push(walker.currentNode);
  return nodes;
}
var Root26 = HoverCard;
var Trigger4 = HoverCardTrigger;
var Portal4 = HoverCardPortal;
var Content25 = HoverCardContent;
var Arrow23 = HoverCardArrow;

// node_modules/@radix-ui/react-menubar/dist/index.mjs
var React14 = __toESM(require_react(), 1);
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var MENUBAR_NAME = "Menubar";
var [Collection2, useCollection2, createCollectionScope2] = createCollection(MENUBAR_NAME);
var [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [
  createCollectionScope2,
  createRovingFocusGroupScope
]);
var useMenuScope2 = createMenuScope();
var useRovingFocusGroupScope = createRovingFocusGroupScope();
var [MenubarContextProvider, useMenubarContext] = createMenubarContext(MENUBAR_NAME);
var Menubar = React14.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeMenubar,
      value: valueProp,
      onValueChange,
      defaultValue,
      loop = true,
      dir,
      ...menubarProps
    } = props;
    const direction = useDirection(dir);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue ?? "",
      caller: MENUBAR_NAME
    });
    const [currentTabStopId, setCurrentTabStopId] = React14.useState(null);
    return (0, import_jsx_runtime13.jsx)(
      MenubarContextProvider,
      {
        scope: __scopeMenubar,
        value,
        onMenuOpen: React14.useCallback(
          (value2) => {
            setValue(value2);
            setCurrentTabStopId(value2);
          },
          [setValue]
        ),
        onMenuClose: React14.useCallback(() => setValue(""), [setValue]),
        onMenuToggle: React14.useCallback(
          (value2) => {
            setValue((prevValue) => prevValue ? "" : value2);
            setCurrentTabStopId(value2);
          },
          [setValue]
        ),
        dir: direction,
        loop,
        children: (0, import_jsx_runtime13.jsx)(Collection2.Provider, { scope: __scopeMenubar, children: (0, import_jsx_runtime13.jsx)(Collection2.Slot, { scope: __scopeMenubar, children: (0, import_jsx_runtime13.jsx)(
          Root4,
          {
            asChild: true,
            ...rovingFocusGroupScope,
            orientation: "horizontal",
            loop,
            dir: direction,
            currentTabStopId,
            onCurrentTabStopIdChange: setCurrentTabStopId,
            children: (0, import_jsx_runtime13.jsx)(Primitive.div, { role: "menubar", ...menubarProps, ref: forwardedRef })
          }
        ) }) })
      }
    );
  }
);
Menubar.displayName = MENUBAR_NAME;
var MENU_NAME = "MenubarMenu";
var [MenubarMenuProvider, useMenubarMenuContext] = createMenubarContext(MENU_NAME);
var MenubarMenu = (props) => {
  const { __scopeMenubar, value: valueProp, ...menuProps } = props;
  const autoValue = useId();
  const value = valueProp || autoValue || "LEGACY_REACT_AUTO_VALUE";
  const context = useMenubarContext(MENU_NAME, __scopeMenubar);
  const menuScope = useMenuScope2(__scopeMenubar);
  const triggerRef = React14.useRef(null);
  const wasKeyboardTriggerOpenRef = React14.useRef(false);
  const open = context.value === value;
  React14.useEffect(() => {
    if (!open) wasKeyboardTriggerOpenRef.current = false;
  }, [open]);
  return (0, import_jsx_runtime13.jsx)(
    MenubarMenuProvider,
    {
      scope: __scopeMenubar,
      value,
      triggerId: useId(),
      triggerRef,
      contentId: useId(),
      wasKeyboardTriggerOpenRef,
      children: (0, import_jsx_runtime13.jsx)(
        Root32,
        {
          ...menuScope,
          open,
          onOpenChange: (open2) => {
            if (!open2) context.onMenuClose();
          },
          modal: false,
          dir: context.dir,
          ...menuProps
        }
      )
    }
  );
};
MenubarMenu.displayName = MENU_NAME;
var TRIGGER_NAME7 = "MenubarTrigger";
var MenubarTrigger = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, disabled = false, ...triggerProps } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);
    const menuScope = useMenuScope2(__scopeMenubar);
    const context = useMenubarContext(TRIGGER_NAME7, __scopeMenubar);
    const menuContext = useMenubarMenuContext(TRIGGER_NAME7, __scopeMenubar);
    const ref = React14.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);
    const [isFocused, setIsFocused] = React14.useState(false);
    const open = context.value === menuContext.value;
    return (0, import_jsx_runtime13.jsx)(Collection2.ItemSlot, { scope: __scopeMenubar, value: menuContext.value, disabled, children: (0, import_jsx_runtime13.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        tabStopId: menuContext.value,
        children: (0, import_jsx_runtime13.jsx)(Anchor2, { asChild: true, ...menuScope, children: (0, import_jsx_runtime13.jsx)(
          Primitive.button,
          {
            type: "button",
            role: "menuitem",
            id: menuContext.triggerId,
            "aria-haspopup": "menu",
            "aria-expanded": open,
            "aria-controls": open ? menuContext.contentId : void 0,
            "data-highlighted": isFocused ? "" : void 0,
            "data-state": open ? "open" : "closed",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            ...triggerProps,
            ref: composedRefs,
            onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
              if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onMenuOpen(menuContext.value);
                if (!open) event.preventDefault();
              }
            }),
            onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {
              const menubarOpen = Boolean(context.value);
              if (menubarOpen && !open) {
                context.onMenuOpen(menuContext.value);
                ref.current?.focus();
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if (disabled) return;
              if (["Enter", " "].includes(event.key)) context.onMenuToggle(menuContext.value);
              if (event.key === "ArrowDown") context.onMenuOpen(menuContext.value);
              if (["Enter", " ", "ArrowDown"].includes(event.key)) {
                menuContext.wasKeyboardTriggerOpenRef.current = true;
                event.preventDefault();
              }
            }),
            onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),
            onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))
          }
        ) })
      }
    ) });
  }
);
MenubarTrigger.displayName = TRIGGER_NAME7;
var PORTAL_NAME4 = "MenubarPortal";
var MenubarPortal = (props) => {
  const { __scopeMenubar, ...portalProps } = props;
  const menuScope = useMenuScope2(__scopeMenubar);
  return (0, import_jsx_runtime13.jsx)(Portal3, { ...menuScope, ...portalProps });
};
MenubarPortal.displayName = PORTAL_NAME4;
var CONTENT_NAME6 = "MenubarContent";
var MenubarContent = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, align = "start", ...contentProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    const context = useMenubarContext(CONTENT_NAME6, __scopeMenubar);
    const menuContext = useMenubarMenuContext(CONTENT_NAME6, __scopeMenubar);
    const getItems = useCollection2(__scopeMenubar);
    const hasInteractedOutsideRef = React14.useRef(false);
    return (0, import_jsx_runtime13.jsx)(
      Content22,
      {
        id: menuContext.contentId,
        "aria-labelledby": menuContext.triggerId,
        "data-radix-menubar-content": "",
        ...menuScope,
        ...contentProps,
        ref: forwardedRef,
        align,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
          const menubarOpen = Boolean(context.value);
          if (!menubarOpen && !hasInteractedOutsideRef.current) {
            menuContext.triggerRef.current?.focus();
          }
          hasInteractedOutsideRef.current = false;
          event.preventDefault();
        }),
        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {
          const target = event.target;
          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));
          if (isMenubarTrigger) event.preventDefault();
        }),
        onInteractOutside: composeEventHandlers(props.onInteractOutside, () => {
          hasInteractedOutsideRef.current = true;
        }),
        onEntryFocus: (event) => {
          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();
        },
        onKeyDown: composeEventHandlers(
          props.onKeyDown,
          (event) => {
            if (["ArrowRight", "ArrowLeft"].includes(event.key)) {
              const target = event.target;
              const targetIsSubTrigger = target.hasAttribute("data-radix-menubar-subtrigger");
              const isKeyDownInsideSubMenu = target.closest("[data-radix-menubar-content]") !== event.currentTarget;
              const prevMenuKey = context.dir === "rtl" ? "ArrowRight" : "ArrowLeft";
              const isPrevKey = prevMenuKey === event.key;
              const isNextKey = !isPrevKey;
              if (isNextKey && targetIsSubTrigger) return;
              if (isKeyDownInsideSubMenu && isPrevKey) return;
              const items = getItems().filter((item) => !item.disabled);
              let candidateValues = items.map((item) => item.value);
              if (isPrevKey) candidateValues.reverse();
              const currentIndex = candidateValues.indexOf(menuContext.value);
              candidateValues = context.loop ? wrapArray(candidateValues, currentIndex + 1) : candidateValues.slice(currentIndex + 1);
              const [nextValue] = candidateValues;
              if (nextValue) context.onMenuOpen(nextValue);
            }
          },
          { checkForDefaultPrevented: false }
        ),
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-menubar-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-menubar-content-available-width": "var(--radix-popper-available-width)",
            "--radix-menubar-content-available-height": "var(--radix-popper-available-height)",
            "--radix-menubar-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-menubar-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
MenubarContent.displayName = CONTENT_NAME6;
var GROUP_NAME2 = "MenubarGroup";
var MenubarGroup = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...groupProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
  }
);
MenubarGroup.displayName = GROUP_NAME2;
var LABEL_NAME3 = "MenubarLabel";
var MenubarLabel = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...labelProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(Label, { ...menuScope, ...labelProps, ref: forwardedRef });
  }
);
MenubarLabel.displayName = LABEL_NAME3;
var ITEM_NAME3 = "MenubarItem";
var MenubarItem = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...itemProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(Item2, { ...menuScope, ...itemProps, ref: forwardedRef });
  }
);
MenubarItem.displayName = ITEM_NAME3;
var CHECKBOX_ITEM_NAME2 = "MenubarCheckboxItem";
var MenubarCheckboxItem = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...checkboxItemProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
  }
);
MenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME2;
var RADIO_GROUP_NAME2 = "MenubarRadioGroup";
var MenubarRadioGroup = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...radioGroupProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
  }
);
MenubarRadioGroup.displayName = RADIO_GROUP_NAME2;
var RADIO_ITEM_NAME2 = "MenubarRadioItem";
var MenubarRadioItem = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...radioItemProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
  }
);
MenubarRadioItem.displayName = RADIO_ITEM_NAME2;
var INDICATOR_NAME3 = "MenubarItemIndicator";
var MenubarItemIndicator = React14.forwardRef((props, forwardedRef) => {
  const { __scopeMenubar, ...itemIndicatorProps } = props;
  const menuScope = useMenuScope2(__scopeMenubar);
  return (0, import_jsx_runtime13.jsx)(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
});
MenubarItemIndicator.displayName = INDICATOR_NAME3;
var SEPARATOR_NAME2 = "MenubarSeparator";
var MenubarSeparator = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...separatorProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });
  }
);
MenubarSeparator.displayName = SEPARATOR_NAME2;
var ARROW_NAME3 = "MenubarArrow";
var MenubarArrow = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...arrowProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(Arrow2, { ...menuScope, ...arrowProps, ref: forwardedRef });
  }
);
MenubarArrow.displayName = ARROW_NAME3;
var SUB_NAME2 = "MenubarSub";
var MenubarSub = (props) => {
  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;
  const menuScope = useMenuScope2(__scopeMenubar);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: SUB_NAME2
  });
  return (0, import_jsx_runtime13.jsx)(Sub, { ...menuScope, open, onOpenChange: setOpen, children });
};
MenubarSub.displayName = SUB_NAME2;
var SUB_TRIGGER_NAME2 = "MenubarSubTrigger";
var MenubarSubTrigger = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...subTriggerProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(
      SubTrigger,
      {
        "data-radix-menubar-subtrigger": "",
        ...menuScope,
        ...subTriggerProps,
        ref: forwardedRef
      }
    );
  }
);
MenubarSubTrigger.displayName = SUB_TRIGGER_NAME2;
var SUB_CONTENT_NAME2 = "MenubarSubContent";
var MenubarSubContent = React14.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenubar, ...subContentProps } = props;
    const menuScope = useMenuScope2(__scopeMenubar);
    return (0, import_jsx_runtime13.jsx)(
      SubContent,
      {
        ...menuScope,
        "data-radix-menubar-content": "",
        ...subContentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-menubar-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-menubar-content-available-width": "var(--radix-popper-available-width)",
            "--radix-menubar-content-available-height": "var(--radix-popper-available-height)",
            "--radix-menubar-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-menubar-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
MenubarSubContent.displayName = SUB_CONTENT_NAME2;
function wrapArray(array, startIndex) {
  return array.map((_, index) => array[(startIndex + index) % array.length]);
}

// node_modules/@radix-ui/react-navigation-menu/dist/index.mjs
var dist_exports19 = {};
__export(dist_exports19, {
  Content: () => Content4,
  Indicator: () => Indicator,
  Item: () => Item3,
  Link: () => Link,
  List: () => List,
  NavigationMenu: () => NavigationMenu,
  NavigationMenuContent: () => NavigationMenuContent,
  NavigationMenuIndicator: () => NavigationMenuIndicator,
  NavigationMenuItem: () => NavigationMenuItem,
  NavigationMenuLink: () => NavigationMenuLink,
  NavigationMenuList: () => NavigationMenuList,
  NavigationMenuSub: () => NavigationMenuSub,
  NavigationMenuTrigger: () => NavigationMenuTrigger,
  NavigationMenuViewport: () => NavigationMenuViewport,
  Root: () => Root27,
  Sub: () => Sub3,
  Trigger: () => Trigger5,
  Viewport: () => Viewport,
  createNavigationMenuScope: () => createNavigationMenuScope
});
var React15 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var NAVIGATION_MENU_NAME = "NavigationMenu";
var [Collection3, useCollection3, createCollectionScope3] = createCollection(NAVIGATION_MENU_NAME);
var [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] = createCollection(NAVIGATION_MENU_NAME);
var [createNavigationMenuContext, createNavigationMenuScope] = createContextScope(
  NAVIGATION_MENU_NAME,
  [createCollectionScope3, createFocusGroupCollectionScope]
);
var [NavigationMenuProviderImpl, useNavigationMenuContext] = createNavigationMenuContext(NAVIGATION_MENU_NAME);
var [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext(NAVIGATION_MENU_NAME);
var NavigationMenu = React15.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeNavigationMenu,
      value: valueProp,
      onValueChange,
      defaultValue,
      delayDuration = 200,
      skipDelayDuration = 300,
      orientation = "horizontal",
      dir,
      ...NavigationMenuProps
    } = props;
    const [navigationMenu, setNavigationMenu] = React15.useState(null);
    const composedRef = useComposedRefs(forwardedRef, (node) => setNavigationMenu(node));
    const direction = useDirection(dir);
    const openTimerRef = React15.useRef(0);
    const closeTimerRef = React15.useRef(0);
    const skipDelayTimerRef = React15.useRef(0);
    const [isOpenDelayed, setIsOpenDelayed] = React15.useState(true);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: (value2) => {
        const isOpen = value2 !== "";
        const hasSkipDelayDuration = skipDelayDuration > 0;
        if (isOpen) {
          window.clearTimeout(skipDelayTimerRef.current);
          if (hasSkipDelayDuration) setIsOpenDelayed(false);
        } else {
          window.clearTimeout(skipDelayTimerRef.current);
          skipDelayTimerRef.current = window.setTimeout(
            () => setIsOpenDelayed(true),
            skipDelayDuration
          );
        }
        onValueChange?.(value2);
      },
      defaultProp: defaultValue ?? "",
      caller: NAVIGATION_MENU_NAME
    });
    const startCloseTimer = React15.useCallback(() => {
      window.clearTimeout(closeTimerRef.current);
      closeTimerRef.current = window.setTimeout(() => setValue(""), 150);
    }, [setValue]);
    const handleOpen = React15.useCallback(
      (itemValue) => {
        window.clearTimeout(closeTimerRef.current);
        setValue(itemValue);
      },
      [setValue]
    );
    const handleDelayedOpen = React15.useCallback(
      (itemValue) => {
        const isOpenItem = value === itemValue;
        if (isOpenItem) {
          window.clearTimeout(closeTimerRef.current);
        } else {
          openTimerRef.current = window.setTimeout(() => {
            window.clearTimeout(closeTimerRef.current);
            setValue(itemValue);
          }, delayDuration);
        }
      },
      [value, setValue, delayDuration]
    );
    React15.useEffect(() => {
      return () => {
        window.clearTimeout(openTimerRef.current);
        window.clearTimeout(closeTimerRef.current);
        window.clearTimeout(skipDelayTimerRef.current);
      };
    }, []);
    return (0, import_jsx_runtime14.jsx)(
      NavigationMenuProvider,
      {
        scope: __scopeNavigationMenu,
        isRootMenu: true,
        value,
        dir: direction,
        orientation,
        rootNavigationMenu: navigationMenu,
        onTriggerEnter: (itemValue) => {
          window.clearTimeout(openTimerRef.current);
          if (isOpenDelayed) handleDelayedOpen(itemValue);
          else handleOpen(itemValue);
        },
        onTriggerLeave: () => {
          window.clearTimeout(openTimerRef.current);
          startCloseTimer();
        },
        onContentEnter: () => window.clearTimeout(closeTimerRef.current),
        onContentLeave: startCloseTimer,
        onItemSelect: (itemValue) => {
          setValue((prevValue) => prevValue === itemValue ? "" : itemValue);
        },
        onItemDismiss: () => setValue(""),
        children: (0, import_jsx_runtime14.jsx)(
          Primitive.nav,
          {
            "aria-label": "Main",
            "data-orientation": orientation,
            dir: direction,
            ...NavigationMenuProps,
            ref: composedRef
          }
        )
      }
    );
  }
);
NavigationMenu.displayName = NAVIGATION_MENU_NAME;
var SUB_NAME3 = "NavigationMenuSub";
var NavigationMenuSub = React15.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeNavigationMenu,
      value: valueProp,
      onValueChange,
      defaultValue,
      orientation = "horizontal",
      ...subProps
    } = props;
    const context = useNavigationMenuContext(SUB_NAME3, __scopeNavigationMenu);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue ?? "",
      caller: SUB_NAME3
    });
    return (0, import_jsx_runtime14.jsx)(
      NavigationMenuProvider,
      {
        scope: __scopeNavigationMenu,
        isRootMenu: false,
        value,
        dir: context.dir,
        orientation,
        rootNavigationMenu: context.rootNavigationMenu,
        onTriggerEnter: (itemValue) => setValue(itemValue),
        onItemSelect: (itemValue) => setValue(itemValue),
        onItemDismiss: () => setValue(""),
        children: (0, import_jsx_runtime14.jsx)(Primitive.div, { "data-orientation": orientation, ...subProps, ref: forwardedRef })
      }
    );
  }
);
NavigationMenuSub.displayName = SUB_NAME3;
var NavigationMenuProvider = (props) => {
  const {
    scope,
    isRootMenu,
    rootNavigationMenu,
    dir,
    orientation,
    children,
    value,
    onItemSelect,
    onItemDismiss,
    onTriggerEnter,
    onTriggerLeave,
    onContentEnter,
    onContentLeave
  } = props;
  const [viewport, setViewport] = React15.useState(null);
  const [viewportContent, setViewportContent] = React15.useState(/* @__PURE__ */ new Map());
  const [indicatorTrack, setIndicatorTrack] = React15.useState(null);
  return (0, import_jsx_runtime14.jsx)(
    NavigationMenuProviderImpl,
    {
      scope,
      isRootMenu,
      rootNavigationMenu,
      value,
      previousValue: usePrevious(value),
      baseId: useId(),
      dir,
      orientation,
      viewport,
      onViewportChange: setViewport,
      indicatorTrack,
      onIndicatorTrackChange: setIndicatorTrack,
      onTriggerEnter: useCallbackRef(onTriggerEnter),
      onTriggerLeave: useCallbackRef(onTriggerLeave),
      onContentEnter: useCallbackRef(onContentEnter),
      onContentLeave: useCallbackRef(onContentLeave),
      onItemSelect: useCallbackRef(onItemSelect),
      onItemDismiss: useCallbackRef(onItemDismiss),
      onViewportContentChange: React15.useCallback((contentValue, contentData) => {
        setViewportContent((prevContent) => {
          prevContent.set(contentValue, contentData);
          return new Map(prevContent);
        });
      }, []),
      onViewportContentRemove: React15.useCallback((contentValue) => {
        setViewportContent((prevContent) => {
          if (!prevContent.has(contentValue)) return prevContent;
          prevContent.delete(contentValue);
          return new Map(prevContent);
        });
      }, []),
      children: (0, import_jsx_runtime14.jsx)(Collection3.Provider, { scope, children: (0, import_jsx_runtime14.jsx)(ViewportContentProvider, { scope, items: viewportContent, children }) })
    }
  );
};
var LIST_NAME = "NavigationMenuList";
var NavigationMenuList = React15.forwardRef(
  (props, forwardedRef) => {
    const { __scopeNavigationMenu, ...listProps } = props;
    const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);
    const list = (0, import_jsx_runtime14.jsx)(Primitive.ul, { "data-orientation": context.orientation, ...listProps, ref: forwardedRef });
    return (0, import_jsx_runtime14.jsx)(Primitive.div, { style: { position: "relative" }, ref: context.onIndicatorTrackChange, children: (0, import_jsx_runtime14.jsx)(Collection3.Slot, { scope: __scopeNavigationMenu, children: context.isRootMenu ? (0, import_jsx_runtime14.jsx)(FocusGroup, { asChild: true, children: list }) : list }) });
  }
);
NavigationMenuList.displayName = LIST_NAME;
var ITEM_NAME4 = "NavigationMenuItem";
var [NavigationMenuItemContextProvider, useNavigationMenuItemContext] = createNavigationMenuContext(ITEM_NAME4);
var NavigationMenuItem = React15.forwardRef(
  (props, forwardedRef) => {
    const { __scopeNavigationMenu, value: valueProp, ...itemProps } = props;
    const autoValue = useId();
    const value = valueProp || autoValue || "LEGACY_REACT_AUTO_VALUE";
    const contentRef = React15.useRef(null);
    const triggerRef = React15.useRef(null);
    const focusProxyRef = React15.useRef(null);
    const restoreContentTabOrderRef = React15.useRef(() => {
    });
    const wasEscapeCloseRef = React15.useRef(false);
    const handleContentEntry = React15.useCallback((side = "start") => {
      if (contentRef.current) {
        restoreContentTabOrderRef.current();
        const candidates = getTabbableCandidates(contentRef.current);
        if (candidates.length) focusFirst(side === "start" ? candidates : candidates.reverse());
      }
    }, []);
    const handleContentExit = React15.useCallback(() => {
      if (contentRef.current) {
        const candidates = getTabbableCandidates(contentRef.current);
        if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);
      }
    }, []);
    return (0, import_jsx_runtime14.jsx)(
      NavigationMenuItemContextProvider,
      {
        scope: __scopeNavigationMenu,
        value,
        triggerRef,
        contentRef,
        focusProxyRef,
        wasEscapeCloseRef,
        onEntryKeyDown: handleContentEntry,
        onFocusProxyEnter: handleContentEntry,
        onRootContentClose: handleContentExit,
        onContentFocusOutside: handleContentExit,
        children: (0, import_jsx_runtime14.jsx)(Primitive.li, { ...itemProps, ref: forwardedRef })
      }
    );
  }
);
NavigationMenuItem.displayName = ITEM_NAME4;
var TRIGGER_NAME8 = "NavigationMenuTrigger";
var NavigationMenuTrigger = React15.forwardRef((props, forwardedRef) => {
  const { __scopeNavigationMenu, disabled, ...triggerProps } = props;
  const context = useNavigationMenuContext(TRIGGER_NAME8, props.__scopeNavigationMenu);
  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME8, props.__scopeNavigationMenu);
  const ref = React15.useRef(null);
  const composedRefs = useComposedRefs(ref, itemContext.triggerRef, forwardedRef);
  const triggerId = makeTriggerId(context.baseId, itemContext.value);
  const contentId = makeContentId(context.baseId, itemContext.value);
  const hasPointerMoveOpenedRef = React15.useRef(false);
  const wasClickCloseRef = React15.useRef(false);
  const open = itemContext.value === context.value;
  return (0, import_jsx_runtime14.jsxs)(import_jsx_runtime14.Fragment, { children: [
    (0, import_jsx_runtime14.jsx)(Collection3.ItemSlot, { scope: __scopeNavigationMenu, value: itemContext.value, children: (0, import_jsx_runtime14.jsx)(FocusGroupItem, { asChild: true, children: (0, import_jsx_runtime14.jsx)(
      Primitive.button,
      {
        id: triggerId,
        disabled,
        "data-disabled": disabled ? "" : void 0,
        "data-state": getOpenState(open),
        "aria-expanded": open,
        "aria-controls": contentId,
        ...triggerProps,
        ref: composedRefs,
        onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {
          wasClickCloseRef.current = false;
          itemContext.wasEscapeCloseRef.current = false;
        }),
        onPointerMove: composeEventHandlers(
          props.onPointerMove,
          whenMouse(() => {
            if (disabled || wasClickCloseRef.current || itemContext.wasEscapeCloseRef.current || hasPointerMoveOpenedRef.current)
              return;
            context.onTriggerEnter(itemContext.value);
            hasPointerMoveOpenedRef.current = true;
          })
        ),
        onPointerLeave: composeEventHandlers(
          props.onPointerLeave,
          whenMouse(() => {
            if (disabled) return;
            context.onTriggerLeave();
            hasPointerMoveOpenedRef.current = false;
          })
        ),
        onClick: composeEventHandlers(props.onClick, () => {
          context.onItemSelect(itemContext.value);
          wasClickCloseRef.current = open;
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          const verticalEntryKey = context.dir === "rtl" ? "ArrowLeft" : "ArrowRight";
          const entryKey = { horizontal: "ArrowDown", vertical: verticalEntryKey }[context.orientation];
          if (open && event.key === entryKey) {
            itemContext.onEntryKeyDown();
            event.preventDefault();
          }
        })
      }
    ) }) }),
    open && (0, import_jsx_runtime14.jsxs)(import_jsx_runtime14.Fragment, { children: [
      (0, import_jsx_runtime14.jsx)(
        Root5,
        {
          "aria-hidden": true,
          tabIndex: 0,
          ref: itemContext.focusProxyRef,
          onFocus: (event) => {
            const content = itemContext.contentRef.current;
            const prevFocusedElement = event.relatedTarget;
            const wasTriggerFocused = prevFocusedElement === ref.current;
            const wasFocusFromContent = content?.contains(prevFocusedElement);
            if (wasTriggerFocused || !wasFocusFromContent) {
              itemContext.onFocusProxyEnter(wasTriggerFocused ? "start" : "end");
            }
          }
        }
      ),
      context.viewport && (0, import_jsx_runtime14.jsx)("span", { "aria-owns": contentId })
    ] })
  ] });
});
NavigationMenuTrigger.displayName = TRIGGER_NAME8;
var LINK_NAME = "NavigationMenuLink";
var LINK_SELECT = "navigationMenu.linkSelect";
var NavigationMenuLink = React15.forwardRef(
  (props, forwardedRef) => {
    const { __scopeNavigationMenu, active, onSelect, ...linkProps } = props;
    return (0, import_jsx_runtime14.jsx)(FocusGroupItem, { asChild: true, children: (0, import_jsx_runtime14.jsx)(
      Primitive.a,
      {
        "data-active": active ? "" : void 0,
        "aria-current": active ? "page" : void 0,
        ...linkProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(
          props.onClick,
          (event) => {
            const target = event.target;
            const linkSelectEvent = new CustomEvent(LINK_SELECT, {
              bubbles: true,
              cancelable: true
            });
            target.addEventListener(LINK_SELECT, (event2) => onSelect?.(event2), { once: true });
            dispatchDiscreteCustomEvent(target, linkSelectEvent);
            if (!linkSelectEvent.defaultPrevented && !event.metaKey) {
              const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {
                bubbles: true,
                cancelable: true
              });
              dispatchDiscreteCustomEvent(target, rootContentDismissEvent);
            }
          },
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
NavigationMenuLink.displayName = LINK_NAME;
var INDICATOR_NAME4 = "NavigationMenuIndicator";
var NavigationMenuIndicator = React15.forwardRef((props, forwardedRef) => {
  const { forceMount, ...indicatorProps } = props;
  const context = useNavigationMenuContext(INDICATOR_NAME4, props.__scopeNavigationMenu);
  const isVisible = Boolean(context.value);
  return context.indicatorTrack ? import_react_dom.default.createPortal(
    (0, import_jsx_runtime14.jsx)(Presence, { present: forceMount || isVisible, children: (0, import_jsx_runtime14.jsx)(NavigationMenuIndicatorImpl, { ...indicatorProps, ref: forwardedRef }) }),
    context.indicatorTrack
  ) : null;
});
NavigationMenuIndicator.displayName = INDICATOR_NAME4;
var NavigationMenuIndicatorImpl = React15.forwardRef((props, forwardedRef) => {
  const { __scopeNavigationMenu, ...indicatorProps } = props;
  const context = useNavigationMenuContext(INDICATOR_NAME4, __scopeNavigationMenu);
  const getItems = useCollection3(__scopeNavigationMenu);
  const [activeTrigger, setActiveTrigger] = React15.useState(
    null
  );
  const [position, setPosition] = React15.useState(null);
  const isHorizontal = context.orientation === "horizontal";
  const isVisible = Boolean(context.value);
  React15.useEffect(() => {
    const items = getItems();
    const triggerNode = items.find((item) => item.value === context.value)?.ref.current;
    if (triggerNode) setActiveTrigger(triggerNode);
  }, [getItems, context.value]);
  const handlePositionChange = () => {
    if (activeTrigger) {
      setPosition({
        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,
        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop
      });
    }
  };
  useResizeObserver(activeTrigger, handlePositionChange);
  useResizeObserver(context.indicatorTrack, handlePositionChange);
  return position ? (0, import_jsx_runtime14.jsx)(
    Primitive.div,
    {
      "aria-hidden": true,
      "data-state": isVisible ? "visible" : "hidden",
      "data-orientation": context.orientation,
      ...indicatorProps,
      ref: forwardedRef,
      style: {
        position: "absolute",
        ...isHorizontal ? {
          left: 0,
          width: position.size + "px",
          transform: `translateX(${position.offset}px)`
        } : {
          top: 0,
          height: position.size + "px",
          transform: `translateY(${position.offset}px)`
        },
        ...indicatorProps.style
      }
    }
  ) : null;
});
var CONTENT_NAME7 = "NavigationMenuContent";
var NavigationMenuContent = React15.forwardRef((props, forwardedRef) => {
  const { forceMount, ...contentProps } = props;
  const context = useNavigationMenuContext(CONTENT_NAME7, props.__scopeNavigationMenu);
  const itemContext = useNavigationMenuItemContext(CONTENT_NAME7, props.__scopeNavigationMenu);
  const composedRefs = useComposedRefs(itemContext.contentRef, forwardedRef);
  const open = itemContext.value === context.value;
  const commonProps = {
    value: itemContext.value,
    triggerRef: itemContext.triggerRef,
    focusProxyRef: itemContext.focusProxyRef,
    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,
    onContentFocusOutside: itemContext.onContentFocusOutside,
    onRootContentClose: itemContext.onRootContentClose,
    ...contentProps
  };
  return !context.viewport ? (0, import_jsx_runtime14.jsx)(Presence, { present: forceMount || open, children: (0, import_jsx_runtime14.jsx)(
    NavigationMenuContentImpl,
    {
      "data-state": getOpenState(open),
      ...commonProps,
      ref: composedRefs,
      onPointerEnter: composeEventHandlers(props.onPointerEnter, context.onContentEnter),
      onPointerLeave: composeEventHandlers(
        props.onPointerLeave,
        whenMouse(context.onContentLeave)
      ),
      style: {
        // Prevent interaction when animating out
        pointerEvents: !open && context.isRootMenu ? "none" : void 0,
        ...commonProps.style
      }
    }
  ) }) : (0, import_jsx_runtime14.jsx)(ViewportContentMounter, { forceMount, ...commonProps, ref: composedRefs });
});
NavigationMenuContent.displayName = CONTENT_NAME7;
var ViewportContentMounter = React15.forwardRef((props, forwardedRef) => {
  const context = useNavigationMenuContext(CONTENT_NAME7, props.__scopeNavigationMenu);
  const { onViewportContentChange, onViewportContentRemove } = context;
  useLayoutEffect2(() => {
    onViewportContentChange(props.value, {
      ref: forwardedRef,
      ...props
    });
  }, [props, forwardedRef, onViewportContentChange]);
  useLayoutEffect2(() => {
    return () => onViewportContentRemove(props.value);
  }, [props.value, onViewportContentRemove]);
  return null;
});
var ROOT_CONTENT_DISMISS = "navigationMenu.rootContentDismiss";
var NavigationMenuContentImpl = React15.forwardRef((props, forwardedRef) => {
  const {
    __scopeNavigationMenu,
    value,
    triggerRef,
    focusProxyRef,
    wasEscapeCloseRef,
    onRootContentClose,
    onContentFocusOutside,
    ...contentProps
  } = props;
  const context = useNavigationMenuContext(CONTENT_NAME7, __scopeNavigationMenu);
  const ref = React15.useRef(null);
  const composedRefs = useComposedRefs(ref, forwardedRef);
  const triggerId = makeTriggerId(context.baseId, value);
  const contentId = makeContentId(context.baseId, value);
  const getItems = useCollection3(__scopeNavigationMenu);
  const prevMotionAttributeRef = React15.useRef(null);
  const { onItemDismiss } = context;
  React15.useEffect(() => {
    const content = ref.current;
    if (context.isRootMenu && content) {
      const handleClose = () => {
        onItemDismiss();
        onRootContentClose();
        if (content.contains(document.activeElement)) triggerRef.current?.focus();
      };
      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);
      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);
    }
  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);
  const motionAttribute = React15.useMemo(() => {
    const items = getItems();
    const values = items.map((item) => item.value);
    if (context.dir === "rtl") values.reverse();
    const index = values.indexOf(context.value);
    const prevIndex = values.indexOf(context.previousValue);
    const isSelected = value === context.value;
    const wasSelected = prevIndex === values.indexOf(value);
    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;
    const attribute = (() => {
      if (index !== prevIndex) {
        if (isSelected && prevIndex !== -1) return index > prevIndex ? "from-end" : "from-start";
        if (wasSelected && index !== -1) return index > prevIndex ? "to-start" : "to-end";
      }
      return null;
    })();
    prevMotionAttributeRef.current = attribute;
    return attribute;
  }, [context.previousValue, context.value, context.dir, getItems, value]);
  return (0, import_jsx_runtime14.jsx)(FocusGroup, { asChild: true, children: (0, import_jsx_runtime14.jsx)(
    DismissableLayer,
    {
      id: contentId,
      "aria-labelledby": triggerId,
      "data-motion": motionAttribute,
      "data-orientation": context.orientation,
      ...contentProps,
      ref: composedRefs,
      disableOutsidePointerEvents: false,
      onDismiss: () => {
        const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {
          bubbles: true,
          cancelable: true
        });
        ref.current?.dispatchEvent(rootContentDismissEvent);
      },
      onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {
        onContentFocusOutside();
        const target = event.target;
        if (context.rootNavigationMenu?.contains(target)) event.preventDefault();
      }),
      onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
        const target = event.target;
        const isTrigger = getItems().some((item) => item.ref.current?.contains(target));
        const isRootViewport = context.isRootMenu && context.viewport?.contains(target);
        if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();
      }),
      onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
        const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
        const isTabKey = event.key === "Tab" && !isMetaKey;
        if (isTabKey) {
          const candidates = getTabbableCandidates(event.currentTarget);
          const focusedElement = document.activeElement;
          const index = candidates.findIndex((candidate) => candidate === focusedElement);
          const isMovingBackwards = event.shiftKey;
          const nextCandidates = isMovingBackwards ? candidates.slice(0, index).reverse() : candidates.slice(index + 1, candidates.length);
          if (focusFirst(nextCandidates)) {
            event.preventDefault();
          } else {
            focusProxyRef.current?.focus();
          }
        }
      }),
      onEscapeKeyDown: composeEventHandlers(props.onEscapeKeyDown, (_event) => {
        wasEscapeCloseRef.current = true;
      })
    }
  ) });
});
var VIEWPORT_NAME = "NavigationMenuViewport";
var NavigationMenuViewport = React15.forwardRef((props, forwardedRef) => {
  const { forceMount, ...viewportProps } = props;
  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);
  const open = Boolean(context.value);
  return (0, import_jsx_runtime14.jsx)(Presence, { present: forceMount || open, children: (0, import_jsx_runtime14.jsx)(NavigationMenuViewportImpl, { ...viewportProps, ref: forwardedRef }) });
});
NavigationMenuViewport.displayName = VIEWPORT_NAME;
var NavigationMenuViewportImpl = React15.forwardRef((props, forwardedRef) => {
  const { __scopeNavigationMenu, children, ...viewportImplProps } = props;
  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);
  const composedRefs = useComposedRefs(forwardedRef, context.onViewportChange);
  const viewportContentContext = useViewportContentContext(
    CONTENT_NAME7,
    props.__scopeNavigationMenu
  );
  const [size, setSize] = React15.useState(null);
  const [content, setContent] = React15.useState(null);
  const viewportWidth = size ? size?.width + "px" : void 0;
  const viewportHeight = size ? size?.height + "px" : void 0;
  const open = Boolean(context.value);
  const activeContentValue = open ? context.value : context.previousValue;
  const handleSizeChange = () => {
    if (content) setSize({ width: content.offsetWidth, height: content.offsetHeight });
  };
  useResizeObserver(content, handleSizeChange);
  return (0, import_jsx_runtime14.jsx)(
    Primitive.div,
    {
      "data-state": getOpenState(open),
      "data-orientation": context.orientation,
      ...viewportImplProps,
      ref: composedRefs,
      style: {
        // Prevent interaction when animating out
        pointerEvents: !open && context.isRootMenu ? "none" : void 0,
        ["--radix-navigation-menu-viewport-width"]: viewportWidth,
        ["--radix-navigation-menu-viewport-height"]: viewportHeight,
        ...viewportImplProps.style
      },
      onPointerEnter: composeEventHandlers(props.onPointerEnter, context.onContentEnter),
      onPointerLeave: composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave)),
      children: Array.from(viewportContentContext.items).map(([value, { ref, forceMount, ...props2 }]) => {
        const isActive = activeContentValue === value;
        return (0, import_jsx_runtime14.jsx)(Presence, { present: forceMount || isActive, children: (0, import_jsx_runtime14.jsx)(
          NavigationMenuContentImpl,
          {
            ...props2,
            ref: composeRefs(ref, (node) => {
              if (isActive && node) setContent(node);
            })
          }
        ) }, value);
      })
    }
  );
});
var FOCUS_GROUP_NAME = "FocusGroup";
var FocusGroup = React15.forwardRef(
  (props, forwardedRef) => {
    const { __scopeNavigationMenu, ...groupProps } = props;
    const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);
    return (0, import_jsx_runtime14.jsx)(FocusGroupCollection.Provider, { scope: __scopeNavigationMenu, children: (0, import_jsx_runtime14.jsx)(FocusGroupCollection.Slot, { scope: __scopeNavigationMenu, children: (0, import_jsx_runtime14.jsx)(Primitive.div, { dir: context.dir, ...groupProps, ref: forwardedRef }) }) });
  }
);
var ARROW_KEYS = ["ArrowRight", "ArrowLeft", "ArrowUp", "ArrowDown"];
var FOCUS_GROUP_ITEM_NAME = "FocusGroupItem";
var FocusGroupItem = React15.forwardRef(
  (props, forwardedRef) => {
    const { __scopeNavigationMenu, ...groupProps } = props;
    const getItems = useFocusGroupCollection(__scopeNavigationMenu);
    const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);
    return (0, import_jsx_runtime14.jsx)(FocusGroupCollection.ItemSlot, { scope: __scopeNavigationMenu, children: (0, import_jsx_runtime14.jsx)(
      Primitive.button,
      {
        ...groupProps,
        ref: forwardedRef,
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          const isFocusNavigationKey = ["Home", "End", ...ARROW_KEYS].includes(event.key);
          if (isFocusNavigationKey) {
            let candidateNodes = getItems().map((item) => item.ref.current);
            const prevItemKey = context.dir === "rtl" ? "ArrowRight" : "ArrowLeft";
            const prevKeys = [prevItemKey, "ArrowUp", "End"];
            if (prevKeys.includes(event.key)) candidateNodes.reverse();
            if (ARROW_KEYS.includes(event.key)) {
              const currentIndex = candidateNodes.indexOf(event.currentTarget);
              candidateNodes = candidateNodes.slice(currentIndex + 1);
            }
            setTimeout(() => focusFirst(candidateNodes));
            event.preventDefault();
          }
        })
      }
    ) });
  }
);
function getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode()) nodes.push(walker.currentNode);
  return nodes;
}
function focusFirst(candidates) {
  const previouslyFocusedElement = document.activeElement;
  return candidates.some((candidate) => {
    if (candidate === previouslyFocusedElement) return true;
    candidate.focus();
    return document.activeElement !== previouslyFocusedElement;
  });
}
function removeFromTabOrder(candidates) {
  candidates.forEach((candidate) => {
    candidate.dataset.tabindex = candidate.getAttribute("tabindex") || "";
    candidate.setAttribute("tabindex", "-1");
  });
  return () => {
    candidates.forEach((candidate) => {
      const prevTabIndex = candidate.dataset.tabindex;
      candidate.setAttribute("tabindex", prevTabIndex);
    });
  };
}
function useResizeObserver(element, onResize) {
  const handleResize = useCallbackRef(onResize);
  useLayoutEffect2(() => {
    let rAF = 0;
    if (element) {
      const resizeObserver = new ResizeObserver(() => {
        cancelAnimationFrame(rAF);
        rAF = window.requestAnimationFrame(handleResize);
      });
      resizeObserver.observe(element);
      return () => {
        window.cancelAnimationFrame(rAF);
        resizeObserver.unobserve(element);
      };
    }
  }, [element, handleResize]);
}
function getOpenState(open) {
  return open ? "open" : "closed";
}
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
function whenMouse(handler) {
  return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
}
var Root27 = NavigationMenu;
var Sub3 = NavigationMenuSub;
var List = NavigationMenuList;
var Item3 = NavigationMenuItem;
var Trigger5 = NavigationMenuTrigger;
var Link = NavigationMenuLink;
var Indicator = NavigationMenuIndicator;
var Content4 = NavigationMenuContent;
var Viewport = NavigationMenuViewport;

// node_modules/@radix-ui/react-one-time-password-field/dist/index.mjs
var React16 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);

// node_modules/@radix-ui/number/dist/index.mjs
function clamp(value, [min, max]) {
  return Math.min(max, Math.max(min, value));
}

// node_modules/@radix-ui/react-one-time-password-field/dist/index.mjs
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var INPUT_VALIDATION_MAP = {
  numeric: {
    type: "numeric",
    regexp: /[^\d]/g,
    pattern: "\\d{1}",
    inputMode: "numeric"
  },
  alpha: {
    type: "alpha",
    regexp: /[^a-zA-Z]/g,
    pattern: "[a-zA-Z]{1}",
    inputMode: "text"
  },
  alphanumeric: {
    type: "alphanumeric",
    regexp: /[^a-zA-Z0-9]/g,
    pattern: "[a-zA-Z0-9]{1}",
    inputMode: "text"
  },
  none: null
};
var ONE_TIME_PASSWORD_FIELD_NAME = "OneTimePasswordField";
var [Collection4, { useCollection: useCollection4, createCollectionScope: createCollectionScope4, useInitCollection }] = createCollection2(ONE_TIME_PASSWORD_FIELD_NAME);
var [createOneTimePasswordFieldContext] = createContextScope(ONE_TIME_PASSWORD_FIELD_NAME, [
  createCollectionScope4,
  createRovingFocusGroupScope
]);
var useRovingFocusGroupScope2 = createRovingFocusGroupScope();
var [OneTimePasswordFieldContext, useOneTimePasswordFieldContext] = createOneTimePasswordFieldContext(ONE_TIME_PASSWORD_FIELD_NAME);
var OneTimePasswordField = React16.forwardRef(
  function OneTimePasswordFieldImpl({
    __scopeOneTimePasswordField,
    defaultValue,
    value: valueProp,
    onValueChange,
    autoSubmit = false,
    children,
    onPaste,
    onAutoSubmit,
    disabled = false,
    readOnly = false,
    autoComplete = "one-time-code",
    autoFocus = false,
    form,
    name,
    placeholder,
    type = "text",
    // TODO: Change default to vertical when inputs use vertical writing mode
    orientation = "horizontal",
    dir,
    validationType = "numeric",
    sanitizeValue: sanitizeValueProp,
    ...domProps
  }, forwardedRef) {
    const rovingFocusGroupScope = useRovingFocusGroupScope2(__scopeOneTimePasswordField);
    const direction = useDirection(dir);
    const collectionState = useInitCollection();
    const [collection] = collectionState;
    const validation = INPUT_VALIDATION_MAP[validationType] ? INPUT_VALIDATION_MAP[validationType] : null;
    const sanitizeValue = React16.useCallback(
      (value2) => {
        if (Array.isArray(value2)) {
          value2 = value2.map(removeWhitespace).join("");
        } else {
          value2 = removeWhitespace(value2);
        }
        if (validation) {
          const regexp = new RegExp(validation.regexp);
          value2 = value2.replace(regexp, "");
        } else if (sanitizeValueProp) {
          value2 = sanitizeValueProp(value2);
        }
        return value2.split("");
      },
      [validation, sanitizeValueProp]
    );
    const controlledValue = React16.useMemo(() => {
      return valueProp != null ? sanitizeValue(valueProp) : void 0;
    }, [valueProp, sanitizeValue]);
    const [value, setValue] = useControllableState({
      caller: "OneTimePasswordField",
      prop: controlledValue,
      defaultProp: defaultValue != null ? sanitizeValue(defaultValue) : [],
      onChange: React16.useCallback(
        (value2) => onValueChange?.(value2.join("")),
        [onValueChange]
      )
    });
    const dispatch = useEffectEvent((action) => {
      switch (action.type) {
        case "SET_CHAR": {
          const { index, char } = action;
          const currentTarget = collection.at(index)?.element;
          if (value[index] === char) {
            const next = currentTarget && collection.from(currentTarget, 1)?.element;
            focusInput(next);
            return;
          }
          if (char === "") {
            return;
          }
          if (validation) {
            const regexp = new RegExp(validation.regexp);
            const clean = char.replace(regexp, "");
            if (clean !== char) {
              return;
            }
          }
          if (value.length >= collection.size) {
            const newValue2 = [...value];
            newValue2[index] = char;
            (0, import_react_dom2.flushSync)(() => setValue(newValue2));
            const next = currentTarget && collection.from(currentTarget, 1)?.element;
            focusInput(next);
            return;
          }
          const newValue = [...value];
          newValue[index] = char;
          const lastElement = collection.at(-1)?.element;
          (0, import_react_dom2.flushSync)(() => setValue(newValue));
          if (currentTarget !== lastElement) {
            const next = currentTarget && collection.from(currentTarget, 1)?.element;
            focusInput(next);
          } else {
            currentTarget?.select();
          }
          return;
        }
        case "CLEAR_CHAR": {
          const { index, reason } = action;
          if (!value[index]) {
            return;
          }
          const newValue = value.filter((_, i24) => i24 !== index);
          const currentTarget = collection.at(index)?.element;
          const previous = currentTarget && collection.from(currentTarget, -1)?.element;
          (0, import_react_dom2.flushSync)(() => setValue(newValue));
          if (reason === "Backspace") {
            focusInput(previous);
          } else if (reason === "Delete" || reason === "Cut") {
            focusInput(currentTarget);
          }
          return;
        }
        case "CLEAR": {
          if (value.length === 0) {
            return;
          }
          if (action.reason === "Backspace" || action.reason === "Delete") {
            (0, import_react_dom2.flushSync)(() => setValue([]));
            focusInput(collection.at(0)?.element);
          } else {
            setValue([]);
          }
          return;
        }
        case "PASTE": {
          const { value: pastedValue } = action;
          const value2 = sanitizeValue(pastedValue);
          if (!value2) {
            return;
          }
          (0, import_react_dom2.flushSync)(() => setValue(value2));
          focusInput(collection.at(value2.length - 1)?.element);
          return;
        }
      }
    });
    const validationTypeRef = React16.useRef(validation);
    React16.useEffect(() => {
      if (!validation) {
        return;
      }
      if (validationTypeRef.current?.type !== validation.type) {
        validationTypeRef.current = validation;
        setValue(sanitizeValue(value.join("")));
      }
    }, [sanitizeValue, setValue, validation, value]);
    const hiddenInputRef = React16.useRef(null);
    const userActionRef = React16.useRef(null);
    const rootRef = React16.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, rootRef);
    const firstInput = collection.at(0)?.element;
    const locateForm = React16.useCallback(() => {
      let formElement;
      if (form) {
        const associatedElement = (rootRef.current?.ownerDocument ?? document).getElementById(form);
        if (isFormElement(associatedElement)) {
          formElement = associatedElement;
        }
      } else if (hiddenInputRef.current) {
        formElement = hiddenInputRef.current.form;
      } else if (firstInput) {
        formElement = firstInput.form;
      }
      return formElement ?? null;
    }, [form, firstInput]);
    const attemptSubmit = React16.useCallback(() => {
      const formElement = locateForm();
      formElement?.requestSubmit();
    }, [locateForm]);
    React16.useEffect(() => {
      const form2 = locateForm();
      if (form2) {
        const reset = () => dispatch({ type: "CLEAR", reason: "Reset" });
        form2.addEventListener("reset", reset);
        return () => form2.removeEventListener("reset", reset);
      }
    }, [dispatch, locateForm]);
    const currentValue = value.join("");
    const valueRef = React16.useRef(currentValue);
    const length = collection.size;
    React16.useEffect(() => {
      const previousValue = valueRef.current;
      valueRef.current = currentValue;
      if (previousValue === currentValue) {
        return;
      }
      if (autoSubmit && value.every((char) => char !== "") && value.length === length) {
        onAutoSubmit?.(value.join(""));
        attemptSubmit();
      }
    }, [attemptSubmit, autoSubmit, currentValue, length, onAutoSubmit, value]);
    const isHydrated = useIsHydrated();
    return (0, import_jsx_runtime15.jsx)(
      OneTimePasswordFieldContext,
      {
        scope: __scopeOneTimePasswordField,
        value,
        attemptSubmit,
        disabled,
        readOnly,
        autoComplete,
        autoFocus,
        form,
        name,
        placeholder,
        type,
        hiddenInputRef,
        userActionRef,
        dispatch,
        validationType,
        orientation,
        isHydrated,
        sanitizeValue,
        children: (0, import_jsx_runtime15.jsx)(Collection4.Provider, { scope: __scopeOneTimePasswordField, state: collectionState, children: (0, import_jsx_runtime15.jsx)(Collection4.Slot, { scope: __scopeOneTimePasswordField, children: (0, import_jsx_runtime15.jsx)(
          Root4,
          {
            asChild: true,
            ...rovingFocusGroupScope,
            orientation,
            dir: direction,
            children: (0, import_jsx_runtime15.jsx)(
              Root.div,
              {
                ...domProps,
                role: "group",
                ref: composedRefs,
                onPaste: composeEventHandlers(
                  onPaste,
                  (event) => {
                    event.preventDefault();
                    const pastedValue = event.clipboardData.getData("Text");
                    dispatch({ type: "PASTE", value: pastedValue });
                  }
                ),
                children
              }
            )
          }
        ) }) })
      }
    );
  }
);
var OneTimePasswordFieldHiddenInput = React16.forwardRef(function OneTimePasswordFieldHiddenInput2({ __scopeOneTimePasswordField, ...props }, forwardedRef) {
  const { value, hiddenInputRef, name } = useOneTimePasswordFieldContext(
    "OneTimePasswordFieldHiddenInput",
    __scopeOneTimePasswordField
  );
  const ref = useComposedRefs(hiddenInputRef, forwardedRef);
  return (0, import_jsx_runtime15.jsx)(
    "input",
    {
      ref,
      name,
      value: value.join("").trim(),
      autoComplete: "off",
      autoFocus: false,
      autoCapitalize: "off",
      autoCorrect: "off",
      autoSave: "off",
      spellCheck: false,
      ...props,
      type: "hidden",
      readOnly: true
    }
  );
});
var OneTimePasswordFieldInput = React16.forwardRef(function OneTimePasswordFieldInput2({
  __scopeOneTimePasswordField,
  onInvalidChange,
  index: indexProp,
  ...props
}, forwardedRef) {
  const {
    value: _value,
    defaultValue: _defaultValue,
    disabled: _disabled,
    readOnly: _readOnly,
    autoComplete: _autoComplete,
    autoFocus: _autoFocus,
    form: _form,
    name: _name,
    placeholder: _placeholder,
    type: _type,
    ...domProps
  } = props;
  const context = useOneTimePasswordFieldContext(
    "OneTimePasswordFieldInput",
    __scopeOneTimePasswordField
  );
  const { dispatch, userActionRef, validationType, isHydrated, disabled } = context;
  const collection = useCollection4(__scopeOneTimePasswordField);
  const rovingFocusGroupScope = useRovingFocusGroupScope2(__scopeOneTimePasswordField);
  const inputRef = React16.useRef(null);
  const [element, setElement] = React16.useState(null);
  const index = indexProp ?? (element ? collection.indexOf(element) : -1);
  const canSetPlaceholder = indexProp != null || isHydrated;
  let placeholder;
  if (canSetPlaceholder && context.placeholder && context.value.length === 0) {
    placeholder = context.placeholder[index];
  }
  const composedInputRef = useComposedRefs(forwardedRef, inputRef, setElement);
  const char = context.value[index] ?? "";
  const keyboardActionTimeoutRef = React16.useRef(null);
  React16.useEffect(() => {
    return () => {
      window.clearTimeout(keyboardActionTimeoutRef.current);
    };
  }, []);
  const totalValue = context.value.join("").trim();
  const lastSelectableIndex = clamp(totalValue.length, [0, collection.size - 1]);
  const isFocusable = index <= lastSelectableIndex;
  const validation = validationType in INPUT_VALIDATION_MAP ? INPUT_VALIDATION_MAP[validationType] : void 0;
  return (0, import_jsx_runtime15.jsx)(Collection4.ItemSlot, { scope: __scopeOneTimePasswordField, children: (0, import_jsx_runtime15.jsx)(
    Item,
    {
      ...rovingFocusGroupScope,
      asChild: true,
      focusable: !context.disabled && isFocusable,
      active: index === lastSelectableIndex,
      children: ({ hasTabStop, isCurrentTabStop }) => {
        const supportsAutoComplete = hasTabStop ? isCurrentTabStop : index === 0;
        return (0, import_jsx_runtime15.jsx)(
          Root.input,
          {
            ref: composedInputRef,
            type: context.type,
            disabled,
            "aria-label": `Character ${index + 1} of ${collection.size}`,
            autoComplete: supportsAutoComplete ? context.autoComplete : "off",
            "data-1p-ignore": supportsAutoComplete ? void 0 : "true",
            "data-lpignore": supportsAutoComplete ? void 0 : "true",
            "data-protonpass-ignore": supportsAutoComplete ? void 0 : "true",
            "data-bwignore": supportsAutoComplete ? void 0 : "true",
            inputMode: validation?.inputMode,
            maxLength: 1,
            pattern: validation?.pattern,
            readOnly: context.readOnly,
            value: char,
            placeholder,
            "data-radix-otp-input": "",
            "data-radix-index": index,
            ...domProps,
            onFocus: composeEventHandlers(props.onFocus, (event) => {
              event.currentTarget.select();
            }),
            onCut: composeEventHandlers(props.onCut, (event) => {
              const currentValue = event.currentTarget.value;
              if (currentValue !== "") {
                userActionRef.current = {
                  type: "cut"
                };
                keyboardActionTimeoutRef.current = window.setTimeout(() => {
                  userActionRef.current = null;
                }, 10);
              }
            }),
            onInput: composeEventHandlers(props.onInput, (event) => {
              const value = event.currentTarget.value;
              if (value.length > 1) {
                event.preventDefault();
                dispatch({ type: "PASTE", value });
              }
            }),
            onChange: composeEventHandlers(props.onChange, (event) => {
              const value = event.target.value;
              event.preventDefault();
              const action = userActionRef.current;
              userActionRef.current = null;
              if (action) {
                switch (action.type) {
                  case "cut":
                    dispatch({ type: "CLEAR_CHAR", index, reason: "Cut" });
                    return;
                  case "keydown": {
                    if (action.key === "Char") {
                      return;
                    }
                    const isClearing = action.key === "Backspace" && (action.metaKey || action.ctrlKey);
                    if (action.key === "Clear" || isClearing) {
                      dispatch({ type: "CLEAR", reason: "Backspace" });
                    } else {
                      dispatch({ type: "CLEAR_CHAR", index, reason: action.key });
                    }
                    return;
                  }
                  default:
                    return;
                }
              }
              if (event.target.validity.valid) {
                if (value === "") {
                  let reason = "Backspace";
                  if (isInputEvent(event.nativeEvent)) {
                    const inputType = event.nativeEvent.inputType;
                    if (inputType === "deleteContentBackward") {
                      reason = "Backspace";
                    } else if (inputType === "deleteByCut") {
                      reason = "Cut";
                    }
                  }
                  dispatch({ type: "CLEAR_CHAR", index, reason });
                } else {
                  dispatch({ type: "SET_CHAR", char: value, index, event });
                }
              } else {
                const element2 = event.target;
                onInvalidChange?.(element2.value);
                requestAnimationFrame(() => {
                  if (element2.ownerDocument.activeElement === element2) {
                    element2.select();
                  }
                });
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              switch (event.key) {
                case "Clear":
                case "Delete":
                case "Backspace": {
                  const currentValue = event.currentTarget.value;
                  if (currentValue === "") {
                    if (event.key === "Delete") return;
                    const isClearing = event.key === "Clear" || event.metaKey || event.ctrlKey;
                    if (isClearing) {
                      dispatch({ type: "CLEAR", reason: "Backspace" });
                    } else {
                      const element2 = event.currentTarget;
                      requestAnimationFrame(() => {
                        focusInput(collection.from(element2, -1)?.element);
                      });
                    }
                  } else {
                    userActionRef.current = {
                      type: "keydown",
                      key: event.key,
                      metaKey: event.metaKey,
                      ctrlKey: event.ctrlKey
                    };
                    keyboardActionTimeoutRef.current = window.setTimeout(() => {
                      userActionRef.current = null;
                    }, 10);
                  }
                  return;
                }
                case "Enter": {
                  event.preventDefault();
                  context.attemptSubmit();
                  return;
                }
                case "ArrowDown":
                case "ArrowUp": {
                  if (context.orientation === "horizontal") {
                    event.preventDefault();
                  }
                  return;
                }
                // TODO: Handle left/right arrow keys in vertical writing mode
                default: {
                  if (event.currentTarget.value === event.key) {
                    const element2 = event.currentTarget;
                    event.preventDefault();
                    focusInput(collection.from(element2, 1)?.element);
                    return;
                  } else if (
                    // input already has a value, but...
                    event.currentTarget.value && // the value is not selected
                    !(event.currentTarget.selectionStart === 0 && event.currentTarget.selectionEnd != null && event.currentTarget.selectionEnd > 0)
                  ) {
                    const attemptedValue = event.key;
                    if (event.key.length > 1 || event.key === " ") {
                      return;
                    } else {
                      const nextInput = collection.from(event.currentTarget, 1)?.element;
                      const lastInput = collection.at(-1)?.element;
                      if (nextInput !== lastInput && event.currentTarget !== lastInput) {
                        if (event.currentTarget.selectionStart === 0) {
                          dispatch({ type: "SET_CHAR", char: attemptedValue, index, event });
                        } else {
                          dispatch({
                            type: "SET_CHAR",
                            char: attemptedValue,
                            index: index + 1,
                            event
                          });
                        }
                        userActionRef.current = {
                          type: "keydown",
                          key: "Char",
                          metaKey: event.metaKey,
                          ctrlKey: event.ctrlKey
                        };
                        keyboardActionTimeoutRef.current = window.setTimeout(() => {
                          userActionRef.current = null;
                        }, 10);
                      }
                    }
                  }
                }
              }
            }),
            onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
              event.preventDefault();
              const indexToFocus = Math.min(index, lastSelectableIndex);
              const element2 = collection.at(indexToFocus)?.element;
              focusInput(element2);
            })
          }
        );
      }
    }
  ) });
});
function isFormElement(element) {
  return element?.tagName === "FORM";
}
function removeWhitespace(value) {
  return value.replace(/\s/g, "");
}
function focusInput(element) {
  if (!element) return;
  if (element.ownerDocument.activeElement === element) {
    window.requestAnimationFrame(() => {
      element.select?.();
    });
  } else {
    element.focus();
  }
}
function isInputEvent(event) {
  return event.type === "input";
}

// node_modules/@radix-ui/react-password-toggle-field/dist/index.mjs
var React17 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var PASSWORD_TOGGLE_FIELD_NAME = "PasswordToggleField";
var [createPasswordToggleFieldContext] = createContextScope(PASSWORD_TOGGLE_FIELD_NAME);
var [PasswordToggleFieldProvider, usePasswordToggleFieldContext] = createPasswordToggleFieldContext(PASSWORD_TOGGLE_FIELD_NAME);
var INITIAL_FOCUS_STATE = {
  clickTriggered: false,
  selectionStart: null,
  selectionEnd: null
};
var PasswordToggleField = ({
  __scopePasswordToggleField,
  ...props
}) => {
  const baseId = useId(props.id);
  const defaultInputId = `${baseId}-input`;
  const [inputIdState, setInputIdState] = React17.useState(defaultInputId);
  const inputId = inputIdState ?? defaultInputId;
  const syncInputId = React17.useCallback(
    (providedId) => setInputIdState(providedId != null ? String(providedId) : null),
    []
  );
  const { visible: visibleProp, defaultVisible, onVisiblityChange, children } = props;
  const [visible = false, setVisible] = useControllableState({
    caller: PASSWORD_TOGGLE_FIELD_NAME,
    prop: visibleProp,
    defaultProp: defaultVisible ?? false,
    onChange: onVisiblityChange
  });
  const inputRef = React17.useRef(null);
  const focusState = React17.useRef(INITIAL_FOCUS_STATE);
  return (0, import_jsx_runtime16.jsx)(
    PasswordToggleFieldProvider,
    {
      scope: __scopePasswordToggleField,
      inputId,
      inputRef,
      setVisible,
      syncInputId,
      visible,
      focusState,
      children
    }
  );
};
PasswordToggleField.displayName = PASSWORD_TOGGLE_FIELD_NAME;
var PASSWORD_TOGGLE_FIELD_INPUT_NAME = PASSWORD_TOGGLE_FIELD_NAME + "Input";
var PasswordToggleFieldInput = React17.forwardRef(
  ({
    __scopePasswordToggleField,
    autoComplete = "current-password",
    autoCapitalize = "off",
    spellCheck = false,
    id: idProp,
    ...props
  }, forwardedRef) => {
    const { visible, inputRef, inputId, syncInputId, setVisible, focusState } = usePasswordToggleFieldContext(PASSWORD_TOGGLE_FIELD_INPUT_NAME, __scopePasswordToggleField);
    React17.useEffect(() => {
      syncInputId(idProp);
    }, [idProp, syncInputId]);
    const _setVisible = useEffectEvent(setVisible);
    React17.useEffect(() => {
      const inputElement = inputRef.current;
      const form = inputElement?.form;
      if (!form) {
        return;
      }
      const controller = new AbortController();
      form.addEventListener(
        "reset",
        (event) => {
          if (!event.defaultPrevented) {
            _setVisible(false);
          }
        },
        { signal: controller.signal }
      );
      form.addEventListener(
        "submit",
        () => {
          _setVisible(false);
        },
        { signal: controller.signal }
      );
      return () => {
        controller.abort();
      };
    }, [inputRef, _setVisible]);
    return (0, import_jsx_runtime16.jsx)(
      Primitive.input,
      {
        ...props,
        id: idProp ?? inputId,
        autoCapitalize,
        autoComplete,
        ref: useComposedRefs(forwardedRef, inputRef),
        spellCheck,
        type: visible ? "text" : "password",
        onBlur: composeEventHandlers(props.onBlur, (event) => {
          const { selectionStart, selectionEnd } = event.currentTarget;
          focusState.current.selectionStart = selectionStart;
          focusState.current.selectionEnd = selectionEnd;
        })
      }
    );
  }
);
PasswordToggleFieldInput.displayName = PASSWORD_TOGGLE_FIELD_INPUT_NAME;
var PASSWORD_TOGGLE_FIELD_TOGGLE_NAME = PASSWORD_TOGGLE_FIELD_NAME + "Toggle";
var PasswordToggleFieldToggle = React17.forwardRef(
  ({
    __scopePasswordToggleField,
    onClick,
    onPointerDown,
    onPointerCancel,
    onPointerUp,
    onFocus,
    children,
    "aria-label": ariaLabelProp,
    "aria-controls": ariaControls,
    "aria-hidden": ariaHidden,
    tabIndex,
    ...props
  }, forwardedRef) => {
    const { setVisible, visible, inputRef, inputId, focusState } = usePasswordToggleFieldContext(
      PASSWORD_TOGGLE_FIELD_TOGGLE_NAME,
      __scopePasswordToggleField
    );
    const [internalAriaLabel, setInternalAriaLabel] = React17.useState(void 0);
    const elementRef = React17.useRef(null);
    const ref = useComposedRefs(forwardedRef, elementRef);
    const isHydrated = useIsHydrated();
    React17.useEffect(() => {
      const element = elementRef.current;
      if (!element || ariaLabelProp) {
        setInternalAriaLabel(void 0);
        return;
      }
      const DEFAULT_ARIA_LABEL = visible ? "Hide password" : "Show password";
      function checkForInnerTextLabel(textContent) {
        const text = textContent ? textContent : void 0;
        setInternalAriaLabel(text ? void 0 : DEFAULT_ARIA_LABEL);
      }
      checkForInnerTextLabel(element.textContent);
      const observer = new MutationObserver((entries) => {
        let textContent;
        for (const entry of entries) {
          if (entry.type === "characterData") {
            if (element.textContent) {
              textContent = element.textContent;
            }
          }
        }
        checkForInnerTextLabel(textContent);
      });
      observer.observe(element, { characterData: true, subtree: true });
      return () => {
        observer.disconnect();
      };
    }, [visible, ariaLabelProp]);
    const ariaLabel = ariaLabelProp || internalAriaLabel;
    if (!isHydrated) {
      ariaHidden ??= true;
      tabIndex ??= -1;
    } else {
      ariaControls ??= inputId;
    }
    React17.useEffect(() => {
      let cleanup = () => {
      };
      const ownerWindow = elementRef.current?.ownerDocument?.defaultView || window;
      const reset = () => focusState.current.clickTriggered = false;
      const handlePointerUp = () => cleanup = requestIdleCallback(ownerWindow, reset);
      ownerWindow.addEventListener("pointerup", handlePointerUp);
      return () => {
        cleanup();
        ownerWindow.removeEventListener("pointerup", handlePointerUp);
      };
    }, [focusState]);
    return (0, import_jsx_runtime16.jsx)(
      Primitive.button,
      {
        "aria-controls": ariaControls,
        "aria-hidden": ariaHidden,
        "aria-label": ariaLabel,
        ref,
        id: inputId,
        ...props,
        onPointerDown: composeEventHandlers(onPointerDown, () => {
          focusState.current.clickTriggered = true;
        }),
        onPointerCancel: (event) => {
          onPointerCancel?.(event);
          focusState.current = INITIAL_FOCUS_STATE;
        },
        onClick: (event) => {
          onClick?.(event);
          if (event.defaultPrevented) {
            focusState.current = INITIAL_FOCUS_STATE;
            return;
          }
          (0, import_react_dom3.flushSync)(() => {
            setVisible((s26) => !s26);
          });
          if (focusState.current.clickTriggered) {
            const input = inputRef.current;
            if (input) {
              const { selectionStart, selectionEnd } = focusState.current;
              input.focus();
              if (selectionStart !== null || selectionEnd !== null) {
                requestAnimationFrame(() => {
                  if (input.ownerDocument.activeElement === input) {
                    input.selectionStart = selectionStart;
                    input.selectionEnd = selectionEnd;
                  }
                });
              }
            }
          }
          focusState.current = INITIAL_FOCUS_STATE;
        },
        onPointerUp: (event) => {
          onPointerUp?.(event);
          setTimeout(() => {
            focusState.current = INITIAL_FOCUS_STATE;
          }, 50);
        },
        type: "button",
        children
      }
    );
  }
);
PasswordToggleFieldToggle.displayName = PASSWORD_TOGGLE_FIELD_TOGGLE_NAME;
var PASSWORD_TOGGLE_FIELD_SLOT_NAME = PASSWORD_TOGGLE_FIELD_NAME + "Slot";
var PasswordToggleFieldSlot = ({
  __scopePasswordToggleField,
  ...props
}) => {
  const { visible } = usePasswordToggleFieldContext(
    PASSWORD_TOGGLE_FIELD_SLOT_NAME,
    __scopePasswordToggleField
  );
  return "render" in props ? (
    //
    props.render({ visible })
  ) : visible ? props.visible : props.hidden;
};
PasswordToggleFieldSlot.displayName = PASSWORD_TOGGLE_FIELD_SLOT_NAME;
var PASSWORD_TOGGLE_FIELD_ICON_NAME = PASSWORD_TOGGLE_FIELD_NAME + "Icon";
var PasswordToggleFieldIcon = React17.forwardRef(
  ({
    __scopePasswordToggleField,
    // @ts-expect-error
    children,
    ...props
  }, forwardedRef) => {
    const { visible } = usePasswordToggleFieldContext(
      PASSWORD_TOGGLE_FIELD_ICON_NAME,
      __scopePasswordToggleField
    );
    const { visible: visibleIcon, hidden: hiddenIcon, ...domProps } = props;
    return (0, import_jsx_runtime16.jsx)(Primitive.svg, { ...domProps, ref: forwardedRef, "aria-hidden": true, asChild: true, children: visible ? visibleIcon : hiddenIcon });
  }
);
PasswordToggleFieldIcon.displayName = PASSWORD_TOGGLE_FIELD_ICON_NAME;
function requestIdleCallback(window2, callback, options) {
  if (window2.requestIdleCallback) {
    const id2 = window2.requestIdleCallback(callback, options);
    return () => {
      window2.cancelIdleCallback(id2);
    };
  }
  const start = Date.now();
  const id = window2.setTimeout(() => {
    const timeRemaining = () => Math.max(0, 50 - (Date.now() - start));
    callback({ didTimeout: false, timeRemaining });
  }, 1);
  return () => {
    window2.clearTimeout(id);
  };
}

// node_modules/@radix-ui/react-popover/dist/index.mjs
var dist_exports21 = {};
__export(dist_exports21, {
  Anchor: () => Anchor22,
  Arrow: () => Arrow24,
  Close: () => Close2,
  Content: () => Content26,
  Popover: () => Popover,
  PopoverAnchor: () => PopoverAnchor,
  PopoverArrow: () => PopoverArrow,
  PopoverClose: () => PopoverClose,
  PopoverContent: () => PopoverContent,
  PopoverPortal: () => PopoverPortal,
  PopoverTrigger: () => PopoverTrigger,
  Portal: () => Portal5,
  Root: () => Root28,
  Trigger: () => Trigger6,
  createPopoverScope: () => createPopoverScope
});
var React18 = __toESM(require_react(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var POPOVER_NAME = "Popover";
var [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [
  createPopperScope
]);
var usePopperScope2 = createPopperScope();
var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
var Popover = (props) => {
  const {
    __scopePopover,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = false
  } = props;
  const popperScope = usePopperScope2(__scopePopover);
  const triggerRef = React18.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = React18.useState(false);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: POPOVER_NAME
  });
  return (0, import_jsx_runtime17.jsx)(Root22, { ...popperScope, children: (0, import_jsx_runtime17.jsx)(
    PopoverProvider,
    {
      scope: __scopePopover,
      contentId: useId(),
      triggerRef,
      open,
      onOpenChange: setOpen,
      onOpenToggle: React18.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
      hasCustomAnchor,
      onCustomAnchorAdd: React18.useCallback(() => setHasCustomAnchor(true), []),
      onCustomAnchorRemove: React18.useCallback(() => setHasCustomAnchor(false), []),
      modal,
      children
    }
  ) });
};
Popover.displayName = POPOVER_NAME;
var ANCHOR_NAME = "PopoverAnchor";
var PopoverAnchor = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...anchorProps } = props;
    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
    const popperScope = usePopperScope2(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    React18.useEffect(() => {
      onCustomAnchorAdd();
      return () => onCustomAnchorRemove();
    }, [onCustomAnchorAdd, onCustomAnchorRemove]);
    return (0, import_jsx_runtime17.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
  }
);
PopoverAnchor.displayName = ANCHOR_NAME;
var TRIGGER_NAME9 = "PopoverTrigger";
var PopoverTrigger = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...triggerProps } = props;
    const context = usePopoverContext(TRIGGER_NAME9, __scopePopover);
    const popperScope = usePopperScope2(__scopePopover);
    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
    const trigger = (0, import_jsx_runtime17.jsx)(
      Primitive.button,
      {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": getState4(context.open),
        ...triggerProps,
        ref: composedTriggerRef,
        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
      }
    );
    return context.hasCustomAnchor ? trigger : (0, import_jsx_runtime17.jsx)(Anchor, { asChild: true, ...popperScope, children: trigger });
  }
);
PopoverTrigger.displayName = TRIGGER_NAME9;
var PORTAL_NAME5 = "PopoverPortal";
var [PortalProvider2, usePortalContext2] = createPopoverContext(PORTAL_NAME5, {
  forceMount: void 0
});
var PopoverPortal = (props) => {
  const { __scopePopover, forceMount, children, container } = props;
  const context = usePopoverContext(PORTAL_NAME5, __scopePopover);
  return (0, import_jsx_runtime17.jsx)(PortalProvider2, { scope: __scopePopover, forceMount, children: (0, import_jsx_runtime17.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime17.jsx)(Portal, { asChild: true, container, children }) }) });
};
PopoverPortal.displayName = PORTAL_NAME5;
var CONTENT_NAME8 = "PopoverContent";
var PopoverContent = React18.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext2(CONTENT_NAME8, props.__scopePopover);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME8, props.__scopePopover);
    return (0, import_jsx_runtime17.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? (0, import_jsx_runtime17.jsx)(PopoverContentModal, { ...contentProps, ref: forwardedRef }) : (0, import_jsx_runtime17.jsx)(PopoverContentNonModal, { ...contentProps, ref: forwardedRef }) });
  }
);
PopoverContent.displayName = CONTENT_NAME8;
var Slot = createSlot("PopoverContent.RemoveScroll");
var PopoverContentModal = React18.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME8, props.__scopePopover);
    const contentRef = React18.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const isRightClickOutsideRef = React18.useRef(false);
    React18.useEffect(() => {
      const content = contentRef.current;
      if (content) return hideOthers(content);
    }, []);
    return (0, import_jsx_runtime17.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, children: (0, import_jsx_runtime17.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: composedRefs,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
          event.preventDefault();
          if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();
        }),
        onPointerDownOutside: composeEventHandlers(
          props.onPointerDownOutside,
          (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            isRightClickOutsideRef.current = isRightClick;
          },
          { checkForDefaultPrevented: false }
        ),
        onFocusOutside: composeEventHandlers(
          props.onFocusOutside,
          (event) => event.preventDefault(),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
var PopoverContentNonModal = React18.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME8, props.__scopePopover);
    const hasInteractedOutsideRef = React18.useRef(false);
    const hasPointerDownOutsideRef = React18.useRef(false);
    return (0, import_jsx_runtime17.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event) => {
          props.onCloseAutoFocus?.(event);
          if (!event.defaultPrevented) {
            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
          hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          props.onInteractOutside?.(event);
          if (!event.defaultPrevented) {
            hasInteractedOutsideRef.current = true;
            if (event.detail.originalEvent.type === "pointerdown") {
              hasPointerDownOutsideRef.current = true;
            }
          }
          const target = event.target;
          const targetIsTrigger = context.triggerRef.current?.contains(target);
          if (targetIsTrigger) event.preventDefault();
          if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
            event.preventDefault();
          }
        }
      }
    );
  }
);
var PopoverContentImpl = React18.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopePopover,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      ...contentProps
    } = props;
    const context = usePopoverContext(CONTENT_NAME8, __scopePopover);
    const popperScope = usePopperScope2(__scopePopover);
    useFocusGuards();
    return (0, import_jsx_runtime17.jsx)(
      FocusScope,
      {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: (0, import_jsx_runtime17.jsx)(
          DismissableLayer,
          {
            asChild: true,
            disableOutsidePointerEvents,
            onInteractOutside,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside,
            onDismiss: () => context.onOpenChange(false),
            children: (0, import_jsx_runtime17.jsx)(
              Content2,
              {
                "data-state": getState4(context.open),
                role: "dialog",
                id: context.contentId,
                ...popperScope,
                ...contentProps,
                ref: forwardedRef,
                style: {
                  ...contentProps.style,
                  // re-namespace exposed content custom properties
                  ...{
                    "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                    "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                    "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                    "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                    "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                  }
                }
              }
            )
          }
        )
      }
    );
  }
);
var CLOSE_NAME = "PopoverClose";
var PopoverClose = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...closeProps } = props;
    const context = usePopoverContext(CLOSE_NAME, __scopePopover);
    return (0, import_jsx_runtime17.jsx)(
      Primitive.button,
      {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
      }
    );
  }
);
PopoverClose.displayName = CLOSE_NAME;
var ARROW_NAME4 = "PopoverArrow";
var PopoverArrow = React18.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = usePopperScope2(__scopePopover);
    return (0, import_jsx_runtime17.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
PopoverArrow.displayName = ARROW_NAME4;
function getState4(open) {
  return open ? "open" : "closed";
}
var Root28 = Popover;
var Anchor22 = PopoverAnchor;
var Trigger6 = PopoverTrigger;
var Portal5 = PopoverPortal;
var Content26 = PopoverContent;
var Close2 = PopoverClose;
var Arrow24 = PopoverArrow;

// node_modules/@radix-ui/react-progress/dist/index.mjs
var dist_exports22 = {};
__export(dist_exports22, {
  Indicator: () => Indicator2,
  Progress: () => Progress,
  ProgressIndicator: () => ProgressIndicator,
  Root: () => Root9,
  createProgressScope: () => createProgressScope
});
var React19 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var PROGRESS_NAME = "Progress";
var DEFAULT_MAX = 100;
var [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);
var [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);
var Progress = React19.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeProgress,
      value: valueProp = null,
      max: maxProp,
      getValueLabel = defaultGetValueLabel,
      ...progressProps
    } = props;
    if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {
      console.error(getInvalidMaxError(`${maxProp}`, "Progress"));
    }
    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;
    if (valueProp !== null && !isValidValueNumber(valueProp, max)) {
      console.error(getInvalidValueError(`${valueProp}`, "Progress"));
    }
    const value = isValidValueNumber(valueProp, max) ? valueProp : null;
    const valueLabel = isNumber(value) ? getValueLabel(value, max) : void 0;
    return (0, import_jsx_runtime18.jsx)(ProgressProvider, { scope: __scopeProgress, value, max, children: (0, import_jsx_runtime18.jsx)(
      Primitive.div,
      {
        "aria-valuemax": max,
        "aria-valuemin": 0,
        "aria-valuenow": isNumber(value) ? value : void 0,
        "aria-valuetext": valueLabel,
        role: "progressbar",
        "data-state": getProgressState(value, max),
        "data-value": value ?? void 0,
        "data-max": max,
        ...progressProps,
        ref: forwardedRef
      }
    ) });
  }
);
Progress.displayName = PROGRESS_NAME;
var INDICATOR_NAME5 = "ProgressIndicator";
var ProgressIndicator = React19.forwardRef(
  (props, forwardedRef) => {
    const { __scopeProgress, ...indicatorProps } = props;
    const context = useProgressContext(INDICATOR_NAME5, __scopeProgress);
    return (0, import_jsx_runtime18.jsx)(
      Primitive.div,
      {
        "data-state": getProgressState(context.value, context.max),
        "data-value": context.value ?? void 0,
        "data-max": context.max,
        ...indicatorProps,
        ref: forwardedRef
      }
    );
  }
);
ProgressIndicator.displayName = INDICATOR_NAME5;
function defaultGetValueLabel(value, max) {
  return `${Math.round(value / max * 100)}%`;
}
function getProgressState(value, maxValue) {
  return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
}
function isNumber(value) {
  return typeof value === "number";
}
function isValidMaxNumber(max) {
  return isNumber(max) && !isNaN(max) && max > 0;
}
function isValidValueNumber(value, max) {
  return isNumber(value) && !isNaN(value) && value <= max && value >= 0;
}
function getInvalidMaxError(propValue, componentName) {
  return `Invalid prop \`max\` of value \`${propValue}\` supplied to \`${componentName}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${DEFAULT_MAX}\`.`;
}
function getInvalidValueError(propValue, componentName) {
  return `Invalid prop \`value\` of value \`${propValue}\` supplied to \`${componentName}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${DEFAULT_MAX} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`;
}
var Root9 = Progress;
var Indicator2 = ProgressIndicator;

// node_modules/@radix-ui/react-radio-group/dist/index.mjs
var dist_exports23 = {};
__export(dist_exports23, {
  Indicator: () => Indicator3,
  Item: () => Item23,
  RadioGroup: () => RadioGroup3,
  RadioGroupIndicator: () => RadioGroupIndicator,
  RadioGroupItem: () => RadioGroupItem,
  Root: () => Root29,
  createRadioGroupScope: () => createRadioGroupScope
});
var React22 = __toESM(require_react(), 1);
var React20 = __toESM(require_react(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var RADIO_NAME = "Radio";
var [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);
var [RadioProvider, useRadioContext] = createRadioContext(RADIO_NAME);
var Radio = React20.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeRadio,
      name,
      checked = false,
      required,
      disabled,
      value = "on",
      onCheck,
      form,
      ...radioProps
    } = props;
    const [button, setButton] = React20.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React20.useRef(false);
    const isFormControl2 = button ? form || !!button.closest("form") : true;
    return (0, import_jsx_runtime19.jsxs)(RadioProvider, { scope: __scopeRadio, checked, disabled, children: [
      (0, import_jsx_runtime19.jsx)(
        Primitive.button,
        {
          type: "button",
          role: "radio",
          "aria-checked": checked,
          "data-state": getState5(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...radioProps,
          ref: composedRefs,
          onClick: composeEventHandlers(props.onClick, (event) => {
            if (!checked) onCheck?.();
            if (isFormControl2) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
            }
          })
        }
      ),
      isFormControl2 && (0, import_jsx_runtime19.jsx)(
        RadioBubbleInput,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          form,
          style: { transform: "translateX(-100%)" }
        }
      )
    ] });
  }
);
Radio.displayName = RADIO_NAME;
var INDICATOR_NAME6 = "RadioIndicator";
var RadioIndicator = React20.forwardRef(
  (props, forwardedRef) => {
    const { __scopeRadio, forceMount, ...indicatorProps } = props;
    const context = useRadioContext(INDICATOR_NAME6, __scopeRadio);
    return (0, import_jsx_runtime19.jsx)(Presence, { present: forceMount || context.checked, children: (0, import_jsx_runtime19.jsx)(
      Primitive.span,
      {
        "data-state": getState5(context.checked),
        "data-disabled": context.disabled ? "" : void 0,
        ...indicatorProps,
        ref: forwardedRef
      }
    ) });
  }
);
RadioIndicator.displayName = INDICATOR_NAME6;
var BUBBLE_INPUT_NAME2 = "RadioBubbleInput";
var RadioBubbleInput = React20.forwardRef(
  ({
    __scopeRadio,
    control,
    checked,
    bubbles = true,
    ...props
  }, forwardedRef) => {
    const ref = React20.useRef(null);
    const composedRefs = useComposedRefs(ref, forwardedRef);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React20.useEffect(() => {
      const input = ref.current;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        setChecked.call(input, checked);
        input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]);
    return (0, import_jsx_runtime19.jsx)(
      Primitive.input,
      {
        type: "radio",
        "aria-hidden": true,
        defaultChecked: checked,
        ...props,
        tabIndex: -1,
        ref: composedRefs,
        style: {
          ...props.style,
          ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        }
      }
    );
  }
);
RadioBubbleInput.displayName = BUBBLE_INPUT_NAME2;
function getState5(checked) {
  return checked ? "checked" : "unchecked";
}
var ARROW_KEYS2 = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var RADIO_GROUP_NAME3 = "RadioGroup";
var [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME3, [
  createRovingFocusGroupScope,
  createRadioScope
]);
var useRovingFocusGroupScope3 = createRovingFocusGroupScope();
var useRadioScope = createRadioScope();
var [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME3);
var RadioGroup3 = React22.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeRadioGroup,
      name,
      defaultValue,
      value: valueProp,
      required = false,
      disabled = false,
      orientation,
      dir,
      loop = true,
      onValueChange,
      ...groupProps
    } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope3(__scopeRadioGroup);
    const direction = useDirection(dir);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue ?? null,
      onChange: onValueChange,
      caller: RADIO_GROUP_NAME3
    });
    return (0, import_jsx_runtime20.jsx)(
      RadioGroupProvider,
      {
        scope: __scopeRadioGroup,
        name,
        required,
        disabled,
        value,
        onValueChange: setValue,
        children: (0, import_jsx_runtime20.jsx)(
          Root4,
          {
            asChild: true,
            ...rovingFocusGroupScope,
            orientation,
            dir: direction,
            loop,
            children: (0, import_jsx_runtime20.jsx)(
              Primitive.div,
              {
                role: "radiogroup",
                "aria-required": required,
                "aria-orientation": orientation,
                "data-disabled": disabled ? "" : void 0,
                dir: direction,
                ...groupProps,
                ref: forwardedRef
              }
            )
          }
        )
      }
    );
  }
);
RadioGroup3.displayName = RADIO_GROUP_NAME3;
var ITEM_NAME5 = "RadioGroupItem";
var RadioGroupItem = React22.forwardRef(
  (props, forwardedRef) => {
    const { __scopeRadioGroup, disabled, ...itemProps } = props;
    const context = useRadioGroupContext(ITEM_NAME5, __scopeRadioGroup);
    const isDisabled = context.disabled || disabled;
    const rovingFocusGroupScope = useRovingFocusGroupScope3(__scopeRadioGroup);
    const radioScope = useRadioScope(__scopeRadioGroup);
    const ref = React22.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const checked = context.value === itemProps.value;
    const isArrowKeyPressedRef = React22.useRef(false);
    React22.useEffect(() => {
      const handleKeyDown = (event) => {
        if (ARROW_KEYS2.includes(event.key)) {
          isArrowKeyPressedRef.current = true;
        }
      };
      const handleKeyUp = () => isArrowKeyPressedRef.current = false;
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);
      return () => {
        document.removeEventListener("keydown", handleKeyDown);
        document.removeEventListener("keyup", handleKeyUp);
      };
    }, []);
    return (0, import_jsx_runtime20.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !isDisabled,
        active: checked,
        children: (0, import_jsx_runtime20.jsx)(
          Radio,
          {
            disabled: isDisabled,
            required: context.required,
            checked,
            ...radioScope,
            ...itemProps,
            name: context.name,
            ref: composedRefs,
            onCheck: () => context.onValueChange(itemProps.value),
            onKeyDown: composeEventHandlers((event) => {
              if (event.key === "Enter") event.preventDefault();
            }),
            onFocus: composeEventHandlers(itemProps.onFocus, () => {
              if (isArrowKeyPressedRef.current) ref.current?.click();
            })
          }
        )
      }
    );
  }
);
RadioGroupItem.displayName = ITEM_NAME5;
var INDICATOR_NAME22 = "RadioGroupIndicator";
var RadioGroupIndicator = React22.forwardRef(
  (props, forwardedRef) => {
    const { __scopeRadioGroup, ...indicatorProps } = props;
    const radioScope = useRadioScope(__scopeRadioGroup);
    return (0, import_jsx_runtime20.jsx)(RadioIndicator, { ...radioScope, ...indicatorProps, ref: forwardedRef });
  }
);
RadioGroupIndicator.displayName = INDICATOR_NAME22;
var Root29 = RadioGroup3;
var Item23 = RadioGroupItem;
var Indicator3 = RadioGroupIndicator;

// node_modules/@radix-ui/react-scroll-area/dist/index.mjs
var dist_exports24 = {};
__export(dist_exports24, {
  Corner: () => Corner,
  Root: () => Root10,
  ScrollArea: () => ScrollArea,
  ScrollAreaCorner: () => ScrollAreaCorner,
  ScrollAreaScrollbar: () => ScrollAreaScrollbar,
  ScrollAreaThumb: () => ScrollAreaThumb,
  ScrollAreaViewport: () => ScrollAreaViewport,
  Scrollbar: () => Scrollbar,
  Thumb: () => Thumb,
  Viewport: () => Viewport2,
  createScrollAreaScope: () => createScrollAreaScope
});
var React23 = __toESM(require_react(), 1);
var React21 = __toESM(require_react(), 1);
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
function useStateMachine(initialState, machine) {
  return React21.useReducer((state, event) => {
    const nextState = machine[state][event];
    return nextState ?? state;
  }, initialState);
}
var SCROLL_AREA_NAME = "ScrollArea";
var [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);
var [ScrollAreaProvider, useScrollAreaContext] = createScrollAreaContext(SCROLL_AREA_NAME);
var ScrollArea = React23.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeScrollArea,
      type = "hover",
      dir,
      scrollHideDelay = 600,
      ...scrollAreaProps
    } = props;
    const [scrollArea, setScrollArea] = React23.useState(null);
    const [viewport, setViewport] = React23.useState(null);
    const [content, setContent] = React23.useState(null);
    const [scrollbarX, setScrollbarX] = React23.useState(null);
    const [scrollbarY, setScrollbarY] = React23.useState(null);
    const [cornerWidth, setCornerWidth] = React23.useState(0);
    const [cornerHeight, setCornerHeight] = React23.useState(0);
    const [scrollbarXEnabled, setScrollbarXEnabled] = React23.useState(false);
    const [scrollbarYEnabled, setScrollbarYEnabled] = React23.useState(false);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));
    const direction = useDirection(dir);
    return (0, import_jsx_runtime21.jsx)(
      ScrollAreaProvider,
      {
        scope: __scopeScrollArea,
        type,
        dir: direction,
        scrollHideDelay,
        scrollArea,
        viewport,
        onViewportChange: setViewport,
        content,
        onContentChange: setContent,
        scrollbarX,
        onScrollbarXChange: setScrollbarX,
        scrollbarXEnabled,
        onScrollbarXEnabledChange: setScrollbarXEnabled,
        scrollbarY,
        onScrollbarYChange: setScrollbarY,
        scrollbarYEnabled,
        onScrollbarYEnabledChange: setScrollbarYEnabled,
        onCornerWidthChange: setCornerWidth,
        onCornerHeightChange: setCornerHeight,
        children: (0, import_jsx_runtime21.jsx)(
          Primitive.div,
          {
            dir: direction,
            ...scrollAreaProps,
            ref: composedRefs,
            style: {
              position: "relative",
              // Pass corner sizes as CSS vars to reduce re-renders of context consumers
              ["--radix-scroll-area-corner-width"]: cornerWidth + "px",
              ["--radix-scroll-area-corner-height"]: cornerHeight + "px",
              ...props.style
            }
          }
        )
      }
    );
  }
);
ScrollArea.displayName = SCROLL_AREA_NAME;
var VIEWPORT_NAME2 = "ScrollAreaViewport";
var ScrollAreaViewport = React23.forwardRef(
  (props, forwardedRef) => {
    const { __scopeScrollArea, children, nonce, ...viewportProps } = props;
    const context = useScrollAreaContext(VIEWPORT_NAME2, __scopeScrollArea);
    const ref = React23.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);
    return (0, import_jsx_runtime21.jsxs)(import_jsx_runtime21.Fragment, { children: [
      (0, import_jsx_runtime21.jsx)(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`
          },
          nonce
        }
      ),
      (0, import_jsx_runtime21.jsx)(
        Primitive.div,
        {
          "data-radix-scroll-area-viewport": "",
          ...viewportProps,
          ref: composedRefs,
          style: {
            /**
             * We don't support `visible` because the intention is to have at least one scrollbar
             * if this component is used and `visible` will behave like `auto` in that case
             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description
             *
             * We don't handle `auto` because the intention is for the native implementation
             * to be hidden if using this component. We just want to ensure the node is scrollable
             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent
             * the browser from having to work out whether to render native scrollbars or not,
             * we tell it to with the intention of hiding them in CSS.
             */
            overflowX: context.scrollbarXEnabled ? "scroll" : "hidden",
            overflowY: context.scrollbarYEnabled ? "scroll" : "hidden",
            ...props.style
          },
          children: (0, import_jsx_runtime21.jsx)("div", { ref: context.onContentChange, style: { minWidth: "100%", display: "table" }, children })
        }
      )
    ] });
  }
);
ScrollAreaViewport.displayName = VIEWPORT_NAME2;
var SCROLLBAR_NAME = "ScrollAreaScrollbar";
var ScrollAreaScrollbar = React23.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, ...scrollbarProps } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;
    const isHorizontal = props.orientation === "horizontal";
    React23.useEffect(() => {
      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);
      return () => {
        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);
      };
    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);
    return context.type === "hover" ? (0, import_jsx_runtime21.jsx)(ScrollAreaScrollbarHover, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "scroll" ? (0, import_jsx_runtime21.jsx)(ScrollAreaScrollbarScroll, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "auto" ? (0, import_jsx_runtime21.jsx)(ScrollAreaScrollbarAuto, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "always" ? (0, import_jsx_runtime21.jsx)(ScrollAreaScrollbarVisible, { ...scrollbarProps, ref: forwardedRef }) : null;
  }
);
ScrollAreaScrollbar.displayName = SCROLLBAR_NAME;
var ScrollAreaScrollbarHover = React23.forwardRef((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const [visible, setVisible] = React23.useState(false);
  React23.useEffect(() => {
    const scrollArea = context.scrollArea;
    let hideTimer = 0;
    if (scrollArea) {
      const handlePointerEnter = () => {
        window.clearTimeout(hideTimer);
        setVisible(true);
      };
      const handlePointerLeave = () => {
        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);
      };
      scrollArea.addEventListener("pointerenter", handlePointerEnter);
      scrollArea.addEventListener("pointerleave", handlePointerLeave);
      return () => {
        window.clearTimeout(hideTimer);
        scrollArea.removeEventListener("pointerenter", handlePointerEnter);
        scrollArea.removeEventListener("pointerleave", handlePointerLeave);
      };
    }
  }, [context.scrollArea, context.scrollHideDelay]);
  return (0, import_jsx_runtime21.jsx)(Presence, { present: forceMount || visible, children: (0, import_jsx_runtime21.jsx)(
    ScrollAreaScrollbarAuto,
    {
      "data-state": visible ? "visible" : "hidden",
      ...scrollbarProps,
      ref: forwardedRef
    }
  ) });
});
var ScrollAreaScrollbarScroll = React23.forwardRef((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const isHorizontal = props.orientation === "horizontal";
  const debounceScrollEnd = useDebounceCallback(() => send("SCROLL_END"), 100);
  const [state, send] = useStateMachine("hidden", {
    hidden: {
      SCROLL: "scrolling"
    },
    scrolling: {
      SCROLL_END: "idle",
      POINTER_ENTER: "interacting"
    },
    interacting: {
      SCROLL: "interacting",
      POINTER_LEAVE: "idle"
    },
    idle: {
      HIDE: "hidden",
      SCROLL: "scrolling",
      POINTER_ENTER: "interacting"
    }
  });
  React23.useEffect(() => {
    if (state === "idle") {
      const hideTimer = window.setTimeout(() => send("HIDE"), context.scrollHideDelay);
      return () => window.clearTimeout(hideTimer);
    }
  }, [state, context.scrollHideDelay, send]);
  React23.useEffect(() => {
    const viewport = context.viewport;
    const scrollDirection = isHorizontal ? "scrollLeft" : "scrollTop";
    if (viewport) {
      let prevScrollPos = viewport[scrollDirection];
      const handleScroll = () => {
        const scrollPos = viewport[scrollDirection];
        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;
        if (hasScrollInDirectionChanged) {
          send("SCROLL");
          debounceScrollEnd();
        }
        prevScrollPos = scrollPos;
      };
      viewport.addEventListener("scroll", handleScroll);
      return () => viewport.removeEventListener("scroll", handleScroll);
    }
  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);
  return (0, import_jsx_runtime21.jsx)(Presence, { present: forceMount || state !== "hidden", children: (0, import_jsx_runtime21.jsx)(
    ScrollAreaScrollbarVisible,
    {
      "data-state": state === "hidden" ? "hidden" : "visible",
      ...scrollbarProps,
      ref: forwardedRef,
      onPointerEnter: composeEventHandlers(props.onPointerEnter, () => send("POINTER_ENTER")),
      onPointerLeave: composeEventHandlers(props.onPointerLeave, () => send("POINTER_LEAVE"))
    }
  ) });
});
var ScrollAreaScrollbarAuto = React23.forwardRef((props, forwardedRef) => {
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const { forceMount, ...scrollbarProps } = props;
  const [visible, setVisible] = React23.useState(false);
  const isHorizontal = props.orientation === "horizontal";
  const handleResize = useDebounceCallback(() => {
    if (context.viewport) {
      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;
      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;
      setVisible(isHorizontal ? isOverflowX : isOverflowY);
    }
  }, 10);
  useResizeObserver2(context.viewport, handleResize);
  useResizeObserver2(context.content, handleResize);
  return (0, import_jsx_runtime21.jsx)(Presence, { present: forceMount || visible, children: (0, import_jsx_runtime21.jsx)(
    ScrollAreaScrollbarVisible,
    {
      "data-state": visible ? "visible" : "hidden",
      ...scrollbarProps,
      ref: forwardedRef
    }
  ) });
});
var ScrollAreaScrollbarVisible = React23.forwardRef((props, forwardedRef) => {
  const { orientation = "vertical", ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const thumbRef = React23.useRef(null);
  const pointerOffsetRef = React23.useRef(0);
  const [sizes, setSizes] = React23.useState({
    content: 0,
    viewport: 0,
    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 }
  });
  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);
  const commonProps = {
    ...scrollbarProps,
    sizes,
    onSizesChange: setSizes,
    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),
    onThumbChange: (thumb) => thumbRef.current = thumb,
    onThumbPointerUp: () => pointerOffsetRef.current = 0,
    onThumbPointerDown: (pointerPos) => pointerOffsetRef.current = pointerPos
  };
  function getScrollPosition(pointerPos, dir) {
    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);
  }
  if (orientation === "horizontal") {
    return (0, import_jsx_runtime21.jsx)(
      ScrollAreaScrollbarX,
      {
        ...commonProps,
        ref: forwardedRef,
        onThumbPositionChange: () => {
          if (context.viewport && thumbRef.current) {
            const scrollPos = context.viewport.scrollLeft;
            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);
            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;
          }
        },
        onWheelScroll: (scrollPos) => {
          if (context.viewport) context.viewport.scrollLeft = scrollPos;
        },
        onDragScroll: (pointerPos) => {
          if (context.viewport) {
            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);
          }
        }
      }
    );
  }
  if (orientation === "vertical") {
    return (0, import_jsx_runtime21.jsx)(
      ScrollAreaScrollbarY,
      {
        ...commonProps,
        ref: forwardedRef,
        onThumbPositionChange: () => {
          if (context.viewport && thumbRef.current) {
            const scrollPos = context.viewport.scrollTop;
            const offset = getThumbOffsetFromScroll(scrollPos, sizes);
            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;
          }
        },
        onWheelScroll: (scrollPos) => {
          if (context.viewport) context.viewport.scrollTop = scrollPos;
        },
        onDragScroll: (pointerPos) => {
          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);
        }
      }
    );
  }
  return null;
});
var ScrollAreaScrollbarX = React23.forwardRef((props, forwardedRef) => {
  const { sizes, onSizesChange, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const [computedStyle, setComputedStyle] = React23.useState();
  const ref = React23.useRef(null);
  const composeRefs2 = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);
  React23.useEffect(() => {
    if (ref.current) setComputedStyle(getComputedStyle(ref.current));
  }, [ref]);
  return (0, import_jsx_runtime21.jsx)(
    ScrollAreaScrollbarImpl,
    {
      "data-orientation": "horizontal",
      ...scrollbarProps,
      ref: composeRefs2,
      sizes,
      style: {
        bottom: 0,
        left: context.dir === "rtl" ? "var(--radix-scroll-area-corner-width)" : 0,
        right: context.dir === "ltr" ? "var(--radix-scroll-area-corner-width)" : 0,
        ["--radix-scroll-area-thumb-width"]: getThumbSize(sizes) + "px",
        ...props.style
      },
      onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.x),
      onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.x),
      onWheelScroll: (event, maxScrollPos) => {
        if (context.viewport) {
          const scrollPos = context.viewport.scrollLeft + event.deltaX;
          props.onWheelScroll(scrollPos);
          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
            event.preventDefault();
          }
        }
      },
      onResize: () => {
        if (ref.current && context.viewport && computedStyle) {
          onSizesChange({
            content: context.viewport.scrollWidth,
            viewport: context.viewport.offsetWidth,
            scrollbar: {
              size: ref.current.clientWidth,
              paddingStart: toInt(computedStyle.paddingLeft),
              paddingEnd: toInt(computedStyle.paddingRight)
            }
          });
        }
      }
    }
  );
});
var ScrollAreaScrollbarY = React23.forwardRef((props, forwardedRef) => {
  const { sizes, onSizesChange, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const [computedStyle, setComputedStyle] = React23.useState();
  const ref = React23.useRef(null);
  const composeRefs2 = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);
  React23.useEffect(() => {
    if (ref.current) setComputedStyle(getComputedStyle(ref.current));
  }, [ref]);
  return (0, import_jsx_runtime21.jsx)(
    ScrollAreaScrollbarImpl,
    {
      "data-orientation": "vertical",
      ...scrollbarProps,
      ref: composeRefs2,
      sizes,
      style: {
        top: 0,
        right: context.dir === "ltr" ? 0 : void 0,
        left: context.dir === "rtl" ? 0 : void 0,
        bottom: "var(--radix-scroll-area-corner-height)",
        ["--radix-scroll-area-thumb-height"]: getThumbSize(sizes) + "px",
        ...props.style
      },
      onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.y),
      onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.y),
      onWheelScroll: (event, maxScrollPos) => {
        if (context.viewport) {
          const scrollPos = context.viewport.scrollTop + event.deltaY;
          props.onWheelScroll(scrollPos);
          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
            event.preventDefault();
          }
        }
      },
      onResize: () => {
        if (ref.current && context.viewport && computedStyle) {
          onSizesChange({
            content: context.viewport.scrollHeight,
            viewport: context.viewport.offsetHeight,
            scrollbar: {
              size: ref.current.clientHeight,
              paddingStart: toInt(computedStyle.paddingTop),
              paddingEnd: toInt(computedStyle.paddingBottom)
            }
          });
        }
      }
    }
  );
});
var [ScrollbarProvider, useScrollbarContext] = createScrollAreaContext(SCROLLBAR_NAME);
var ScrollAreaScrollbarImpl = React23.forwardRef((props, forwardedRef) => {
  const {
    __scopeScrollArea,
    sizes,
    hasThumb,
    onThumbChange,
    onThumbPointerUp,
    onThumbPointerDown,
    onThumbPositionChange,
    onDragScroll,
    onWheelScroll,
    onResize,
    ...scrollbarProps
  } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);
  const [scrollbar, setScrollbar] = React23.useState(null);
  const composeRefs2 = useComposedRefs(forwardedRef, (node) => setScrollbar(node));
  const rectRef = React23.useRef(null);
  const prevWebkitUserSelectRef = React23.useRef("");
  const viewport = context.viewport;
  const maxScrollPos = sizes.content - sizes.viewport;
  const handleWheelScroll = useCallbackRef(onWheelScroll);
  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);
  const handleResize = useDebounceCallback(onResize, 10);
  function handleDragScroll(event) {
    if (rectRef.current) {
      const x4 = event.clientX - rectRef.current.left;
      const y7 = event.clientY - rectRef.current.top;
      onDragScroll({ x: x4, y: y7 });
    }
  }
  React23.useEffect(() => {
    const handleWheel = (event) => {
      const element = event.target;
      const isScrollbarWheel = scrollbar?.contains(element);
      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);
    };
    document.addEventListener("wheel", handleWheel, { passive: false });
    return () => document.removeEventListener("wheel", handleWheel, { passive: false });
  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);
  React23.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);
  useResizeObserver2(scrollbar, handleResize);
  useResizeObserver2(context.content, handleResize);
  return (0, import_jsx_runtime21.jsx)(
    ScrollbarProvider,
    {
      scope: __scopeScrollArea,
      scrollbar,
      hasThumb,
      onThumbChange: useCallbackRef(onThumbChange),
      onThumbPointerUp: useCallbackRef(onThumbPointerUp),
      onThumbPositionChange: handleThumbPositionChange,
      onThumbPointerDown: useCallbackRef(onThumbPointerDown),
      children: (0, import_jsx_runtime21.jsx)(
        Primitive.div,
        {
          ...scrollbarProps,
          ref: composeRefs2,
          style: { position: "absolute", ...scrollbarProps.style },
          onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
            const mainPointer = 0;
            if (event.button === mainPointer) {
              const element = event.target;
              element.setPointerCapture(event.pointerId);
              rectRef.current = scrollbar.getBoundingClientRect();
              prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;
              document.body.style.webkitUserSelect = "none";
              if (context.viewport) context.viewport.style.scrollBehavior = "auto";
              handleDragScroll(event);
            }
          }),
          onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),
          onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
            const element = event.target;
            if (element.hasPointerCapture(event.pointerId)) {
              element.releasePointerCapture(event.pointerId);
            }
            document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;
            if (context.viewport) context.viewport.style.scrollBehavior = "";
            rectRef.current = null;
          })
        }
      )
    }
  );
});
var THUMB_NAME = "ScrollAreaThumb";
var ScrollAreaThumb = React23.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, ...thumbProps } = props;
    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);
    return (0, import_jsx_runtime21.jsx)(Presence, { present: forceMount || scrollbarContext.hasThumb, children: (0, import_jsx_runtime21.jsx)(ScrollAreaThumbImpl, { ref: forwardedRef, ...thumbProps }) });
  }
);
var ScrollAreaThumbImpl = React23.forwardRef(
  (props, forwardedRef) => {
    const { __scopeScrollArea, style, ...thumbProps } = props;
    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);
    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);
    const { onThumbPositionChange } = scrollbarContext;
    const composedRef = useComposedRefs(
      forwardedRef,
      (node) => scrollbarContext.onThumbChange(node)
    );
    const removeUnlinkedScrollListenerRef = React23.useRef(void 0);
    const debounceScrollEnd = useDebounceCallback(() => {
      if (removeUnlinkedScrollListenerRef.current) {
        removeUnlinkedScrollListenerRef.current();
        removeUnlinkedScrollListenerRef.current = void 0;
      }
    }, 100);
    React23.useEffect(() => {
      const viewport = scrollAreaContext.viewport;
      if (viewport) {
        const handleScroll = () => {
          debounceScrollEnd();
          if (!removeUnlinkedScrollListenerRef.current) {
            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);
            removeUnlinkedScrollListenerRef.current = listener;
            onThumbPositionChange();
          }
        };
        onThumbPositionChange();
        viewport.addEventListener("scroll", handleScroll);
        return () => viewport.removeEventListener("scroll", handleScroll);
      }
    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);
    return (0, import_jsx_runtime21.jsx)(
      Primitive.div,
      {
        "data-state": scrollbarContext.hasThumb ? "visible" : "hidden",
        ...thumbProps,
        ref: composedRef,
        style: {
          width: "var(--radix-scroll-area-thumb-width)",
          height: "var(--radix-scroll-area-thumb-height)",
          ...style
        },
        onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, (event) => {
          const thumb = event.target;
          const thumbRect = thumb.getBoundingClientRect();
          const x4 = event.clientX - thumbRect.left;
          const y7 = event.clientY - thumbRect.top;
          scrollbarContext.onThumbPointerDown({ x: x4, y: y7 });
        }),
        onPointerUp: composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)
      }
    );
  }
);
ScrollAreaThumb.displayName = THUMB_NAME;
var CORNER_NAME = "ScrollAreaCorner";
var ScrollAreaCorner = React23.forwardRef(
  (props, forwardedRef) => {
    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);
    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);
    const hasCorner = context.type !== "scroll" && hasBothScrollbarsVisible;
    return hasCorner ? (0, import_jsx_runtime21.jsx)(ScrollAreaCornerImpl, { ...props, ref: forwardedRef }) : null;
  }
);
ScrollAreaCorner.displayName = CORNER_NAME;
var ScrollAreaCornerImpl = React23.forwardRef((props, forwardedRef) => {
  const { __scopeScrollArea, ...cornerProps } = props;
  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);
  const [width, setWidth] = React23.useState(0);
  const [height, setHeight] = React23.useState(0);
  const hasSize = Boolean(width && height);
  useResizeObserver2(context.scrollbarX, () => {
    const height2 = context.scrollbarX?.offsetHeight || 0;
    context.onCornerHeightChange(height2);
    setHeight(height2);
  });
  useResizeObserver2(context.scrollbarY, () => {
    const width2 = context.scrollbarY?.offsetWidth || 0;
    context.onCornerWidthChange(width2);
    setWidth(width2);
  });
  return hasSize ? (0, import_jsx_runtime21.jsx)(
    Primitive.div,
    {
      ...cornerProps,
      ref: forwardedRef,
      style: {
        width,
        height,
        position: "absolute",
        right: context.dir === "ltr" ? 0 : void 0,
        left: context.dir === "rtl" ? 0 : void 0,
        bottom: 0,
        ...props.style
      }
    }
  ) : null;
});
function toInt(value) {
  return value ? parseInt(value, 10) : 0;
}
function getThumbRatio(viewportSize, contentSize) {
  const ratio = viewportSize / contentSize;
  return isNaN(ratio) ? 0 : ratio;
}
function getThumbSize(sizes) {
  const ratio = getThumbRatio(sizes.viewport, sizes.content);
  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;
  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;
  return Math.max(thumbSize, 18);
}
function getScrollPositionFromPointer(pointerPos, pointerOffset, sizes, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes);
  const thumbCenter = thumbSizePx / 2;
  const offset = pointerOffset || thumbCenter;
  const thumbOffsetFromEnd = thumbSizePx - offset;
  const minPointerPos = sizes.scrollbar.paddingStart + offset;
  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;
  const maxScrollPos = sizes.content - sizes.viewport;
  const scrollRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);
  return interpolate(pointerPos);
}
function getThumbOffsetFromScroll(scrollPos, sizes, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes);
  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;
  const scrollbar = sizes.scrollbar.size - scrollbarPadding;
  const maxScrollPos = sizes.content - sizes.viewport;
  const maxThumbPos = scrollbar - thumbSizePx;
  const scrollClampRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange);
  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);
  return interpolate(scrollWithoutMomentum);
}
function linearScale(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1]) return output[0];
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {
  return scrollPos > 0 && scrollPos < maxScrollPos;
}
var addUnlinkedScrollListener = (node, handler = () => {
}) => {
  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };
  let rAF = 0;
  (function loop() {
    const position = { left: node.scrollLeft, top: node.scrollTop };
    const isHorizontalScroll = prevPosition.left !== position.left;
    const isVerticalScroll = prevPosition.top !== position.top;
    if (isHorizontalScroll || isVerticalScroll) handler();
    prevPosition = position;
    rAF = window.requestAnimationFrame(loop);
  })();
  return () => window.cancelAnimationFrame(rAF);
};
function useDebounceCallback(callback, delay) {
  const handleCallback = useCallbackRef(callback);
  const debounceTimerRef = React23.useRef(0);
  React23.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);
  return React23.useCallback(() => {
    window.clearTimeout(debounceTimerRef.current);
    debounceTimerRef.current = window.setTimeout(handleCallback, delay);
  }, [handleCallback, delay]);
}
function useResizeObserver2(element, onResize) {
  const handleResize = useCallbackRef(onResize);
  useLayoutEffect2(() => {
    let rAF = 0;
    if (element) {
      const resizeObserver = new ResizeObserver(() => {
        cancelAnimationFrame(rAF);
        rAF = window.requestAnimationFrame(handleResize);
      });
      resizeObserver.observe(element);
      return () => {
        window.cancelAnimationFrame(rAF);
        resizeObserver.unobserve(element);
      };
    }
  }, [element, handleResize]);
}
var Root10 = ScrollArea;
var Viewport2 = ScrollAreaViewport;
var Scrollbar = ScrollAreaScrollbar;
var Thumb = ScrollAreaThumb;
var Corner = ScrollAreaCorner;

// node_modules/@radix-ui/react-select/dist/index.mjs
var dist_exports25 = {};
__export(dist_exports25, {
  Arrow: () => Arrow25,
  Content: () => Content27,
  Group: () => Group3,
  Icon: () => Icon,
  Item: () => Item4,
  ItemIndicator: () => ItemIndicator3,
  ItemText: () => ItemText,
  Label: () => Label4,
  Portal: () => Portal6,
  Root: () => Root210,
  ScrollDownButton: () => ScrollDownButton,
  ScrollUpButton: () => ScrollUpButton,
  Select: () => Select,
  SelectArrow: () => SelectArrow,
  SelectContent: () => SelectContent,
  SelectGroup: () => SelectGroup,
  SelectIcon: () => SelectIcon,
  SelectItem: () => SelectItem,
  SelectItemIndicator: () => SelectItemIndicator,
  SelectItemText: () => SelectItemText,
  SelectLabel: () => SelectLabel,
  SelectPortal: () => SelectPortal,
  SelectScrollDownButton: () => SelectScrollDownButton,
  SelectScrollUpButton: () => SelectScrollUpButton,
  SelectSeparator: () => SelectSeparator,
  SelectTrigger: () => SelectTrigger,
  SelectValue: () => SelectValue,
  SelectViewport: () => SelectViewport,
  Separator: () => Separator3,
  Trigger: () => Trigger7,
  Value: () => Value,
  Viewport: () => Viewport3,
  createSelectScope: () => createSelectScope
});
var React24 = __toESM(require_react(), 1);
var ReactDOM2 = __toESM(require_react_dom(), 1);
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var OPEN_KEYS = [" ", "Enter", "ArrowUp", "ArrowDown"];
var SELECTION_KEYS = [" ", "Enter"];
var SELECT_NAME = "Select";
var [Collection5, useCollection5, createCollectionScope5] = createCollection(SELECT_NAME);
var [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [
  createCollectionScope5,
  createPopperScope
]);
var usePopperScope3 = createPopperScope();
var [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);
var [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);
var Select = (props) => {
  const {
    __scopeSelect,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    value: valueProp,
    defaultValue,
    onValueChange,
    dir,
    name,
    autoComplete,
    disabled,
    required,
    form
  } = props;
  const popperScope = usePopperScope3(__scopeSelect);
  const [trigger, setTrigger] = React24.useState(null);
  const [valueNode, setValueNode] = React24.useState(null);
  const [valueNodeHasChildren, setValueNodeHasChildren] = React24.useState(false);
  const direction = useDirection(dir);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: SELECT_NAME
  });
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange,
    caller: SELECT_NAME
  });
  const triggerPointerDownPosRef = React24.useRef(null);
  const isFormControl2 = trigger ? form || !!trigger.closest("form") : true;
  const [nativeOptionsSet, setNativeOptionsSet] = React24.useState(/* @__PURE__ */ new Set());
  const nativeSelectKey = Array.from(nativeOptionsSet).map((option) => option.props.value).join(";");
  return (0, import_jsx_runtime22.jsx)(Root22, { ...popperScope, children: (0, import_jsx_runtime22.jsxs)(
    SelectProvider,
    {
      required,
      scope: __scopeSelect,
      trigger,
      onTriggerChange: setTrigger,
      valueNode,
      onValueNodeChange: setValueNode,
      valueNodeHasChildren,
      onValueNodeHasChildrenChange: setValueNodeHasChildren,
      contentId: useId(),
      value,
      onValueChange: setValue,
      open,
      onOpenChange: setOpen,
      dir: direction,
      triggerPointerDownPosRef,
      disabled,
      children: [
        (0, import_jsx_runtime22.jsx)(Collection5.Provider, { scope: __scopeSelect, children: (0, import_jsx_runtime22.jsx)(
          SelectNativeOptionsProvider,
          {
            scope: props.__scopeSelect,
            onNativeOptionAdd: React24.useCallback((option) => {
              setNativeOptionsSet((prev) => new Set(prev).add(option));
            }, []),
            onNativeOptionRemove: React24.useCallback((option) => {
              setNativeOptionsSet((prev) => {
                const optionsSet = new Set(prev);
                optionsSet.delete(option);
                return optionsSet;
              });
            }, []),
            children
          }
        ) }),
        isFormControl2 ? (0, import_jsx_runtime22.jsxs)(
          SelectBubbleInput,
          {
            "aria-hidden": true,
            required,
            tabIndex: -1,
            name,
            autoComplete,
            value,
            onChange: (event) => setValue(event.target.value),
            disabled,
            form,
            children: [
              value === void 0 ? (0, import_jsx_runtime22.jsx)("option", { value: "" }) : null,
              Array.from(nativeOptionsSet)
            ]
          },
          nativeSelectKey
        ) : null
      ]
    }
  ) });
};
Select.displayName = SELECT_NAME;
var TRIGGER_NAME10 = "SelectTrigger";
var SelectTrigger = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, disabled = false, ...triggerProps } = props;
    const popperScope = usePopperScope3(__scopeSelect);
    const context = useSelectContext(TRIGGER_NAME10, __scopeSelect);
    const isDisabled = context.disabled || disabled;
    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);
    const getItems = useCollection5(__scopeSelect);
    const pointerTypeRef = React24.useRef("touch");
    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.value === context.value);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem !== void 0) {
        context.onValueChange(nextItem.value);
      }
    });
    const handleOpen = (pointerEvent) => {
      if (!isDisabled) {
        context.onOpenChange(true);
        resetTypeahead();
      }
      if (pointerEvent) {
        context.triggerPointerDownPosRef.current = {
          x: Math.round(pointerEvent.pageX),
          y: Math.round(pointerEvent.pageY)
        };
      }
    };
    return (0, import_jsx_runtime22.jsx)(Anchor, { asChild: true, ...popperScope, children: (0, import_jsx_runtime22.jsx)(
      Primitive.button,
      {
        type: "button",
        role: "combobox",
        "aria-controls": context.contentId,
        "aria-expanded": context.open,
        "aria-required": context.required,
        "aria-autocomplete": "none",
        dir: context.dir,
        "data-state": context.open ? "open" : "closed",
        disabled: isDisabled,
        "data-disabled": isDisabled ? "" : void 0,
        "data-placeholder": shouldShowPlaceholder(context.value) ? "" : void 0,
        ...triggerProps,
        ref: composedRefs,
        onClick: composeEventHandlers(triggerProps.onClick, (event) => {
          event.currentTarget.focus();
          if (pointerTypeRef.current !== "mouse") {
            handleOpen(event);
          }
        }),
        onPointerDown: composeEventHandlers(triggerProps.onPointerDown, (event) => {
          pointerTypeRef.current = event.pointerType;
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId)) {
            target.releasePointerCapture(event.pointerId);
          }
          if (event.button === 0 && event.ctrlKey === false && event.pointerType === "mouse") {
            handleOpen(event);
            event.preventDefault();
          }
        }),
        onKeyDown: composeEventHandlers(triggerProps.onKeyDown, (event) => {
          const isTypingAhead = searchRef.current !== "";
          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
          if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);
          if (isTypingAhead && event.key === " ") return;
          if (OPEN_KEYS.includes(event.key)) {
            handleOpen();
            event.preventDefault();
          }
        })
      }
    ) });
  }
);
SelectTrigger.displayName = TRIGGER_NAME10;
var VALUE_NAME = "SelectValue";
var SelectValue = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, className, style, children, placeholder = "", ...valueProps } = props;
    const context = useSelectContext(VALUE_NAME, __scopeSelect);
    const { onValueNodeHasChildrenChange } = context;
    const hasChildren = children !== void 0;
    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);
    useLayoutEffect2(() => {
      onValueNodeHasChildrenChange(hasChildren);
    }, [onValueNodeHasChildrenChange, hasChildren]);
    return (0, import_jsx_runtime22.jsx)(
      Primitive.span,
      {
        ...valueProps,
        ref: composedRefs,
        style: { pointerEvents: "none" },
        children: shouldShowPlaceholder(context.value) ? (0, import_jsx_runtime22.jsx)(import_jsx_runtime22.Fragment, { children: placeholder }) : children
      }
    );
  }
);
SelectValue.displayName = VALUE_NAME;
var ICON_NAME = "SelectIcon";
var SelectIcon = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, children, ...iconProps } = props;
    return (0, import_jsx_runtime22.jsx)(Primitive.span, { "aria-hidden": true, ...iconProps, ref: forwardedRef, children: children || "▼" });
  }
);
SelectIcon.displayName = ICON_NAME;
var PORTAL_NAME6 = "SelectPortal";
var SelectPortal = (props) => {
  return (0, import_jsx_runtime22.jsx)(Portal, { asChild: true, ...props });
};
SelectPortal.displayName = PORTAL_NAME6;
var CONTENT_NAME9 = "SelectContent";
var SelectContent = React24.forwardRef(
  (props, forwardedRef) => {
    const context = useSelectContext(CONTENT_NAME9, props.__scopeSelect);
    const [fragment, setFragment] = React24.useState();
    useLayoutEffect2(() => {
      setFragment(new DocumentFragment());
    }, []);
    if (!context.open) {
      const frag = fragment;
      return frag ? ReactDOM2.createPortal(
        (0, import_jsx_runtime22.jsx)(SelectContentProvider, { scope: props.__scopeSelect, children: (0, import_jsx_runtime22.jsx)(Collection5.Slot, { scope: props.__scopeSelect, children: (0, import_jsx_runtime22.jsx)("div", { children: props.children }) }) }),
        frag
      ) : null;
    }
    return (0, import_jsx_runtime22.jsx)(SelectContentImpl, { ...props, ref: forwardedRef });
  }
);
SelectContent.displayName = CONTENT_NAME9;
var CONTENT_MARGIN = 10;
var [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME9);
var CONTENT_IMPL_NAME = "SelectContentImpl";
var Slot2 = createSlot("SelectContent.RemoveScroll");
var SelectContentImpl = React24.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSelect,
      position = "item-aligned",
      onCloseAutoFocus,
      onEscapeKeyDown,
      onPointerDownOutside,
      //
      // PopperContent props
      side,
      sideOffset,
      align,
      alignOffset,
      arrowPadding,
      collisionBoundary,
      collisionPadding,
      sticky,
      hideWhenDetached,
      avoidCollisions,
      //
      ...contentProps
    } = props;
    const context = useSelectContext(CONTENT_NAME9, __scopeSelect);
    const [content, setContent] = React24.useState(null);
    const [viewport, setViewport] = React24.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
    const [selectedItem, setSelectedItem] = React24.useState(null);
    const [selectedItemText, setSelectedItemText] = React24.useState(
      null
    );
    const getItems = useCollection5(__scopeSelect);
    const [isPositioned, setIsPositioned] = React24.useState(false);
    const firstValidItemFoundRef = React24.useRef(false);
    React24.useEffect(() => {
      if (content) return hideOthers(content);
    }, [content]);
    useFocusGuards();
    const focusFirst3 = React24.useCallback(
      (candidates) => {
        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);
        const [lastItem] = restItems.slice(-1);
        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
        for (const candidate of candidates) {
          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
          candidate?.scrollIntoView({ block: "nearest" });
          if (candidate === firstItem && viewport) viewport.scrollTop = 0;
          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;
          candidate?.focus();
          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
        }
      },
      [getItems, viewport]
    );
    const focusSelectedItem = React24.useCallback(
      () => focusFirst3([selectedItem, content]),
      [focusFirst3, selectedItem, content]
    );
    React24.useEffect(() => {
      if (isPositioned) {
        focusSelectedItem();
      }
    }, [isPositioned, focusSelectedItem]);
    const { onOpenChange, triggerPointerDownPosRef } = context;
    React24.useEffect(() => {
      if (content) {
        let pointerMoveDelta = { x: 0, y: 0 };
        const handlePointerMove = (event) => {
          pointerMoveDelta = {
            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),
            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0))
          };
        };
        const handlePointerUp = (event) => {
          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {
            event.preventDefault();
          } else {
            if (!content.contains(event.target)) {
              onOpenChange(false);
            }
          }
          document.removeEventListener("pointermove", handlePointerMove);
          triggerPointerDownPosRef.current = null;
        };
        if (triggerPointerDownPosRef.current !== null) {
          document.addEventListener("pointermove", handlePointerMove);
          document.addEventListener("pointerup", handlePointerUp, { capture: true, once: true });
        }
        return () => {
          document.removeEventListener("pointermove", handlePointerMove);
          document.removeEventListener("pointerup", handlePointerUp, { capture: true });
        };
      }
    }, [content, onOpenChange, triggerPointerDownPosRef]);
    React24.useEffect(() => {
      const close = () => onOpenChange(false);
      window.addEventListener("blur", close);
      window.addEventListener("resize", close);
      return () => {
        window.removeEventListener("blur", close);
        window.removeEventListener("resize", close);
      };
    }, [onOpenChange]);
    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem) {
        setTimeout(() => nextItem.ref.current.focus());
      }
    });
    const itemRefCallback = React24.useCallback(
      (node, value, disabled) => {
        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
        const isSelectedItem = context.value !== void 0 && context.value === value;
        if (isSelectedItem || isFirstValidItem) {
          setSelectedItem(node);
          if (isFirstValidItem) firstValidItemFoundRef.current = true;
        }
      },
      [context.value]
    );
    const handleItemLeave = React24.useCallback(() => content?.focus(), [content]);
    const itemTextRefCallback = React24.useCallback(
      (node, value, disabled) => {
        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
        const isSelectedItem = context.value !== void 0 && context.value === value;
        if (isSelectedItem || isFirstValidItem) {
          setSelectedItemText(node);
        }
      },
      [context.value]
    );
    const SelectPosition = position === "popper" ? SelectPopperPosition : SelectItemAlignedPosition;
    const popperContentProps = SelectPosition === SelectPopperPosition ? {
      side,
      sideOffset,
      align,
      alignOffset,
      arrowPadding,
      collisionBoundary,
      collisionPadding,
      sticky,
      hideWhenDetached,
      avoidCollisions
    } : {};
    return (0, import_jsx_runtime22.jsx)(
      SelectContentProvider,
      {
        scope: __scopeSelect,
        content,
        viewport,
        onViewportChange: setViewport,
        itemRefCallback,
        selectedItem,
        onItemLeave: handleItemLeave,
        itemTextRefCallback,
        focusSelectedItem,
        selectedItemText,
        position,
        isPositioned,
        searchRef,
        children: (0, import_jsx_runtime22.jsx)(Combination_default, { as: Slot2, allowPinchZoom: true, children: (0, import_jsx_runtime22.jsx)(
          FocusScope,
          {
            asChild: true,
            trapped: context.open,
            onMountAutoFocus: (event) => {
              event.preventDefault();
            },
            onUnmountAutoFocus: composeEventHandlers(onCloseAutoFocus, (event) => {
              context.trigger?.focus({ preventScroll: true });
              event.preventDefault();
            }),
            children: (0, import_jsx_runtime22.jsx)(
              DismissableLayer,
              {
                asChild: true,
                disableOutsidePointerEvents: true,
                onEscapeKeyDown,
                onPointerDownOutside,
                onFocusOutside: (event) => event.preventDefault(),
                onDismiss: () => context.onOpenChange(false),
                children: (0, import_jsx_runtime22.jsx)(
                  SelectPosition,
                  {
                    role: "listbox",
                    id: context.contentId,
                    "data-state": context.open ? "open" : "closed",
                    dir: context.dir,
                    onContextMenu: (event) => event.preventDefault(),
                    ...contentProps,
                    ...popperContentProps,
                    onPlaced: () => setIsPositioned(true),
                    ref: composedRefs,
                    style: {
                      // flex layout so we can place the scroll buttons properly
                      display: "flex",
                      flexDirection: "column",
                      // reset the outline by default as the content MAY get focused
                      outline: "none",
                      ...contentProps.style
                    },
                    onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {
                      const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                      if (event.key === "Tab") event.preventDefault();
                      if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);
                      if (["ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
                        const items = getItems().filter((item) => !item.disabled);
                        let candidateNodes = items.map((item) => item.ref.current);
                        if (["ArrowUp", "End"].includes(event.key)) {
                          candidateNodes = candidateNodes.slice().reverse();
                        }
                        if (["ArrowUp", "ArrowDown"].includes(event.key)) {
                          const currentElement = event.target;
                          const currentIndex = candidateNodes.indexOf(currentElement);
                          candidateNodes = candidateNodes.slice(currentIndex + 1);
                        }
                        setTimeout(() => focusFirst3(candidateNodes));
                        event.preventDefault();
                      }
                    })
                  }
                )
              }
            )
          }
        ) })
      }
    );
  }
);
SelectContentImpl.displayName = CONTENT_IMPL_NAME;
var ITEM_ALIGNED_POSITION_NAME = "SelectItemAlignedPosition";
var SelectItemAlignedPosition = React24.forwardRef((props, forwardedRef) => {
  const { __scopeSelect, onPlaced, ...popperProps } = props;
  const context = useSelectContext(CONTENT_NAME9, __scopeSelect);
  const contentContext = useSelectContentContext(CONTENT_NAME9, __scopeSelect);
  const [contentWrapper, setContentWrapper] = React24.useState(null);
  const [content, setContent] = React24.useState(null);
  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
  const getItems = useCollection5(__scopeSelect);
  const shouldExpandOnScrollRef = React24.useRef(false);
  const shouldRepositionRef = React24.useRef(true);
  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;
  const position = React24.useCallback(() => {
    if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {
      const triggerRect = context.trigger.getBoundingClientRect();
      const contentRect = content.getBoundingClientRect();
      const valueNodeRect = context.valueNode.getBoundingClientRect();
      const itemTextRect = selectedItemText.getBoundingClientRect();
      if (context.dir !== "rtl") {
        const itemTextOffset = itemTextRect.left - contentRect.left;
        const left = valueNodeRect.left - itemTextOffset;
        const leftDelta = triggerRect.left - left;
        const minContentWidth = triggerRect.width + leftDelta;
        const contentWidth = Math.max(minContentWidth, contentRect.width);
        const rightEdge = window.innerWidth - CONTENT_MARGIN;
        const clampedLeft = clamp(left, [
          CONTENT_MARGIN,
          // Prevents the content from going off the starting edge of the
          // viewport. It may still go off the ending edge, but this can be
          // controlled by the user since they may want to manage overflow in a
          // specific way.
          // https://github.com/radix-ui/primitives/issues/2049
          Math.max(CONTENT_MARGIN, rightEdge - contentWidth)
        ]);
        contentWrapper.style.minWidth = minContentWidth + "px";
        contentWrapper.style.left = clampedLeft + "px";
      } else {
        const itemTextOffset = contentRect.right - itemTextRect.right;
        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;
        const rightDelta = window.innerWidth - triggerRect.right - right;
        const minContentWidth = triggerRect.width + rightDelta;
        const contentWidth = Math.max(minContentWidth, contentRect.width);
        const leftEdge = window.innerWidth - CONTENT_MARGIN;
        const clampedRight = clamp(right, [
          CONTENT_MARGIN,
          Math.max(CONTENT_MARGIN, leftEdge - contentWidth)
        ]);
        contentWrapper.style.minWidth = minContentWidth + "px";
        contentWrapper.style.right = clampedRight + "px";
      }
      const items = getItems();
      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
      const itemsHeight = viewport.scrollHeight;
      const contentStyles = window.getComputedStyle(content);
      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);
      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);
      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);
      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);
      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;
      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);
      const viewportStyles = window.getComputedStyle(viewport);
      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);
      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);
      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;
      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;
      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;
      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;
      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;
      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;
      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;
      if (willAlignWithoutTopOverflow) {
        const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;
        contentWrapper.style.bottom = "0px";
        const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;
        const clampedTriggerMiddleToBottomEdge = Math.max(
          triggerMiddleToBottomEdge,
          selectedItemHalfHeight + // viewport might have padding bottom, include it to avoid a scrollable viewport
          (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth
        );
        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;
        contentWrapper.style.height = height + "px";
      } else {
        const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;
        contentWrapper.style.top = "0px";
        const clampedTopEdgeToTriggerMiddle = Math.max(
          topEdgeToTriggerMiddle,
          contentBorderTopWidth + viewport.offsetTop + // viewport might have padding top, include it to avoid a scrollable viewport
          (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight
        );
        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;
        contentWrapper.style.height = height + "px";
        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;
      }
      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;
      contentWrapper.style.minHeight = minContentHeight + "px";
      contentWrapper.style.maxHeight = availableHeight + "px";
      onPlaced?.();
      requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);
    }
  }, [
    getItems,
    context.trigger,
    context.valueNode,
    contentWrapper,
    content,
    viewport,
    selectedItem,
    selectedItemText,
    context.dir,
    onPlaced
  ]);
  useLayoutEffect2(() => position(), [position]);
  const [contentZIndex, setContentZIndex] = React24.useState();
  useLayoutEffect2(() => {
    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [content]);
  const handleScrollButtonChange = React24.useCallback(
    (node) => {
      if (node && shouldRepositionRef.current === true) {
        position();
        focusSelectedItem?.();
        shouldRepositionRef.current = false;
      }
    },
    [position, focusSelectedItem]
  );
  return (0, import_jsx_runtime22.jsx)(
    SelectViewportProvider,
    {
      scope: __scopeSelect,
      contentWrapper,
      shouldExpandOnScrollRef,
      onScrollButtonChange: handleScrollButtonChange,
      children: (0, import_jsx_runtime22.jsx)(
        "div",
        {
          ref: setContentWrapper,
          style: {
            display: "flex",
            flexDirection: "column",
            position: "fixed",
            zIndex: contentZIndex
          },
          children: (0, import_jsx_runtime22.jsx)(
            Primitive.div,
            {
              ...popperProps,
              ref: composedRefs,
              style: {
                // When we get the height of the content, it includes borders. If we were to set
                // the height without having `boxSizing: 'border-box'` it would be too big.
                boxSizing: "border-box",
                // We need to ensure the content doesn't get taller than the wrapper
                maxHeight: "100%",
                ...popperProps.style
              }
            }
          )
        }
      )
    }
  );
});
SelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;
var POPPER_POSITION_NAME = "SelectPopperPosition";
var SelectPopperPosition = React24.forwardRef((props, forwardedRef) => {
  const {
    __scopeSelect,
    align = "start",
    collisionPadding = CONTENT_MARGIN,
    ...popperProps
  } = props;
  const popperScope = usePopperScope3(__scopeSelect);
  return (0, import_jsx_runtime22.jsx)(
    Content2,
    {
      ...popperScope,
      ...popperProps,
      ref: forwardedRef,
      align,
      collisionPadding,
      style: {
        // Ensure border-box for floating-ui calculations
        boxSizing: "border-box",
        ...popperProps.style,
        // re-namespace exposed content custom properties
        ...{
          "--radix-select-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-select-content-available-width": "var(--radix-popper-available-width)",
          "--radix-select-content-available-height": "var(--radix-popper-available-height)",
          "--radix-select-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-select-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    }
  );
});
SelectPopperPosition.displayName = POPPER_POSITION_NAME;
var [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME9, {});
var VIEWPORT_NAME3 = "SelectViewport";
var SelectViewport = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, nonce, ...viewportProps } = props;
    const contentContext = useSelectContentContext(VIEWPORT_NAME3, __scopeSelect);
    const viewportContext = useSelectViewportContext(VIEWPORT_NAME3, __scopeSelect);
    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);
    const prevScrollTopRef = React24.useRef(0);
    return (0, import_jsx_runtime22.jsxs)(import_jsx_runtime22.Fragment, { children: [
      (0, import_jsx_runtime22.jsx)(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`
          },
          nonce
        }
      ),
      (0, import_jsx_runtime22.jsx)(Collection5.Slot, { scope: __scopeSelect, children: (0, import_jsx_runtime22.jsx)(
        Primitive.div,
        {
          "data-radix-select-viewport": "",
          role: "presentation",
          ...viewportProps,
          ref: composedRefs,
          style: {
            // we use position: 'relative' here on the `viewport` so that when we call
            // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport
            // (independent of the scrollUpButton).
            position: "relative",
            flex: 1,
            // Viewport should only be scrollable in the vertical direction.
            // This won't work in vertical writing modes, so we'll need to
            // revisit this if/when that is supported
            // https://developer.chrome.com/blog/vertical-form-controls
            overflow: "hidden auto",
            ...viewportProps.style
          },
          onScroll: composeEventHandlers(viewportProps.onScroll, (event) => {
            const viewport = event.currentTarget;
            const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;
            if (shouldExpandOnScrollRef?.current && contentWrapper) {
              const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);
              if (scrolledBy > 0) {
                const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
                const cssMinHeight = parseFloat(contentWrapper.style.minHeight);
                const cssHeight = parseFloat(contentWrapper.style.height);
                const prevHeight = Math.max(cssMinHeight, cssHeight);
                if (prevHeight < availableHeight) {
                  const nextHeight = prevHeight + scrolledBy;
                  const clampedNextHeight = Math.min(availableHeight, nextHeight);
                  const heightDiff = nextHeight - clampedNextHeight;
                  contentWrapper.style.height = clampedNextHeight + "px";
                  if (contentWrapper.style.bottom === "0px") {
                    viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;
                    contentWrapper.style.justifyContent = "flex-end";
                  }
                }
              }
            }
            prevScrollTopRef.current = viewport.scrollTop;
          })
        }
      ) })
    ] });
  }
);
SelectViewport.displayName = VIEWPORT_NAME3;
var GROUP_NAME3 = "SelectGroup";
var [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME3);
var SelectGroup = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...groupProps } = props;
    const groupId = useId();
    return (0, import_jsx_runtime22.jsx)(SelectGroupContextProvider, { scope: __scopeSelect, id: groupId, children: (0, import_jsx_runtime22.jsx)(Primitive.div, { role: "group", "aria-labelledby": groupId, ...groupProps, ref: forwardedRef }) });
  }
);
SelectGroup.displayName = GROUP_NAME3;
var LABEL_NAME4 = "SelectLabel";
var SelectLabel = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...labelProps } = props;
    const groupContext = useSelectGroupContext(LABEL_NAME4, __scopeSelect);
    return (0, import_jsx_runtime22.jsx)(Primitive.div, { id: groupContext.id, ...labelProps, ref: forwardedRef });
  }
);
SelectLabel.displayName = LABEL_NAME4;
var ITEM_NAME6 = "SelectItem";
var [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME6);
var SelectItem = React24.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSelect,
      value,
      disabled = false,
      textValue: textValueProp,
      ...itemProps
    } = props;
    const context = useSelectContext(ITEM_NAME6, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_NAME6, __scopeSelect);
    const isSelected = context.value === value;
    const [textValue, setTextValue] = React24.useState(textValueProp ?? "");
    const [isFocused, setIsFocused] = React24.useState(false);
    const composedRefs = useComposedRefs(
      forwardedRef,
      (node) => contentContext.itemRefCallback?.(node, value, disabled)
    );
    const textId = useId();
    const pointerTypeRef = React24.useRef("touch");
    const handleSelect = () => {
      if (!disabled) {
        context.onValueChange(value);
        context.onOpenChange(false);
      }
    };
    if (value === "") {
      throw new Error(
        "A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder."
      );
    }
    return (0, import_jsx_runtime22.jsx)(
      SelectItemContextProvider,
      {
        scope: __scopeSelect,
        value,
        disabled,
        textId,
        isSelected,
        onItemTextChange: React24.useCallback((node) => {
          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? "").trim());
        }, []),
        children: (0, import_jsx_runtime22.jsx)(
          Collection5.ItemSlot,
          {
            scope: __scopeSelect,
            value,
            disabled,
            textValue,
            children: (0, import_jsx_runtime22.jsx)(
              Primitive.div,
              {
                role: "option",
                "aria-labelledby": textId,
                "data-highlighted": isFocused ? "" : void 0,
                "aria-selected": isSelected && isFocused,
                "data-state": isSelected ? "checked" : "unchecked",
                "aria-disabled": disabled || void 0,
                "data-disabled": disabled ? "" : void 0,
                tabIndex: disabled ? void 0 : -1,
                ...itemProps,
                ref: composedRefs,
                onFocus: composeEventHandlers(itemProps.onFocus, () => setIsFocused(true)),
                onBlur: composeEventHandlers(itemProps.onBlur, () => setIsFocused(false)),
                onClick: composeEventHandlers(itemProps.onClick, () => {
                  if (pointerTypeRef.current !== "mouse") handleSelect();
                }),
                onPointerUp: composeEventHandlers(itemProps.onPointerUp, () => {
                  if (pointerTypeRef.current === "mouse") handleSelect();
                }),
                onPointerDown: composeEventHandlers(itemProps.onPointerDown, (event) => {
                  pointerTypeRef.current = event.pointerType;
                }),
                onPointerMove: composeEventHandlers(itemProps.onPointerMove, (event) => {
                  pointerTypeRef.current = event.pointerType;
                  if (disabled) {
                    contentContext.onItemLeave?.();
                  } else if (pointerTypeRef.current === "mouse") {
                    event.currentTarget.focus({ preventScroll: true });
                  }
                }),
                onPointerLeave: composeEventHandlers(itemProps.onPointerLeave, (event) => {
                  if (event.currentTarget === document.activeElement) {
                    contentContext.onItemLeave?.();
                  }
                }),
                onKeyDown: composeEventHandlers(itemProps.onKeyDown, (event) => {
                  const isTypingAhead = contentContext.searchRef?.current !== "";
                  if (isTypingAhead && event.key === " ") return;
                  if (SELECTION_KEYS.includes(event.key)) handleSelect();
                  if (event.key === " ") event.preventDefault();
                })
              }
            )
          }
        )
      }
    );
  }
);
SelectItem.displayName = ITEM_NAME6;
var ITEM_TEXT_NAME = "SelectItemText";
var SelectItemText = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, className, style, ...itemTextProps } = props;
    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);
    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);
    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);
    const [itemTextNode, setItemTextNode] = React24.useState(null);
    const composedRefs = useComposedRefs(
      forwardedRef,
      (node) => setItemTextNode(node),
      itemContext.onItemTextChange,
      (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)
    );
    const textContent = itemTextNode?.textContent;
    const nativeOption = React24.useMemo(
      () => (0, import_jsx_runtime22.jsx)("option", { value: itemContext.value, disabled: itemContext.disabled, children: textContent }, itemContext.value),
      [itemContext.disabled, itemContext.value, textContent]
    );
    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;
    useLayoutEffect2(() => {
      onNativeOptionAdd(nativeOption);
      return () => onNativeOptionRemove(nativeOption);
    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);
    return (0, import_jsx_runtime22.jsxs)(import_jsx_runtime22.Fragment, { children: [
      (0, import_jsx_runtime22.jsx)(Primitive.span, { id: itemContext.textId, ...itemTextProps, ref: composedRefs }),
      itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? ReactDOM2.createPortal(itemTextProps.children, context.valueNode) : null
    ] });
  }
);
SelectItemText.displayName = ITEM_TEXT_NAME;
var ITEM_INDICATOR_NAME = "SelectItemIndicator";
var SelectItemIndicator = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...itemIndicatorProps } = props;
    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
    return itemContext.isSelected ? (0, import_jsx_runtime22.jsx)(Primitive.span, { "aria-hidden": true, ...itemIndicatorProps, ref: forwardedRef }) : null;
  }
);
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
var SelectScrollUpButton = React24.forwardRef((props, forwardedRef) => {
  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
  const [canScrollUp, setCanScrollUp] = React24.useState(false);
  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
  useLayoutEffect2(() => {
    if (contentContext.viewport && contentContext.isPositioned) {
      let handleScroll2 = function() {
        const canScrollUp2 = viewport.scrollTop > 0;
        setCanScrollUp(canScrollUp2);
      };
      var handleScroll = handleScroll2;
      const viewport = contentContext.viewport;
      handleScroll2();
      viewport.addEventListener("scroll", handleScroll2);
      return () => viewport.removeEventListener("scroll", handleScroll2);
    }
  }, [contentContext.viewport, contentContext.isPositioned]);
  return canScrollUp ? (0, import_jsx_runtime22.jsx)(
    SelectScrollButtonImpl,
    {
      ...props,
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem) {
          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;
        }
      }
    }
  ) : null;
});
SelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;
var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
var SelectScrollDownButton = React24.forwardRef((props, forwardedRef) => {
  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
  const [canScrollDown, setCanScrollDown] = React24.useState(false);
  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
  useLayoutEffect2(() => {
    if (contentContext.viewport && contentContext.isPositioned) {
      let handleScroll2 = function() {
        const maxScroll = viewport.scrollHeight - viewport.clientHeight;
        const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;
        setCanScrollDown(canScrollDown2);
      };
      var handleScroll = handleScroll2;
      const viewport = contentContext.viewport;
      handleScroll2();
      viewport.addEventListener("scroll", handleScroll2);
      return () => viewport.removeEventListener("scroll", handleScroll2);
    }
  }, [contentContext.viewport, contentContext.isPositioned]);
  return canScrollDown ? (0, import_jsx_runtime22.jsx)(
    SelectScrollButtonImpl,
    {
      ...props,
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem) {
          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;
        }
      }
    }
  ) : null;
});
SelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;
var SelectScrollButtonImpl = React24.forwardRef((props, forwardedRef) => {
  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;
  const contentContext = useSelectContentContext("SelectScrollButton", __scopeSelect);
  const autoScrollTimerRef = React24.useRef(null);
  const getItems = useCollection5(__scopeSelect);
  const clearAutoScrollTimer = React24.useCallback(() => {
    if (autoScrollTimerRef.current !== null) {
      window.clearInterval(autoScrollTimerRef.current);
      autoScrollTimerRef.current = null;
    }
  }, []);
  React24.useEffect(() => {
    return () => clearAutoScrollTimer();
  }, [clearAutoScrollTimer]);
  useLayoutEffect2(() => {
    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);
    activeItem?.ref.current?.scrollIntoView({ block: "nearest" });
  }, [getItems]);
  return (0, import_jsx_runtime22.jsx)(
    Primitive.div,
    {
      "aria-hidden": true,
      ...scrollIndicatorProps,
      ref: forwardedRef,
      style: { flexShrink: 0, ...scrollIndicatorProps.style },
      onPointerDown: composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {
        if (autoScrollTimerRef.current === null) {
          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
        }
      }),
      onPointerMove: composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {
        contentContext.onItemLeave?.();
        if (autoScrollTimerRef.current === null) {
          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
        }
      }),
      onPointerLeave: composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {
        clearAutoScrollTimer();
      })
    }
  );
});
var SEPARATOR_NAME3 = "SelectSeparator";
var SelectSeparator = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...separatorProps } = props;
    return (0, import_jsx_runtime22.jsx)(Primitive.div, { "aria-hidden": true, ...separatorProps, ref: forwardedRef });
  }
);
SelectSeparator.displayName = SEPARATOR_NAME3;
var ARROW_NAME5 = "SelectArrow";
var SelectArrow = React24.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...arrowProps } = props;
    const popperScope = usePopperScope3(__scopeSelect);
    const context = useSelectContext(ARROW_NAME5, __scopeSelect);
    const contentContext = useSelectContentContext(ARROW_NAME5, __scopeSelect);
    return context.open && contentContext.position === "popper" ? (0, import_jsx_runtime22.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef }) : null;
  }
);
SelectArrow.displayName = ARROW_NAME5;
var BUBBLE_INPUT_NAME3 = "SelectBubbleInput";
var SelectBubbleInput = React24.forwardRef(
  ({ __scopeSelect, value, ...props }, forwardedRef) => {
    const ref = React24.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const prevValue = usePrevious(value);
    React24.useEffect(() => {
      const select = ref.current;
      if (!select) return;
      const selectProto = window.HTMLSelectElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        selectProto,
        "value"
      );
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("change", { bubbles: true });
        setValue.call(select, value);
        select.dispatchEvent(event);
      }
    }, [prevValue, value]);
    return (0, import_jsx_runtime22.jsx)(
      Primitive.select,
      {
        ...props,
        style: { ...VISUALLY_HIDDEN_STYLES, ...props.style },
        ref: composedRefs,
        defaultValue: value
      }
    );
  }
);
SelectBubbleInput.displayName = BUBBLE_INPUT_NAME3;
function shouldShowPlaceholder(value) {
  return value === "" || value === void 0;
}
function useTypeaheadSearch(onSearchChange) {
  const handleSearchChange = useCallbackRef(onSearchChange);
  const searchRef = React24.useRef("");
  const timerRef = React24.useRef(0);
  const handleTypeaheadSearch = React24.useCallback(
    (key) => {
      const search = searchRef.current + key;
      handleSearchChange(search);
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "") timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
      })(search);
    },
    [handleSearchChange]
  );
  const resetTypeahead = React24.useCallback(() => {
    searchRef.current = "";
    window.clearTimeout(timerRef.current);
  }, []);
  React24.useEffect(() => {
    return () => window.clearTimeout(timerRef.current);
  }, []);
  return [searchRef, handleTypeaheadSearch, resetTypeahead];
}
function findNextItem(items, search, currentItem) {
  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;
  let wrappedItems = wrapArray2(items, Math.max(currentItemIndex, 0));
  const excludeCurrentItem = normalizedSearch.length === 1;
  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v11) => v11 !== currentItem);
  const nextItem = wrappedItems.find(
    (item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())
  );
  return nextItem !== currentItem ? nextItem : void 0;
}
function wrapArray2(array, startIndex) {
  return array.map((_, index) => array[(startIndex + index) % array.length]);
}
var Root210 = Select;
var Trigger7 = SelectTrigger;
var Value = SelectValue;
var Icon = SelectIcon;
var Portal6 = SelectPortal;
var Content27 = SelectContent;
var Viewport3 = SelectViewport;
var Group3 = SelectGroup;
var Label4 = SelectLabel;
var Item4 = SelectItem;
var ItemText = SelectItemText;
var ItemIndicator3 = SelectItemIndicator;
var ScrollUpButton = SelectScrollUpButton;
var ScrollDownButton = SelectScrollDownButton;
var Separator3 = SelectSeparator;
var Arrow25 = SelectArrow;

// node_modules/@radix-ui/react-separator/dist/index.mjs
var React25 = __toESM(require_react(), 1);
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var NAME5 = "Separator";
var DEFAULT_ORIENTATION = "horizontal";
var ORIENTATIONS = ["horizontal", "vertical"];
var Separator4 = React25.forwardRef((props, forwardedRef) => {
  const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;
  const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;
  const ariaOrientation = orientation === "vertical" ? orientation : void 0;
  const semanticProps = decorative ? { role: "none" } : { "aria-orientation": ariaOrientation, role: "separator" };
  return (0, import_jsx_runtime23.jsx)(
    Primitive.div,
    {
      "data-orientation": orientation,
      ...semanticProps,
      ...domProps,
      ref: forwardedRef
    }
  );
});
Separator4.displayName = NAME5;
function isValidOrientation(orientation) {
  return ORIENTATIONS.includes(orientation);
}
var Root11 = Separator4;

// node_modules/@radix-ui/react-slider/dist/index.mjs
var dist_exports26 = {};
__export(dist_exports26, {
  Range: () => Range,
  Root: () => Root12,
  Slider: () => Slider,
  SliderRange: () => SliderRange,
  SliderThumb: () => SliderThumb,
  SliderTrack: () => SliderTrack,
  Thumb: () => Thumb2,
  Track: () => Track,
  createSliderScope: () => createSliderScope
});
var React26 = __toESM(require_react(), 1);
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var PAGE_KEYS = ["PageUp", "PageDown"];
var ARROW_KEYS3 = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var BACK_KEYS = {
  "from-left": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
  "from-right": ["Home", "PageDown", "ArrowDown", "ArrowRight"],
  "from-bottom": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
  "from-top": ["Home", "PageDown", "ArrowUp", "ArrowLeft"]
};
var SLIDER_NAME = "Slider";
var [Collection6, useCollection6, createCollectionScope6] = createCollection(SLIDER_NAME);
var [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME, [
  createCollectionScope6
]);
var [SliderProvider, useSliderContext] = createSliderContext(SLIDER_NAME);
var Slider = React26.forwardRef(
  (props, forwardedRef) => {
    const {
      name,
      min = 0,
      max = 100,
      step = 1,
      orientation = "horizontal",
      disabled = false,
      minStepsBetweenThumbs = 0,
      defaultValue = [min],
      value,
      onValueChange = () => {
      },
      onValueCommit = () => {
      },
      inverted = false,
      form,
      ...sliderProps
    } = props;
    const thumbRefs = React26.useRef(/* @__PURE__ */ new Set());
    const valueIndexToChangeRef = React26.useRef(0);
    const isHorizontal = orientation === "horizontal";
    const SliderOrientation = isHorizontal ? SliderHorizontal : SliderVertical;
    const [values = [], setValues] = useControllableState({
      prop: value,
      defaultProp: defaultValue,
      onChange: (value2) => {
        const thumbs = [...thumbRefs.current];
        thumbs[valueIndexToChangeRef.current]?.focus();
        onValueChange(value2);
      }
    });
    const valuesBeforeSlideStartRef = React26.useRef(values);
    function handleSlideStart(value2) {
      const closestIndex = getClosestValueIndex(values, value2);
      updateValues(value2, closestIndex);
    }
    function handleSlideMove(value2) {
      updateValues(value2, valueIndexToChangeRef.current);
    }
    function handleSlideEnd() {
      const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
      const nextValue = values[valueIndexToChangeRef.current];
      const hasChanged = nextValue !== prevValue;
      if (hasChanged) onValueCommit(values);
    }
    function updateValues(value2, atIndex, { commit } = { commit: false }) {
      const decimalCount = getDecimalCount(step);
      const snapToStep = roundValue(Math.round((value2 - min) / step) * step + min, decimalCount);
      const nextValue = clamp(snapToStep, [min, max]);
      setValues((prevValues = []) => {
        const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);
        if (hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
          valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
          const hasChanged = String(nextValues) !== String(prevValues);
          if (hasChanged && commit) onValueCommit(nextValues);
          return hasChanged ? nextValues : prevValues;
        } else {
          return prevValues;
        }
      });
    }
    return (0, import_jsx_runtime24.jsx)(
      SliderProvider,
      {
        scope: props.__scopeSlider,
        name,
        disabled,
        min,
        max,
        valueIndexToChangeRef,
        thumbs: thumbRefs.current,
        values,
        orientation,
        form,
        children: (0, import_jsx_runtime24.jsx)(Collection6.Provider, { scope: props.__scopeSlider, children: (0, import_jsx_runtime24.jsx)(Collection6.Slot, { scope: props.__scopeSlider, children: (0, import_jsx_runtime24.jsx)(
          SliderOrientation,
          {
            "aria-disabled": disabled,
            "data-disabled": disabled ? "" : void 0,
            ...sliderProps,
            ref: forwardedRef,
            onPointerDown: composeEventHandlers(sliderProps.onPointerDown, () => {
              if (!disabled) valuesBeforeSlideStartRef.current = values;
            }),
            min,
            max,
            inverted,
            onSlideStart: disabled ? void 0 : handleSlideStart,
            onSlideMove: disabled ? void 0 : handleSlideMove,
            onSlideEnd: disabled ? void 0 : handleSlideEnd,
            onHomeKeyDown: () => !disabled && updateValues(min, 0, { commit: true }),
            onEndKeyDown: () => !disabled && updateValues(max, values.length - 1, { commit: true }),
            onStepKeyDown: ({ event, direction: stepDirection }) => {
              if (!disabled) {
                const isPageKey = PAGE_KEYS.includes(event.key);
                const isSkipKey = isPageKey || event.shiftKey && ARROW_KEYS3.includes(event.key);
                const multiplier = isSkipKey ? 10 : 1;
                const atIndex = valueIndexToChangeRef.current;
                const value2 = values[atIndex];
                const stepInDirection = step * multiplier * stepDirection;
                updateValues(value2 + stepInDirection, atIndex, { commit: true });
              }
            }
          }
        ) }) })
      }
    );
  }
);
Slider.displayName = SLIDER_NAME;
var [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {
  startEdge: "left",
  endEdge: "right",
  size: "width",
  direction: 1
});
var SliderHorizontal = React26.forwardRef(
  (props, forwardedRef) => {
    const {
      min,
      max,
      dir,
      inverted,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const [slider, setSlider] = React26.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setSlider(node));
    const rectRef = React26.useRef(void 0);
    const direction = useDirection(dir);
    const isDirectionLTR = direction === "ltr";
    const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || slider.getBoundingClientRect();
      const input = [0, rect.width];
      const output = isSlidingFromLeft ? [min, max] : [max, min];
      const value = linearScale2(input, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.left);
    }
    return (0, import_jsx_runtime24.jsx)(
      SliderOrientationProvider,
      {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromLeft ? "left" : "right",
        endEdge: isSlidingFromLeft ? "right" : "left",
        direction: isSlidingFromLeft ? 1 : -1,
        size: "width",
        children: (0, import_jsx_runtime24.jsx)(
          SliderImpl,
          {
            dir: direction,
            "data-orientation": "horizontal",
            ...sliderProps,
            ref: composedRefs,
            style: {
              ...sliderProps.style,
              ["--radix-slider-thumb-transform"]: "translateX(-50%)"
            },
            onSlideStart: (event) => {
              const value = getValueFromPointer(event.clientX);
              onSlideStart?.(value);
            },
            onSlideMove: (event) => {
              const value = getValueFromPointer(event.clientX);
              onSlideMove?.(value);
            },
            onSlideEnd: () => {
              rectRef.current = void 0;
              onSlideEnd?.();
            },
            onStepKeyDown: (event) => {
              const slideDirection = isSlidingFromLeft ? "from-left" : "from-right";
              const isBackKey = BACK_KEYS[slideDirection].includes(event.key);
              onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });
            }
          }
        )
      }
    );
  }
);
var SliderVertical = React26.forwardRef(
  (props, forwardedRef) => {
    const {
      min,
      max,
      inverted,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const sliderRef = React26.useRef(null);
    const ref = useComposedRefs(forwardedRef, sliderRef);
    const rectRef = React26.useRef(void 0);
    const isSlidingFromBottom = !inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
      const input = [0, rect.height];
      const output = isSlidingFromBottom ? [max, min] : [min, max];
      const value = linearScale2(input, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.top);
    }
    return (0, import_jsx_runtime24.jsx)(
      SliderOrientationProvider,
      {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromBottom ? "bottom" : "top",
        endEdge: isSlidingFromBottom ? "top" : "bottom",
        size: "height",
        direction: isSlidingFromBottom ? 1 : -1,
        children: (0, import_jsx_runtime24.jsx)(
          SliderImpl,
          {
            "data-orientation": "vertical",
            ...sliderProps,
            ref,
            style: {
              ...sliderProps.style,
              ["--radix-slider-thumb-transform"]: "translateY(50%)"
            },
            onSlideStart: (event) => {
              const value = getValueFromPointer(event.clientY);
              onSlideStart?.(value);
            },
            onSlideMove: (event) => {
              const value = getValueFromPointer(event.clientY);
              onSlideMove?.(value);
            },
            onSlideEnd: () => {
              rectRef.current = void 0;
              onSlideEnd?.();
            },
            onStepKeyDown: (event) => {
              const slideDirection = isSlidingFromBottom ? "from-bottom" : "from-top";
              const isBackKey = BACK_KEYS[slideDirection].includes(event.key);
              onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });
            }
          }
        )
      }
    );
  }
);
var SliderImpl = React26.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSlider,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onHomeKeyDown,
      onEndKeyDown,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const context = useSliderContext(SLIDER_NAME, __scopeSlider);
    return (0, import_jsx_runtime24.jsx)(
      Primitive.span,
      {
        ...sliderProps,
        ref: forwardedRef,
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          if (event.key === "Home") {
            onHomeKeyDown(event);
            event.preventDefault();
          } else if (event.key === "End") {
            onEndKeyDown(event);
            event.preventDefault();
          } else if (PAGE_KEYS.concat(ARROW_KEYS3).includes(event.key)) {
            onStepKeyDown(event);
            event.preventDefault();
          }
        }),
        onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
          const target = event.target;
          target.setPointerCapture(event.pointerId);
          event.preventDefault();
          if (context.thumbs.has(target)) {
            target.focus();
          } else {
            onSlideStart(event);
          }
        }),
        onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId)) onSlideMove(event);
        }),
        onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId)) {
            target.releasePointerCapture(event.pointerId);
            onSlideEnd(event);
          }
        })
      }
    );
  }
);
var TRACK_NAME = "SliderTrack";
var SliderTrack = React26.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, ...trackProps } = props;
    const context = useSliderContext(TRACK_NAME, __scopeSlider);
    return (0, import_jsx_runtime24.jsx)(
      Primitive.span,
      {
        "data-disabled": context.disabled ? "" : void 0,
        "data-orientation": context.orientation,
        ...trackProps,
        ref: forwardedRef
      }
    );
  }
);
SliderTrack.displayName = TRACK_NAME;
var RANGE_NAME = "SliderRange";
var SliderRange = React26.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, ...rangeProps } = props;
    const context = useSliderContext(RANGE_NAME, __scopeSlider);
    const orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider);
    const ref = React26.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const valuesCount = context.values.length;
    const percentages = context.values.map(
      (value) => convertValueToPercentage(value, context.min, context.max)
    );
    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
    const offsetEnd = 100 - Math.max(...percentages);
    return (0, import_jsx_runtime24.jsx)(
      Primitive.span,
      {
        "data-orientation": context.orientation,
        "data-disabled": context.disabled ? "" : void 0,
        ...rangeProps,
        ref: composedRefs,
        style: {
          ...props.style,
          [orientation.startEdge]: offsetStart + "%",
          [orientation.endEdge]: offsetEnd + "%"
        }
      }
    );
  }
);
SliderRange.displayName = RANGE_NAME;
var THUMB_NAME2 = "SliderThumb";
var SliderThumb = React26.forwardRef(
  (props, forwardedRef) => {
    const getItems = useCollection6(props.__scopeSlider);
    const [thumb, setThumb] = React26.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
    const index = React26.useMemo(
      () => thumb ? getItems().findIndex((item) => item.ref.current === thumb) : -1,
      [getItems, thumb]
    );
    return (0, import_jsx_runtime24.jsx)(SliderThumbImpl, { ...props, ref: composedRefs, index });
  }
);
var SliderThumbImpl = React26.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, index, name, ...thumbProps } = props;
    const context = useSliderContext(THUMB_NAME2, __scopeSlider);
    const orientation = useSliderOrientationContext(THUMB_NAME2, __scopeSlider);
    const [thumb, setThumb] = React26.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
    const isFormControl2 = thumb ? context.form || !!thumb.closest("form") : true;
    const size = useSize(thumb);
    const value = context.values[index];
    const percent = value === void 0 ? 0 : convertValueToPercentage(value, context.min, context.max);
    const label = getLabel(index, context.values.length);
    const orientationSize = size?.[orientation.size];
    const thumbInBoundsOffset = orientationSize ? getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
    React26.useEffect(() => {
      if (thumb) {
        context.thumbs.add(thumb);
        return () => {
          context.thumbs.delete(thumb);
        };
      }
    }, [thumb, context.thumbs]);
    return (0, import_jsx_runtime24.jsxs)(
      "span",
      {
        style: {
          transform: "var(--radix-slider-thumb-transform)",
          position: "absolute",
          [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
        },
        children: [
          (0, import_jsx_runtime24.jsx)(Collection6.ItemSlot, { scope: props.__scopeSlider, children: (0, import_jsx_runtime24.jsx)(
            Primitive.span,
            {
              role: "slider",
              "aria-label": props["aria-label"] || label,
              "aria-valuemin": context.min,
              "aria-valuenow": value,
              "aria-valuemax": context.max,
              "aria-orientation": context.orientation,
              "data-orientation": context.orientation,
              "data-disabled": context.disabled ? "" : void 0,
              tabIndex: context.disabled ? void 0 : 0,
              ...thumbProps,
              ref: composedRefs,
              style: value === void 0 ? { display: "none" } : props.style,
              onFocus: composeEventHandlers(props.onFocus, () => {
                context.valueIndexToChangeRef.current = index;
              })
            }
          ) }),
          isFormControl2 && (0, import_jsx_runtime24.jsx)(
            SliderBubbleInput,
            {
              name: name ?? (context.name ? context.name + (context.values.length > 1 ? "[]" : "") : void 0),
              form: context.form,
              value
            },
            index
          )
        ]
      }
    );
  }
);
SliderThumb.displayName = THUMB_NAME2;
var BUBBLE_INPUT_NAME4 = "RadioBubbleInput";
var SliderBubbleInput = React26.forwardRef(
  ({ __scopeSlider, value, ...props }, forwardedRef) => {
    const ref = React26.useRef(null);
    const composedRefs = useComposedRefs(ref, forwardedRef);
    const prevValue = usePrevious(value);
    React26.useEffect(() => {
      const input = ref.current;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "value");
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("input", { bubbles: true });
        setValue.call(input, value);
        input.dispatchEvent(event);
      }
    }, [prevValue, value]);
    return (0, import_jsx_runtime24.jsx)(
      Primitive.input,
      {
        style: { display: "none" },
        ...props,
        ref: composedRefs,
        defaultValue: value
      }
    );
  }
);
SliderBubbleInput.displayName = BUBBLE_INPUT_NAME4;
function getNextSortedValues(prevValues = [], nextValue, atIndex) {
  const nextValues = [...prevValues];
  nextValues[atIndex] = nextValue;
  return nextValues.sort((a39, b6) => a39 - b6);
}
function convertValueToPercentage(value, min, max) {
  const maxSteps = max - min;
  const percentPerStep = 100 / maxSteps;
  const percentage = percentPerStep * (value - min);
  return clamp(percentage, [0, 100]);
}
function getLabel(index, totalValues) {
  if (totalValues > 2) {
    return `Value ${index + 1} of ${totalValues}`;
  } else if (totalValues === 2) {
    return ["Minimum", "Maximum"][index];
  } else {
    return void 0;
  }
}
function getClosestValueIndex(values, nextValue) {
  if (values.length === 1) return 0;
  const distances = values.map((value) => Math.abs(value - nextValue));
  const closestDistance = Math.min(...distances);
  return distances.indexOf(closestDistance);
}
function getThumbInBoundsOffset(width, left, direction) {
  const halfWidth = width / 2;
  const halfPercent = 50;
  const offset = linearScale2([0, halfPercent], [0, halfWidth]);
  return (halfWidth - offset(left) * direction) * direction;
}
function getStepsBetweenValues(values) {
  return values.slice(0, -1).map((value, index) => values[index + 1] - value);
}
function hasMinStepsBetweenValues(values, minStepsBetweenValues) {
  if (minStepsBetweenValues > 0) {
    const stepsBetweenValues = getStepsBetweenValues(values);
    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
    return actualMinStepsBetweenValues >= minStepsBetweenValues;
  }
  return true;
}
function linearScale2(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1]) return output[0];
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function getDecimalCount(value) {
  return (String(value).split(".")[1] || "").length;
}
function roundValue(value, decimalCount) {
  const rounder = Math.pow(10, decimalCount);
  return Math.round(value * rounder) / rounder;
}
var Root12 = Slider;
var Track = SliderTrack;
var Range = SliderRange;
var Thumb2 = SliderThumb;

// node_modules/@radix-ui/react-switch/dist/index.mjs
var dist_exports27 = {};
__export(dist_exports27, {
  Root: () => Root13,
  Switch: () => Switch,
  SwitchThumb: () => SwitchThumb,
  Thumb: () => Thumb3,
  createSwitchScope: () => createSwitchScope
});
var React27 = __toESM(require_react(), 1);
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var SWITCH_NAME = "Switch";
var [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);
var [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);
var Switch = React27.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSwitch,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      disabled,
      value = "on",
      onCheckedChange,
      form,
      ...switchProps
    } = props;
    const [button, setButton] = React27.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React27.useRef(false);
    const isFormControl2 = button ? form || !!button.closest("form") : true;
    const [checked, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked ?? false,
      onChange: onCheckedChange,
      caller: SWITCH_NAME
    });
    return (0, import_jsx_runtime25.jsxs)(SwitchProvider, { scope: __scopeSwitch, checked, disabled, children: [
      (0, import_jsx_runtime25.jsx)(
        Primitive.button,
        {
          type: "button",
          role: "switch",
          "aria-checked": checked,
          "aria-required": required,
          "data-state": getState6(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...switchProps,
          ref: composedRefs,
          onClick: composeEventHandlers(props.onClick, (event) => {
            setChecked((prevChecked) => !prevChecked);
            if (isFormControl2) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
            }
          })
        }
      ),
      isFormControl2 && (0, import_jsx_runtime25.jsx)(
        SwitchBubbleInput,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          form,
          style: { transform: "translateX(-100%)" }
        }
      )
    ] });
  }
);
Switch.displayName = SWITCH_NAME;
var THUMB_NAME3 = "SwitchThumb";
var SwitchThumb = React27.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSwitch, ...thumbProps } = props;
    const context = useSwitchContext(THUMB_NAME3, __scopeSwitch);
    return (0, import_jsx_runtime25.jsx)(
      Primitive.span,
      {
        "data-state": getState6(context.checked),
        "data-disabled": context.disabled ? "" : void 0,
        ...thumbProps,
        ref: forwardedRef
      }
    );
  }
);
SwitchThumb.displayName = THUMB_NAME3;
var BUBBLE_INPUT_NAME5 = "SwitchBubbleInput";
var SwitchBubbleInput = React27.forwardRef(
  ({
    __scopeSwitch,
    control,
    checked,
    bubbles = true,
    ...props
  }, forwardedRef) => {
    const ref = React27.useRef(null);
    const composedRefs = useComposedRefs(ref, forwardedRef);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React27.useEffect(() => {
      const input = ref.current;
      if (!input) return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        setChecked.call(input, checked);
        input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]);
    return (0, import_jsx_runtime25.jsx)(
      "input",
      {
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: checked,
        ...props,
        tabIndex: -1,
        ref: composedRefs,
        style: {
          ...props.style,
          ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        }
      }
    );
  }
);
SwitchBubbleInput.displayName = BUBBLE_INPUT_NAME5;
function getState6(checked) {
  return checked ? "checked" : "unchecked";
}
var Root13 = Switch;
var Thumb3 = SwitchThumb;

// node_modules/@radix-ui/react-tabs/dist/index.mjs
var dist_exports28 = {};
__export(dist_exports28, {
  Content: () => Content5,
  List: () => List2,
  Root: () => Root211,
  Tabs: () => Tabs,
  TabsContent: () => TabsContent,
  TabsList: () => TabsList,
  TabsTrigger: () => TabsTrigger,
  Trigger: () => Trigger8,
  createTabsScope: () => createTabsScope
});
var React28 = __toESM(require_react(), 1);
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var TABS_NAME = "Tabs";
var [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [
  createRovingFocusGroupScope
]);
var useRovingFocusGroupScope4 = createRovingFocusGroupScope();
var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
var Tabs = React28.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeTabs,
      value: valueProp,
      onValueChange,
      defaultValue,
      orientation = "horizontal",
      dir,
      activationMode = "automatic",
      ...tabsProps
    } = props;
    const direction = useDirection(dir);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue ?? "",
      caller: TABS_NAME
    });
    return (0, import_jsx_runtime26.jsx)(
      TabsProvider,
      {
        scope: __scopeTabs,
        baseId: useId(),
        value,
        onValueChange: setValue,
        orientation,
        dir: direction,
        activationMode,
        children: (0, import_jsx_runtime26.jsx)(
          Primitive.div,
          {
            dir: direction,
            "data-orientation": orientation,
            ...tabsProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
Tabs.displayName = TABS_NAME;
var TAB_LIST_NAME = "TabsList";
var TabsList = React28.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, loop = true, ...listProps } = props;
    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope4(__scopeTabs);
    return (0, import_jsx_runtime26.jsx)(
      Root4,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation: context.orientation,
        dir: context.dir,
        loop,
        children: (0, import_jsx_runtime26.jsx)(
          Primitive.div,
          {
            role: "tablist",
            "aria-orientation": context.orientation,
            ...listProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
TabsList.displayName = TAB_LIST_NAME;
var TRIGGER_NAME11 = "TabsTrigger";
var TabsTrigger = React28.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
    const context = useTabsContext(TRIGGER_NAME11, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope4(__scopeTabs);
    const triggerId = makeTriggerId2(context.baseId, value);
    const contentId = makeContentId2(context.baseId, value);
    const isSelected = value === context.value;
    return (0, import_jsx_runtime26.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        active: isSelected,
        children: (0, import_jsx_runtime26.jsx)(
          Primitive.button,
          {
            type: "button",
            role: "tab",
            "aria-selected": isSelected,
            "aria-controls": contentId,
            "data-state": isSelected ? "active" : "inactive",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            id: triggerId,
            ...triggerProps,
            ref: forwardedRef,
            onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
              if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onValueChange(value);
              } else {
                event.preventDefault();
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if ([" ", "Enter"].includes(event.key)) context.onValueChange(value);
            }),
            onFocus: composeEventHandlers(props.onFocus, () => {
              const isAutomaticActivation = context.activationMode !== "manual";
              if (!isSelected && !disabled && isAutomaticActivation) {
                context.onValueChange(value);
              }
            })
          }
        )
      }
    );
  }
);
TabsTrigger.displayName = TRIGGER_NAME11;
var CONTENT_NAME10 = "TabsContent";
var TabsContent = React28.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
    const context = useTabsContext(CONTENT_NAME10, __scopeTabs);
    const triggerId = makeTriggerId2(context.baseId, value);
    const contentId = makeContentId2(context.baseId, value);
    const isSelected = value === context.value;
    const isMountAnimationPreventedRef = React28.useRef(isSelected);
    React28.useEffect(() => {
      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
      return () => cancelAnimationFrame(rAF);
    }, []);
    return (0, import_jsx_runtime26.jsx)(Presence, { present: forceMount || isSelected, children: ({ present }) => (0, import_jsx_runtime26.jsx)(
      Primitive.div,
      {
        "data-state": isSelected ? "active" : "inactive",
        "data-orientation": context.orientation,
        role: "tabpanel",
        "aria-labelledby": triggerId,
        hidden: !present,
        id: contentId,
        tabIndex: 0,
        ...contentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
        },
        children: present && children
      }
    ) });
  }
);
TabsContent.displayName = CONTENT_NAME10;
function makeTriggerId2(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId2(baseId, value) {
  return `${baseId}-content-${value}`;
}
var Root211 = Tabs;
var List2 = TabsList;
var Trigger8 = TabsTrigger;
var Content5 = TabsContent;

// node_modules/@radix-ui/react-toast/dist/index.mjs
var React29 = __toESM(require_react(), 1);
var ReactDOM3 = __toESM(require_react_dom(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var PROVIDER_NAME = "ToastProvider";
var [Collection7, useCollection7, createCollectionScope7] = createCollection("Toast");
var [createToastContext, createToastScope] = createContextScope("Toast", [createCollectionScope7]);
var [ToastProviderProvider, useToastProviderContext] = createToastContext(PROVIDER_NAME);
var ToastProvider = (props) => {
  const {
    __scopeToast,
    label = "Notification",
    duration = 5e3,
    swipeDirection = "right",
    swipeThreshold = 50,
    children
  } = props;
  const [viewport, setViewport] = React29.useState(null);
  const [toastCount, setToastCount] = React29.useState(0);
  const isFocusedToastEscapeKeyDownRef = React29.useRef(false);
  const isClosePausedRef = React29.useRef(false);
  if (!label.trim()) {
    console.error(
      `Invalid prop \`label\` supplied to \`${PROVIDER_NAME}\`. Expected non-empty \`string\`.`
    );
  }
  return (0, import_jsx_runtime27.jsx)(Collection7.Provider, { scope: __scopeToast, children: (0, import_jsx_runtime27.jsx)(
    ToastProviderProvider,
    {
      scope: __scopeToast,
      label,
      duration,
      swipeDirection,
      swipeThreshold,
      toastCount,
      viewport,
      onViewportChange: setViewport,
      onToastAdd: React29.useCallback(() => setToastCount((prevCount) => prevCount + 1), []),
      onToastRemove: React29.useCallback(() => setToastCount((prevCount) => prevCount - 1), []),
      isFocusedToastEscapeKeyDownRef,
      isClosePausedRef,
      children
    }
  ) });
};
ToastProvider.displayName = PROVIDER_NAME;
var VIEWPORT_NAME4 = "ToastViewport";
var VIEWPORT_DEFAULT_HOTKEY = ["F8"];
var VIEWPORT_PAUSE = "toast.viewportPause";
var VIEWPORT_RESUME = "toast.viewportResume";
var ToastViewport = React29.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeToast,
      hotkey = VIEWPORT_DEFAULT_HOTKEY,
      label = "Notifications ({hotkey})",
      ...viewportProps
    } = props;
    const context = useToastProviderContext(VIEWPORT_NAME4, __scopeToast);
    const getItems = useCollection7(__scopeToast);
    const wrapperRef = React29.useRef(null);
    const headFocusProxyRef = React29.useRef(null);
    const tailFocusProxyRef = React29.useRef(null);
    const ref = React29.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);
    const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
    const hasToasts = context.toastCount > 0;
    React29.useEffect(() => {
      const handleKeyDown = (event) => {
        const isHotkeyPressed = hotkey.length !== 0 && hotkey.every((key) => event[key] || event.code === key);
        if (isHotkeyPressed) ref.current?.focus();
      };
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }, [hotkey]);
    React29.useEffect(() => {
      const wrapper = wrapperRef.current;
      const viewport = ref.current;
      if (hasToasts && wrapper && viewport) {
        const handlePause = () => {
          if (!context.isClosePausedRef.current) {
            const pauseEvent = new CustomEvent(VIEWPORT_PAUSE);
            viewport.dispatchEvent(pauseEvent);
            context.isClosePausedRef.current = true;
          }
        };
        const handleResume = () => {
          if (context.isClosePausedRef.current) {
            const resumeEvent = new CustomEvent(VIEWPORT_RESUME);
            viewport.dispatchEvent(resumeEvent);
            context.isClosePausedRef.current = false;
          }
        };
        const handleFocusOutResume = (event) => {
          const isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
          if (isFocusMovingOutside) handleResume();
        };
        const handlePointerLeaveResume = () => {
          const isFocusInside = wrapper.contains(document.activeElement);
          if (!isFocusInside) handleResume();
        };
        wrapper.addEventListener("focusin", handlePause);
        wrapper.addEventListener("focusout", handleFocusOutResume);
        wrapper.addEventListener("pointermove", handlePause);
        wrapper.addEventListener("pointerleave", handlePointerLeaveResume);
        window.addEventListener("blur", handlePause);
        window.addEventListener("focus", handleResume);
        return () => {
          wrapper.removeEventListener("focusin", handlePause);
          wrapper.removeEventListener("focusout", handleFocusOutResume);
          wrapper.removeEventListener("pointermove", handlePause);
          wrapper.removeEventListener("pointerleave", handlePointerLeaveResume);
          window.removeEventListener("blur", handlePause);
          window.removeEventListener("focus", handleResume);
        };
      }
    }, [hasToasts, context.isClosePausedRef]);
    const getSortedTabbableCandidates = React29.useCallback(
      ({ tabbingDirection }) => {
        const toastItems = getItems();
        const tabbableCandidates = toastItems.map((toastItem) => {
          const toastNode = toastItem.ref.current;
          const toastTabbableCandidates = [toastNode, ...getTabbableCandidates2(toastNode)];
          return tabbingDirection === "forwards" ? toastTabbableCandidates : toastTabbableCandidates.reverse();
        });
        return (tabbingDirection === "forwards" ? tabbableCandidates.reverse() : tabbableCandidates).flat();
      },
      [getItems]
    );
    React29.useEffect(() => {
      const viewport = ref.current;
      if (viewport) {
        const handleKeyDown = (event) => {
          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
          const isTabKey = event.key === "Tab" && !isMetaKey;
          if (isTabKey) {
            const focusedElement = document.activeElement;
            const isTabbingBackwards = event.shiftKey;
            const targetIsViewport = event.target === viewport;
            if (targetIsViewport && isTabbingBackwards) {
              headFocusProxyRef.current?.focus();
              return;
            }
            const tabbingDirection = isTabbingBackwards ? "backwards" : "forwards";
            const sortedCandidates = getSortedTabbableCandidates({ tabbingDirection });
            const index = sortedCandidates.findIndex((candidate) => candidate === focusedElement);
            if (focusFirst2(sortedCandidates.slice(index + 1))) {
              event.preventDefault();
            } else {
              isTabbingBackwards ? headFocusProxyRef.current?.focus() : tailFocusProxyRef.current?.focus();
            }
          }
        };
        viewport.addEventListener("keydown", handleKeyDown);
        return () => viewport.removeEventListener("keydown", handleKeyDown);
      }
    }, [getItems, getSortedTabbableCandidates]);
    return (0, import_jsx_runtime27.jsxs)(
      Branch,
      {
        ref: wrapperRef,
        role: "region",
        "aria-label": label.replace("{hotkey}", hotkeyLabel),
        tabIndex: -1,
        style: { pointerEvents: hasToasts ? void 0 : "none" },
        children: [
          hasToasts && (0, import_jsx_runtime27.jsx)(
            FocusProxy,
            {
              ref: headFocusProxyRef,
              onFocusFromOutsideViewport: () => {
                const tabbableCandidates = getSortedTabbableCandidates({
                  tabbingDirection: "forwards"
                });
                focusFirst2(tabbableCandidates);
              }
            }
          ),
          (0, import_jsx_runtime27.jsx)(Collection7.Slot, { scope: __scopeToast, children: (0, import_jsx_runtime27.jsx)(Primitive.ol, { tabIndex: -1, ...viewportProps, ref: composedRefs }) }),
          hasToasts && (0, import_jsx_runtime27.jsx)(
            FocusProxy,
            {
              ref: tailFocusProxyRef,
              onFocusFromOutsideViewport: () => {
                const tabbableCandidates = getSortedTabbableCandidates({
                  tabbingDirection: "backwards"
                });
                focusFirst2(tabbableCandidates);
              }
            }
          )
        ]
      }
    );
  }
);
ToastViewport.displayName = VIEWPORT_NAME4;
var FOCUS_PROXY_NAME = "ToastFocusProxy";
var FocusProxy = React29.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, onFocusFromOutsideViewport, ...proxyProps } = props;
    const context = useToastProviderContext(FOCUS_PROXY_NAME, __scopeToast);
    return (0, import_jsx_runtime27.jsx)(
      VisuallyHidden,
      {
        tabIndex: 0,
        ...proxyProps,
        ref: forwardedRef,
        style: { position: "fixed" },
        onFocus: (event) => {
          const prevFocusedElement = event.relatedTarget;
          const isFocusFromOutsideViewport = !context.viewport?.contains(prevFocusedElement);
          if (isFocusFromOutsideViewport) onFocusFromOutsideViewport();
        }
      }
    );
  }
);
FocusProxy.displayName = FOCUS_PROXY_NAME;
var TOAST_NAME = "Toast";
var TOAST_SWIPE_START = "toast.swipeStart";
var TOAST_SWIPE_MOVE = "toast.swipeMove";
var TOAST_SWIPE_CANCEL = "toast.swipeCancel";
var TOAST_SWIPE_END = "toast.swipeEnd";
var Toast = React29.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props;
    const [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen ?? true,
      onChange: onOpenChange,
      caller: TOAST_NAME
    });
    return (0, import_jsx_runtime27.jsx)(Presence, { present: forceMount || open, children: (0, import_jsx_runtime27.jsx)(
      ToastImpl,
      {
        open,
        ...toastProps,
        ref: forwardedRef,
        onClose: () => setOpen(false),
        onPause: useCallbackRef(props.onPause),
        onResume: useCallbackRef(props.onResume),
        onSwipeStart: composeEventHandlers(props.onSwipeStart, (event) => {
          event.currentTarget.setAttribute("data-swipe", "start");
        }),
        onSwipeMove: composeEventHandlers(props.onSwipeMove, (event) => {
          const { x: x4, y: y7 } = event.detail.delta;
          event.currentTarget.setAttribute("data-swipe", "move");
          event.currentTarget.style.setProperty("--radix-toast-swipe-move-x", `${x4}px`);
          event.currentTarget.style.setProperty("--radix-toast-swipe-move-y", `${y7}px`);
        }),
        onSwipeCancel: composeEventHandlers(props.onSwipeCancel, (event) => {
          event.currentTarget.setAttribute("data-swipe", "cancel");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-end-x");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-end-y");
        }),
        onSwipeEnd: composeEventHandlers(props.onSwipeEnd, (event) => {
          const { x: x4, y: y7 } = event.detail.delta;
          event.currentTarget.setAttribute("data-swipe", "end");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
          event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
          event.currentTarget.style.setProperty("--radix-toast-swipe-end-x", `${x4}px`);
          event.currentTarget.style.setProperty("--radix-toast-swipe-end-y", `${y7}px`);
          setOpen(false);
        })
      }
    ) });
  }
);
Toast.displayName = TOAST_NAME;
var [ToastInteractiveProvider, useToastInteractiveContext] = createToastContext(TOAST_NAME, {
  onClose() {
  }
});
var ToastImpl = React29.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeToast,
      type = "foreground",
      duration: durationProp,
      open,
      onClose,
      onEscapeKeyDown,
      onPause,
      onResume,
      onSwipeStart,
      onSwipeMove,
      onSwipeCancel,
      onSwipeEnd,
      ...toastProps
    } = props;
    const context = useToastProviderContext(TOAST_NAME, __scopeToast);
    const [node, setNode] = React29.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
    const pointerStartRef = React29.useRef(null);
    const swipeDeltaRef = React29.useRef(null);
    const duration = durationProp || context.duration;
    const closeTimerStartTimeRef = React29.useRef(0);
    const closeTimerRemainingTimeRef = React29.useRef(duration);
    const closeTimerRef = React29.useRef(0);
    const { onToastAdd, onToastRemove } = context;
    const handleClose = useCallbackRef(() => {
      const isFocusInToast = node?.contains(document.activeElement);
      if (isFocusInToast) context.viewport?.focus();
      onClose();
    });
    const startTimer = React29.useCallback(
      (duration2) => {
        if (!duration2 || duration2 === Infinity) return;
        window.clearTimeout(closeTimerRef.current);
        closeTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
        closeTimerRef.current = window.setTimeout(handleClose, duration2);
      },
      [handleClose]
    );
    React29.useEffect(() => {
      const viewport = context.viewport;
      if (viewport) {
        const handleResume = () => {
          startTimer(closeTimerRemainingTimeRef.current);
          onResume?.();
        };
        const handlePause = () => {
          const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef.current;
          closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;
          window.clearTimeout(closeTimerRef.current);
          onPause?.();
        };
        viewport.addEventListener(VIEWPORT_PAUSE, handlePause);
        viewport.addEventListener(VIEWPORT_RESUME, handleResume);
        return () => {
          viewport.removeEventListener(VIEWPORT_PAUSE, handlePause);
          viewport.removeEventListener(VIEWPORT_RESUME, handleResume);
        };
      }
    }, [context.viewport, duration, onPause, onResume, startTimer]);
    React29.useEffect(() => {
      if (open && !context.isClosePausedRef.current) startTimer(duration);
    }, [open, duration, context.isClosePausedRef, startTimer]);
    React29.useEffect(() => {
      onToastAdd();
      return () => onToastRemove();
    }, [onToastAdd, onToastRemove]);
    const announceTextContent = React29.useMemo(() => {
      return node ? getAnnounceTextContent(node) : null;
    }, [node]);
    if (!context.viewport) return null;
    return (0, import_jsx_runtime27.jsxs)(import_jsx_runtime27.Fragment, { children: [
      announceTextContent && (0, import_jsx_runtime27.jsx)(
        ToastAnnounce,
        {
          __scopeToast,
          role: "status",
          "aria-live": type === "foreground" ? "assertive" : "polite",
          children: announceTextContent
        }
      ),
      (0, import_jsx_runtime27.jsx)(ToastInteractiveProvider, { scope: __scopeToast, onClose: handleClose, children: ReactDOM3.createPortal(
        (0, import_jsx_runtime27.jsx)(Collection7.ItemSlot, { scope: __scopeToast, children: (0, import_jsx_runtime27.jsx)(
          Root2,
          {
            asChild: true,
            onEscapeKeyDown: composeEventHandlers(onEscapeKeyDown, () => {
              if (!context.isFocusedToastEscapeKeyDownRef.current) handleClose();
              context.isFocusedToastEscapeKeyDownRef.current = false;
            }),
            children: (0, import_jsx_runtime27.jsx)(
              Primitive.li,
              {
                tabIndex: 0,
                "data-state": open ? "open" : "closed",
                "data-swipe-direction": context.swipeDirection,
                ...toastProps,
                ref: composedRefs,
                style: { userSelect: "none", touchAction: "none", ...props.style },
                onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                  if (event.key !== "Escape") return;
                  onEscapeKeyDown?.(event.nativeEvent);
                  if (!event.nativeEvent.defaultPrevented) {
                    context.isFocusedToastEscapeKeyDownRef.current = true;
                    handleClose();
                  }
                }),
                onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
                  if (event.button !== 0) return;
                  pointerStartRef.current = { x: event.clientX, y: event.clientY };
                }),
                onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
                  if (!pointerStartRef.current) return;
                  const x4 = event.clientX - pointerStartRef.current.x;
                  const y7 = event.clientY - pointerStartRef.current.y;
                  const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);
                  const isHorizontalSwipe = ["left", "right"].includes(context.swipeDirection);
                  const clamp2 = ["left", "up"].includes(context.swipeDirection) ? Math.min : Math.max;
                  const clampedX = isHorizontalSwipe ? clamp2(0, x4) : 0;
                  const clampedY = !isHorizontalSwipe ? clamp2(0, y7) : 0;
                  const moveStartBuffer = event.pointerType === "touch" ? 10 : 2;
                  const delta = { x: clampedX, y: clampedY };
                  const eventDetail = { originalEvent: event, delta };
                  if (hasSwipeMoveStarted) {
                    swipeDeltaRef.current = delta;
                    handleAndDispatchCustomEvent(TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {
                      discrete: false
                    });
                  } else if (isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {
                    swipeDeltaRef.current = delta;
                    handleAndDispatchCustomEvent(TOAST_SWIPE_START, onSwipeStart, eventDetail, {
                      discrete: false
                    });
                    event.target.setPointerCapture(event.pointerId);
                  } else if (Math.abs(x4) > moveStartBuffer || Math.abs(y7) > moveStartBuffer) {
                    pointerStartRef.current = null;
                  }
                }),
                onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
                  const delta = swipeDeltaRef.current;
                  const target = event.target;
                  if (target.hasPointerCapture(event.pointerId)) {
                    target.releasePointerCapture(event.pointerId);
                  }
                  swipeDeltaRef.current = null;
                  pointerStartRef.current = null;
                  if (delta) {
                    const toast = event.currentTarget;
                    const eventDetail = { originalEvent: event, delta };
                    if (isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold)) {
                      handleAndDispatchCustomEvent(TOAST_SWIPE_END, onSwipeEnd, eventDetail, {
                        discrete: true
                      });
                    } else {
                      handleAndDispatchCustomEvent(
                        TOAST_SWIPE_CANCEL,
                        onSwipeCancel,
                        eventDetail,
                        {
                          discrete: true
                        }
                      );
                    }
                    toast.addEventListener("click", (event2) => event2.preventDefault(), {
                      once: true
                    });
                  }
                })
              }
            )
          }
        ) }),
        context.viewport
      ) })
    ] });
  }
);
var ToastAnnounce = (props) => {
  const { __scopeToast, children, ...announceProps } = props;
  const context = useToastProviderContext(TOAST_NAME, __scopeToast);
  const [renderAnnounceText, setRenderAnnounceText] = React29.useState(false);
  const [isAnnounced, setIsAnnounced] = React29.useState(false);
  useNextFrame(() => setRenderAnnounceText(true));
  React29.useEffect(() => {
    const timer = window.setTimeout(() => setIsAnnounced(true), 1e3);
    return () => window.clearTimeout(timer);
  }, []);
  return isAnnounced ? null : (0, import_jsx_runtime27.jsx)(Portal, { asChild: true, children: (0, import_jsx_runtime27.jsx)(VisuallyHidden, { ...announceProps, children: renderAnnounceText && (0, import_jsx_runtime27.jsxs)(import_jsx_runtime27.Fragment, { children: [
    context.label,
    " ",
    children
  ] }) }) });
};
var TITLE_NAME2 = "ToastTitle";
var ToastTitle = React29.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...titleProps } = props;
    return (0, import_jsx_runtime27.jsx)(Primitive.div, { ...titleProps, ref: forwardedRef });
  }
);
ToastTitle.displayName = TITLE_NAME2;
var DESCRIPTION_NAME2 = "ToastDescription";
var ToastDescription = React29.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...descriptionProps } = props;
    return (0, import_jsx_runtime27.jsx)(Primitive.div, { ...descriptionProps, ref: forwardedRef });
  }
);
ToastDescription.displayName = DESCRIPTION_NAME2;
var ACTION_NAME2 = "ToastAction";
var ToastAction = React29.forwardRef(
  (props, forwardedRef) => {
    const { altText, ...actionProps } = props;
    if (!altText.trim()) {
      console.error(
        `Invalid prop \`altText\` supplied to \`${ACTION_NAME2}\`. Expected non-empty \`string\`.`
      );
      return null;
    }
    return (0, import_jsx_runtime27.jsx)(ToastAnnounceExclude, { altText, asChild: true, children: (0, import_jsx_runtime27.jsx)(ToastClose, { ...actionProps, ref: forwardedRef }) });
  }
);
ToastAction.displayName = ACTION_NAME2;
var CLOSE_NAME2 = "ToastClose";
var ToastClose = React29.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...closeProps } = props;
    const interactiveContext = useToastInteractiveContext(CLOSE_NAME2, __scopeToast);
    return (0, import_jsx_runtime27.jsx)(ToastAnnounceExclude, { asChild: true, children: (0, import_jsx_runtime27.jsx)(
      Primitive.button,
      {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(props.onClick, interactiveContext.onClose)
      }
    ) });
  }
);
ToastClose.displayName = CLOSE_NAME2;
var ToastAnnounceExclude = React29.forwardRef((props, forwardedRef) => {
  const { __scopeToast, altText, ...announceExcludeProps } = props;
  return (0, import_jsx_runtime27.jsx)(
    Primitive.div,
    {
      "data-radix-toast-announce-exclude": "",
      "data-radix-toast-announce-alt": altText || void 0,
      ...announceExcludeProps,
      ref: forwardedRef
    }
  );
});
function getAnnounceTextContent(container) {
  const textContent = [];
  const childNodes = Array.from(container.childNodes);
  childNodes.forEach((node) => {
    if (node.nodeType === node.TEXT_NODE && node.textContent) textContent.push(node.textContent);
    if (isHTMLElement2(node)) {
      const isHidden = node.ariaHidden || node.hidden || node.style.display === "none";
      const isExcluded = node.dataset.radixToastAnnounceExclude === "";
      if (!isHidden) {
        if (isExcluded) {
          const altText = node.dataset.radixToastAnnounceAlt;
          if (altText) textContent.push(altText);
        } else {
          textContent.push(...getAnnounceTextContent(node));
        }
      }
    }
  });
  return textContent;
}
function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const currentTarget = detail.originalEvent.currentTarget;
  const event = new CustomEvent(name, { bubbles: true, cancelable: true, detail });
  if (handler) currentTarget.addEventListener(name, handler, { once: true });
  if (discrete) {
    dispatchDiscreteCustomEvent(currentTarget, event);
  } else {
    currentTarget.dispatchEvent(event);
  }
}
var isDeltaInDirection = (delta, direction, threshold = 0) => {
  const deltaX = Math.abs(delta.x);
  const deltaY = Math.abs(delta.y);
  const isDeltaX = deltaX > deltaY;
  if (direction === "left" || direction === "right") {
    return isDeltaX && deltaX > threshold;
  } else {
    return !isDeltaX && deltaY > threshold;
  }
};
function useNextFrame(callback = () => {
}) {
  const fn = useCallbackRef(callback);
  useLayoutEffect2(() => {
    let raf1 = 0;
    let raf2 = 0;
    raf1 = window.requestAnimationFrame(() => raf2 = window.requestAnimationFrame(fn));
    return () => {
      window.cancelAnimationFrame(raf1);
      window.cancelAnimationFrame(raf2);
    };
  }, [fn]);
}
function isHTMLElement2(node) {
  return node.nodeType === node.ELEMENT_NODE;
}
function getTabbableCandidates2(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode()) nodes.push(walker.currentNode);
  return nodes;
}
function focusFirst2(candidates) {
  const previouslyFocusedElement = document.activeElement;
  return candidates.some((candidate) => {
    if (candidate === previouslyFocusedElement) return true;
    candidate.focus();
    return document.activeElement !== previouslyFocusedElement;
  });
}

// node_modules/@radix-ui/react-toggle/dist/index.mjs
var React30 = __toESM(require_react(), 1);
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var NAME6 = "Toggle";
var Toggle = React30.forwardRef((props, forwardedRef) => {
  const { pressed: pressedProp, defaultPressed, onPressedChange, ...buttonProps } = props;
  const [pressed, setPressed] = useControllableState({
    prop: pressedProp,
    onChange: onPressedChange,
    defaultProp: defaultPressed ?? false,
    caller: NAME6
  });
  return (0, import_jsx_runtime28.jsx)(
    Primitive.button,
    {
      type: "button",
      "aria-pressed": pressed,
      "data-state": pressed ? "on" : "off",
      "data-disabled": props.disabled ? "" : void 0,
      ...buttonProps,
      ref: forwardedRef,
      onClick: composeEventHandlers(props.onClick, () => {
        if (!props.disabled) {
          setPressed(!pressed);
        }
      })
    }
  );
});
Toggle.displayName = NAME6;

// node_modules/@radix-ui/react-toggle-group/dist/index.mjs
var dist_exports30 = {};
__export(dist_exports30, {
  Item: () => Item24,
  Root: () => Root212,
  ToggleGroup: () => ToggleGroup,
  ToggleGroupItem: () => ToggleGroupItem,
  createToggleGroupScope: () => createToggleGroupScope
});
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var TOGGLE_GROUP_NAME = "ToggleGroup";
var [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [
  createRovingFocusGroupScope
]);
var useRovingFocusGroupScope5 = createRovingFocusGroupScope();
var ToggleGroup = import_react2.default.forwardRef((props, forwardedRef) => {
  const { type, ...toggleGroupProps } = props;
  if (type === "single") {
    const singleProps = toggleGroupProps;
    return (0, import_jsx_runtime29.jsx)(ToggleGroupImplSingle, { ...singleProps, ref: forwardedRef });
  }
  if (type === "multiple") {
    const multipleProps = toggleGroupProps;
    return (0, import_jsx_runtime29.jsx)(ToggleGroupImplMultiple, { ...multipleProps, ref: forwardedRef });
  }
  throw new Error(`Missing prop \`type\` expected on \`${TOGGLE_GROUP_NAME}\``);
});
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
var [ToggleGroupValueProvider, useToggleGroupValueContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);
var ToggleGroupImplSingle = import_react2.default.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    ...toggleGroupSingleProps
  } = props;
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue ?? "",
    onChange: onValueChange,
    caller: TOGGLE_GROUP_NAME
  });
  return (0, import_jsx_runtime29.jsx)(
    ToggleGroupValueProvider,
    {
      scope: props.__scopeToggleGroup,
      type: "single",
      value: import_react2.default.useMemo(() => value ? [value] : [], [value]),
      onItemActivate: setValue,
      onItemDeactivate: import_react2.default.useCallback(() => setValue(""), [setValue]),
      children: (0, import_jsx_runtime29.jsx)(ToggleGroupImpl, { ...toggleGroupSingleProps, ref: forwardedRef })
    }
  );
});
var ToggleGroupImplMultiple = import_react2.default.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    ...toggleGroupMultipleProps
  } = props;
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue ?? [],
    onChange: onValueChange,
    caller: TOGGLE_GROUP_NAME
  });
  const handleButtonActivate = import_react2.default.useCallback(
    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),
    [setValue]
  );
  const handleButtonDeactivate = import_react2.default.useCallback(
    (itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)),
    [setValue]
  );
  return (0, import_jsx_runtime29.jsx)(
    ToggleGroupValueProvider,
    {
      scope: props.__scopeToggleGroup,
      type: "multiple",
      value,
      onItemActivate: handleButtonActivate,
      onItemDeactivate: handleButtonDeactivate,
      children: (0, import_jsx_runtime29.jsx)(ToggleGroupImpl, { ...toggleGroupMultipleProps, ref: forwardedRef })
    }
  );
});
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
var [ToggleGroupContext, useToggleGroupContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);
var ToggleGroupImpl = import_react2.default.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeToggleGroup,
      disabled = false,
      rovingFocus = true,
      orientation,
      dir,
      loop = true,
      ...toggleGroupProps
    } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope5(__scopeToggleGroup);
    const direction = useDirection(dir);
    const commonProps = { role: "group", dir: direction, ...toggleGroupProps };
    return (0, import_jsx_runtime29.jsx)(ToggleGroupContext, { scope: __scopeToggleGroup, rovingFocus, disabled, children: rovingFocus ? (0, import_jsx_runtime29.jsx)(
      Root4,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation,
        dir: direction,
        loop,
        children: (0, import_jsx_runtime29.jsx)(Primitive.div, { ...commonProps, ref: forwardedRef })
      }
    ) : (0, import_jsx_runtime29.jsx)(Primitive.div, { ...commonProps, ref: forwardedRef }) });
  }
);
var ITEM_NAME7 = "ToggleGroupItem";
var ToggleGroupItem = import_react2.default.forwardRef(
  (props, forwardedRef) => {
    const valueContext = useToggleGroupValueContext(ITEM_NAME7, props.__scopeToggleGroup);
    const context = useToggleGroupContext(ITEM_NAME7, props.__scopeToggleGroup);
    const rovingFocusGroupScope = useRovingFocusGroupScope5(props.__scopeToggleGroup);
    const pressed = valueContext.value.includes(props.value);
    const disabled = context.disabled || props.disabled;
    const commonProps = { ...props, pressed, disabled };
    const ref = import_react2.default.useRef(null);
    return context.rovingFocus ? (0, import_jsx_runtime29.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        active: pressed,
        ref,
        children: (0, import_jsx_runtime29.jsx)(ToggleGroupItemImpl, { ...commonProps, ref: forwardedRef })
      }
    ) : (0, import_jsx_runtime29.jsx)(ToggleGroupItemImpl, { ...commonProps, ref: forwardedRef });
  }
);
ToggleGroupItem.displayName = ITEM_NAME7;
var ToggleGroupItemImpl = import_react2.default.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToggleGroup, value, ...itemProps } = props;
    const valueContext = useToggleGroupValueContext(ITEM_NAME7, __scopeToggleGroup);
    const singleProps = { role: "radio", "aria-checked": props.pressed, "aria-pressed": void 0 };
    const typeProps = valueContext.type === "single" ? singleProps : void 0;
    return (0, import_jsx_runtime29.jsx)(
      Toggle,
      {
        ...typeProps,
        ...itemProps,
        ref: forwardedRef,
        onPressedChange: (pressed) => {
          if (pressed) {
            valueContext.onItemActivate(value);
          } else {
            valueContext.onItemDeactivate(value);
          }
        }
      }
    );
  }
);
var Root212 = ToggleGroup;
var Item24 = ToggleGroupItem;

// node_modules/@radix-ui/react-toolbar/dist/index.mjs
var React32 = __toESM(require_react(), 1);
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var TOOLBAR_NAME = "Toolbar";
var [createToolbarContext, createToolbarScope] = createContextScope(TOOLBAR_NAME, [
  createRovingFocusGroupScope,
  createToggleGroupScope
]);
var useRovingFocusGroupScope6 = createRovingFocusGroupScope();
var useToggleGroupScope = createToggleGroupScope();
var [ToolbarProvider, useToolbarContext] = createToolbarContext(TOOLBAR_NAME);
var Toolbar = React32.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToolbar, orientation = "horizontal", dir, loop = true, ...toolbarProps } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope6(__scopeToolbar);
    const direction = useDirection(dir);
    return (0, import_jsx_runtime30.jsx)(ToolbarProvider, { scope: __scopeToolbar, orientation, dir: direction, children: (0, import_jsx_runtime30.jsx)(
      Root4,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation,
        dir: direction,
        loop,
        children: (0, import_jsx_runtime30.jsx)(
          Primitive.div,
          {
            role: "toolbar",
            "aria-orientation": orientation,
            dir: direction,
            ...toolbarProps,
            ref: forwardedRef
          }
        )
      }
    ) });
  }
);
Toolbar.displayName = TOOLBAR_NAME;
var SEPARATOR_NAME4 = "ToolbarSeparator";
var ToolbarSeparator = React32.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToolbar, ...separatorProps } = props;
    const context = useToolbarContext(SEPARATOR_NAME4, __scopeToolbar);
    return (0, import_jsx_runtime30.jsx)(
      Root11,
      {
        orientation: context.orientation === "horizontal" ? "vertical" : "horizontal",
        ...separatorProps,
        ref: forwardedRef
      }
    );
  }
);
ToolbarSeparator.displayName = SEPARATOR_NAME4;
var BUTTON_NAME = "ToolbarButton";
var ToolbarButton = React32.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToolbar, ...buttonProps } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope6(__scopeToolbar);
    return (0, import_jsx_runtime30.jsx)(Item, { asChild: true, ...rovingFocusGroupScope, focusable: !props.disabled, children: (0, import_jsx_runtime30.jsx)(Primitive.button, { type: "button", ...buttonProps, ref: forwardedRef }) });
  }
);
ToolbarButton.displayName = BUTTON_NAME;
var LINK_NAME2 = "ToolbarLink";
var ToolbarLink = React32.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToolbar, ...linkProps } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope6(__scopeToolbar);
    return (0, import_jsx_runtime30.jsx)(Item, { asChild: true, ...rovingFocusGroupScope, focusable: true, children: (0, import_jsx_runtime30.jsx)(
      Primitive.a,
      {
        ...linkProps,
        ref: forwardedRef,
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          if (event.key === " ") event.currentTarget.click();
        })
      }
    ) });
  }
);
ToolbarLink.displayName = LINK_NAME2;
var TOGGLE_GROUP_NAME2 = "ToolbarToggleGroup";
var ToolbarToggleGroup = React32.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToolbar, ...toggleGroupProps } = props;
    const context = useToolbarContext(TOGGLE_GROUP_NAME2, __scopeToolbar);
    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);
    return (0, import_jsx_runtime30.jsx)(
      Root212,
      {
        "data-orientation": context.orientation,
        dir: context.dir,
        ...toggleGroupScope,
        ...toggleGroupProps,
        ref: forwardedRef,
        rovingFocus: false
      }
    );
  }
);
ToolbarToggleGroup.displayName = TOGGLE_GROUP_NAME2;
var TOGGLE_ITEM_NAME = "ToolbarToggleItem";
var ToolbarToggleItem = React32.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToolbar, ...toggleItemProps } = props;
    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);
    const scope = { __scopeToolbar: props.__scopeToolbar };
    return (0, import_jsx_runtime30.jsx)(ToolbarButton, { asChild: true, ...scope, children: (0, import_jsx_runtime30.jsx)(Item24, { ...toggleGroupScope, ...toggleItemProps, ref: forwardedRef }) });
  }
);
ToolbarToggleItem.displayName = TOGGLE_ITEM_NAME;

// node_modules/@radix-ui/react-tooltip/dist/index.mjs
var dist_exports32 = {};
__export(dist_exports32, {
  Arrow: () => Arrow26,
  Content: () => Content28,
  Portal: () => Portal7,
  Provider: () => Provider,
  Root: () => Root33,
  Tooltip: () => Tooltip,
  TooltipArrow: () => TooltipArrow,
  TooltipContent: () => TooltipContent,
  TooltipPortal: () => TooltipPortal,
  TooltipProvider: () => TooltipProvider,
  TooltipTrigger: () => TooltipTrigger,
  Trigger: () => Trigger9,
  createTooltipScope: () => createTooltipScope
});
var React33 = __toESM(require_react(), 1);
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var [createTooltipContext, createTooltipScope] = createContextScope("Tooltip", [
  createPopperScope
]);
var usePopperScope4 = createPopperScope();
var PROVIDER_NAME2 = "TooltipProvider";
var DEFAULT_DELAY_DURATION = 700;
var TOOLTIP_OPEN = "tooltip.open";
var [TooltipProviderContextProvider, useTooltipProviderContext] = createTooltipContext(PROVIDER_NAME2);
var TooltipProvider = (props) => {
  const {
    __scopeTooltip,
    delayDuration = DEFAULT_DELAY_DURATION,
    skipDelayDuration = 300,
    disableHoverableContent = false,
    children
  } = props;
  const isOpenDelayedRef = React33.useRef(true);
  const isPointerInTransitRef = React33.useRef(false);
  const skipDelayTimerRef = React33.useRef(0);
  React33.useEffect(() => {
    const skipDelayTimer = skipDelayTimerRef.current;
    return () => window.clearTimeout(skipDelayTimer);
  }, []);
  return (0, import_jsx_runtime31.jsx)(
    TooltipProviderContextProvider,
    {
      scope: __scopeTooltip,
      isOpenDelayedRef,
      delayDuration,
      onOpen: React33.useCallback(() => {
        window.clearTimeout(skipDelayTimerRef.current);
        isOpenDelayedRef.current = false;
      }, []),
      onClose: React33.useCallback(() => {
        window.clearTimeout(skipDelayTimerRef.current);
        skipDelayTimerRef.current = window.setTimeout(
          () => isOpenDelayedRef.current = true,
          skipDelayDuration
        );
      }, [skipDelayDuration]),
      isPointerInTransitRef,
      onPointerInTransitChange: React33.useCallback((inTransit) => {
        isPointerInTransitRef.current = inTransit;
      }, []),
      disableHoverableContent,
      children
    }
  );
};
TooltipProvider.displayName = PROVIDER_NAME2;
var TOOLTIP_NAME = "Tooltip";
var [TooltipContextProvider, useTooltipContext] = createTooltipContext(TOOLTIP_NAME);
var Tooltip = (props) => {
  const {
    __scopeTooltip,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    disableHoverableContent: disableHoverableContentProp,
    delayDuration: delayDurationProp
  } = props;
  const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props.__scopeTooltip);
  const popperScope = usePopperScope4(__scopeTooltip);
  const [trigger, setTrigger] = React33.useState(null);
  const contentId = useId();
  const openTimerRef = React33.useRef(0);
  const disableHoverableContent = disableHoverableContentProp ?? providerContext.disableHoverableContent;
  const delayDuration = delayDurationProp ?? providerContext.delayDuration;
  const wasOpenDelayedRef = React33.useRef(false);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: (open2) => {
      if (open2) {
        providerContext.onOpen();
        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));
      } else {
        providerContext.onClose();
      }
      onOpenChange?.(open2);
    },
    caller: TOOLTIP_NAME
  });
  const stateAttribute = React33.useMemo(() => {
    return open ? wasOpenDelayedRef.current ? "delayed-open" : "instant-open" : "closed";
  }, [open]);
  const handleOpen = React33.useCallback(() => {
    window.clearTimeout(openTimerRef.current);
    openTimerRef.current = 0;
    wasOpenDelayedRef.current = false;
    setOpen(true);
  }, [setOpen]);
  const handleClose = React33.useCallback(() => {
    window.clearTimeout(openTimerRef.current);
    openTimerRef.current = 0;
    setOpen(false);
  }, [setOpen]);
  const handleDelayedOpen = React33.useCallback(() => {
    window.clearTimeout(openTimerRef.current);
    openTimerRef.current = window.setTimeout(() => {
      wasOpenDelayedRef.current = true;
      setOpen(true);
      openTimerRef.current = 0;
    }, delayDuration);
  }, [delayDuration, setOpen]);
  React33.useEffect(() => {
    return () => {
      if (openTimerRef.current) {
        window.clearTimeout(openTimerRef.current);
        openTimerRef.current = 0;
      }
    };
  }, []);
  return (0, import_jsx_runtime31.jsx)(Root22, { ...popperScope, children: (0, import_jsx_runtime31.jsx)(
    TooltipContextProvider,
    {
      scope: __scopeTooltip,
      contentId,
      open,
      stateAttribute,
      trigger,
      onTriggerChange: setTrigger,
      onTriggerEnter: React33.useCallback(() => {
        if (providerContext.isOpenDelayedRef.current) handleDelayedOpen();
        else handleOpen();
      }, [providerContext.isOpenDelayedRef, handleDelayedOpen, handleOpen]),
      onTriggerLeave: React33.useCallback(() => {
        if (disableHoverableContent) {
          handleClose();
        } else {
          window.clearTimeout(openTimerRef.current);
          openTimerRef.current = 0;
        }
      }, [handleClose, disableHoverableContent]),
      onOpen: handleOpen,
      onClose: handleClose,
      disableHoverableContent,
      children
    }
  ) });
};
Tooltip.displayName = TOOLTIP_NAME;
var TRIGGER_NAME12 = "TooltipTrigger";
var TooltipTrigger = React33.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTooltip, ...triggerProps } = props;
    const context = useTooltipContext(TRIGGER_NAME12, __scopeTooltip);
    const providerContext = useTooltipProviderContext(TRIGGER_NAME12, __scopeTooltip);
    const popperScope = usePopperScope4(__scopeTooltip);
    const ref = React33.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, context.onTriggerChange);
    const isPointerDownRef = React33.useRef(false);
    const hasPointerMoveOpenedRef = React33.useRef(false);
    const handlePointerUp = React33.useCallback(() => isPointerDownRef.current = false, []);
    React33.useEffect(() => {
      return () => document.removeEventListener("pointerup", handlePointerUp);
    }, [handlePointerUp]);
    return (0, import_jsx_runtime31.jsx)(Anchor, { asChild: true, ...popperScope, children: (0, import_jsx_runtime31.jsx)(
      Primitive.button,
      {
        "aria-describedby": context.open ? context.contentId : void 0,
        "data-state": context.stateAttribute,
        ...triggerProps,
        ref: composedRefs,
        onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
          if (event.pointerType === "touch") return;
          if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {
            context.onTriggerEnter();
            hasPointerMoveOpenedRef.current = true;
          }
        }),
        onPointerLeave: composeEventHandlers(props.onPointerLeave, () => {
          context.onTriggerLeave();
          hasPointerMoveOpenedRef.current = false;
        }),
        onPointerDown: composeEventHandlers(props.onPointerDown, () => {
          if (context.open) {
            context.onClose();
          }
          isPointerDownRef.current = true;
          document.addEventListener("pointerup", handlePointerUp, { once: true });
        }),
        onFocus: composeEventHandlers(props.onFocus, () => {
          if (!isPointerDownRef.current) context.onOpen();
        }),
        onBlur: composeEventHandlers(props.onBlur, context.onClose),
        onClick: composeEventHandlers(props.onClick, context.onClose)
      }
    ) });
  }
);
TooltipTrigger.displayName = TRIGGER_NAME12;
var PORTAL_NAME7 = "TooltipPortal";
var [PortalProvider3, usePortalContext3] = createTooltipContext(PORTAL_NAME7, {
  forceMount: void 0
});
var TooltipPortal = (props) => {
  const { __scopeTooltip, forceMount, children, container } = props;
  const context = useTooltipContext(PORTAL_NAME7, __scopeTooltip);
  return (0, import_jsx_runtime31.jsx)(PortalProvider3, { scope: __scopeTooltip, forceMount, children: (0, import_jsx_runtime31.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime31.jsx)(Portal, { asChild: true, container, children }) }) });
};
TooltipPortal.displayName = PORTAL_NAME7;
var CONTENT_NAME11 = "TooltipContent";
var TooltipContent = React33.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext3(CONTENT_NAME11, props.__scopeTooltip);
    const { forceMount = portalContext.forceMount, side = "top", ...contentProps } = props;
    const context = useTooltipContext(CONTENT_NAME11, props.__scopeTooltip);
    return (0, import_jsx_runtime31.jsx)(Presence, { present: forceMount || context.open, children: context.disableHoverableContent ? (0, import_jsx_runtime31.jsx)(TooltipContentImpl, { side, ...contentProps, ref: forwardedRef }) : (0, import_jsx_runtime31.jsx)(TooltipContentHoverable, { side, ...contentProps, ref: forwardedRef }) });
  }
);
var TooltipContentHoverable = React33.forwardRef((props, forwardedRef) => {
  const context = useTooltipContext(CONTENT_NAME11, props.__scopeTooltip);
  const providerContext = useTooltipProviderContext(CONTENT_NAME11, props.__scopeTooltip);
  const ref = React33.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const [pointerGraceArea, setPointerGraceArea] = React33.useState(null);
  const { trigger, onClose } = context;
  const content = ref.current;
  const { onPointerInTransitChange } = providerContext;
  const handleRemoveGraceArea = React33.useCallback(() => {
    setPointerGraceArea(null);
    onPointerInTransitChange(false);
  }, [onPointerInTransitChange]);
  const handleCreateGraceArea = React33.useCallback(
    (event, hoverTarget) => {
      const currentTarget = event.currentTarget;
      const exitPoint = { x: event.clientX, y: event.clientY };
      const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());
      const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);
      const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());
      const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);
      setPointerGraceArea(graceArea);
      onPointerInTransitChange(true);
    },
    [onPointerInTransitChange]
  );
  React33.useEffect(() => {
    return () => handleRemoveGraceArea();
  }, [handleRemoveGraceArea]);
  React33.useEffect(() => {
    if (trigger && content) {
      const handleTriggerLeave = (event) => handleCreateGraceArea(event, content);
      const handleContentLeave = (event) => handleCreateGraceArea(event, trigger);
      trigger.addEventListener("pointerleave", handleTriggerLeave);
      content.addEventListener("pointerleave", handleContentLeave);
      return () => {
        trigger.removeEventListener("pointerleave", handleTriggerLeave);
        content.removeEventListener("pointerleave", handleContentLeave);
      };
    }
  }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);
  React33.useEffect(() => {
    if (pointerGraceArea) {
      const handleTrackPointerGrace = (event) => {
        const target = event.target;
        const pointerPosition = { x: event.clientX, y: event.clientY };
        const hasEnteredTarget = trigger?.contains(target) || content?.contains(target);
        const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);
        if (hasEnteredTarget) {
          handleRemoveGraceArea();
        } else if (isPointerOutsideGraceArea) {
          handleRemoveGraceArea();
          onClose();
        }
      };
      document.addEventListener("pointermove", handleTrackPointerGrace);
      return () => document.removeEventListener("pointermove", handleTrackPointerGrace);
    }
  }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);
  return (0, import_jsx_runtime31.jsx)(TooltipContentImpl, { ...props, ref: composedRefs });
});
var [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, { isInside: false });
var Slottable2 = createSlottable("TooltipContent");
var TooltipContentImpl = React33.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeTooltip,
      children,
      "aria-label": ariaLabel,
      onEscapeKeyDown,
      onPointerDownOutside,
      ...contentProps
    } = props;
    const context = useTooltipContext(CONTENT_NAME11, __scopeTooltip);
    const popperScope = usePopperScope4(__scopeTooltip);
    const { onClose } = context;
    React33.useEffect(() => {
      document.addEventListener(TOOLTIP_OPEN, onClose);
      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);
    }, [onClose]);
    React33.useEffect(() => {
      if (context.trigger) {
        const handleScroll = (event) => {
          const target = event.target;
          if (target?.contains(context.trigger)) onClose();
        };
        window.addEventListener("scroll", handleScroll, { capture: true });
        return () => window.removeEventListener("scroll", handleScroll, { capture: true });
      }
    }, [context.trigger, onClose]);
    return (0, import_jsx_runtime31.jsx)(
      DismissableLayer,
      {
        asChild: true,
        disableOutsidePointerEvents: false,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside: (event) => event.preventDefault(),
        onDismiss: onClose,
        children: (0, import_jsx_runtime31.jsxs)(
          Content2,
          {
            "data-state": context.stateAttribute,
            ...popperScope,
            ...contentProps,
            ref: forwardedRef,
            style: {
              ...contentProps.style,
              // re-namespace exposed content custom properties
              ...{
                "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)",
                "--radix-tooltip-content-available-width": "var(--radix-popper-available-width)",
                "--radix-tooltip-content-available-height": "var(--radix-popper-available-height)",
                "--radix-tooltip-trigger-width": "var(--radix-popper-anchor-width)",
                "--radix-tooltip-trigger-height": "var(--radix-popper-anchor-height)"
              }
            },
            children: [
              (0, import_jsx_runtime31.jsx)(Slottable2, { children }),
              (0, import_jsx_runtime31.jsx)(VisuallyHiddenContentContextProvider, { scope: __scopeTooltip, isInside: true, children: (0, import_jsx_runtime31.jsx)(Root5, { id: context.contentId, role: "tooltip", children: ariaLabel || children }) })
            ]
          }
        )
      }
    );
  }
);
TooltipContent.displayName = CONTENT_NAME11;
var ARROW_NAME6 = "TooltipArrow";
var TooltipArrow = React33.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTooltip, ...arrowProps } = props;
    const popperScope = usePopperScope4(__scopeTooltip);
    const visuallyHiddenContentContext = useVisuallyHiddenContentContext(
      ARROW_NAME6,
      __scopeTooltip
    );
    return visuallyHiddenContentContext.isInside ? null : (0, import_jsx_runtime31.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
TooltipArrow.displayName = ARROW_NAME6;
function getExitSideFromRect(point, rect) {
  const top = Math.abs(rect.top - point.y);
  const bottom = Math.abs(rect.bottom - point.y);
  const right = Math.abs(rect.right - point.x);
  const left = Math.abs(rect.left - point.x);
  switch (Math.min(top, bottom, right, left)) {
    case left:
      return "left";
    case right:
      return "right";
    case top:
      return "top";
    case bottom:
      return "bottom";
    default:
      throw new Error("unreachable");
  }
}
function getPaddedExitPoints(exitPoint, exitSide, padding = 5) {
  const paddedExitPoints = [];
  switch (exitSide) {
    case "top":
      paddedExitPoints.push(
        { x: exitPoint.x - padding, y: exitPoint.y + padding },
        { x: exitPoint.x + padding, y: exitPoint.y + padding }
      );
      break;
    case "bottom":
      paddedExitPoints.push(
        { x: exitPoint.x - padding, y: exitPoint.y - padding },
        { x: exitPoint.x + padding, y: exitPoint.y - padding }
      );
      break;
    case "left":
      paddedExitPoints.push(
        { x: exitPoint.x + padding, y: exitPoint.y - padding },
        { x: exitPoint.x + padding, y: exitPoint.y + padding }
      );
      break;
    case "right":
      paddedExitPoints.push(
        { x: exitPoint.x - padding, y: exitPoint.y - padding },
        { x: exitPoint.x - padding, y: exitPoint.y + padding }
      );
      break;
  }
  return paddedExitPoints;
}
function getPointsFromRect(rect) {
  const { top, right, bottom, left } = rect;
  return [
    { x: left, y: top },
    { x: right, y: top },
    { x: right, y: bottom },
    { x: left, y: bottom }
  ];
}
function isPointInPolygon(point, polygon) {
  const { x: x4, y: y7 } = point;
  let inside = false;
  for (let i24 = 0, j = polygon.length - 1; i24 < polygon.length; j = i24++) {
    const ii = polygon[i24];
    const jj = polygon[j];
    const xi = ii.x;
    const yi = ii.y;
    const xj = jj.x;
    const yj = jj.y;
    const intersect = yi > y7 !== yj > y7 && x4 < (xj - xi) * (y7 - yi) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }
  return inside;
}
function getHull(points) {
  const newPoints = points.slice();
  newPoints.sort((a39, b6) => {
    if (a39.x < b6.x) return -1;
    else if (a39.x > b6.x) return 1;
    else if (a39.y < b6.y) return -1;
    else if (a39.y > b6.y) return 1;
    else return 0;
  });
  return getHullPresorted(newPoints);
}
function getHullPresorted(points) {
  if (points.length <= 1) return points.slice();
  const upperHull = [];
  for (let i24 = 0; i24 < points.length; i24++) {
    const p37 = points[i24];
    while (upperHull.length >= 2) {
      const q = upperHull[upperHull.length - 1];
      const r46 = upperHull[upperHull.length - 2];
      if ((q.x - r46.x) * (p37.y - r46.y) >= (q.y - r46.y) * (p37.x - r46.x)) upperHull.pop();
      else break;
    }
    upperHull.push(p37);
  }
  upperHull.pop();
  const lowerHull = [];
  for (let i24 = points.length - 1; i24 >= 0; i24--) {
    const p37 = points[i24];
    while (lowerHull.length >= 2) {
      const q = lowerHull[lowerHull.length - 1];
      const r46 = lowerHull[lowerHull.length - 2];
      if ((q.x - r46.x) * (p37.y - r46.y) >= (q.y - r46.y) * (p37.x - r46.x)) lowerHull.pop();
      else break;
    }
    lowerHull.push(p37);
  }
  lowerHull.pop();
  if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y) {
    return upperHull;
  } else {
    return upperHull.concat(lowerHull);
  }
}
var Provider = TooltipProvider;
var Root33 = Tooltip;
var Trigger9 = TooltipTrigger;
var Portal7 = TooltipPortal;
var Content28 = TooltipContent;
var Arrow26 = TooltipArrow;

// node_modules/@radix-ui/themes/dist/esm/components/accessible-icon.js
var s = dist_exports9.Root;

// node_modules/@radix-ui/themes/dist/esm/components/alert-dialog.js
var alert_dialog_exports = {};
__export(alert_dialog_exports, {
  Action: () => D,
  Cancel: () => A2,
  Content: () => p3,
  Description: () => m4,
  Root: () => n4,
  Title: () => g2,
  Trigger: () => s5
});
var e13 = __toESM(require_react(), 1);
var import_classnames5 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/props/as-child.prop.js
var o = { asChild: { type: "boolean" } };

// node_modules/@radix-ui/themes/dist/esm/props/width.props.js
var t = { width: { type: "string", className: "rt-r-w", customProperties: ["--width"], responsive: true }, minWidth: { type: "string", className: "rt-r-min-w", customProperties: ["--min-width"], responsive: true }, maxWidth: { type: "string", className: "rt-r-max-w", customProperties: ["--max-width"], responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/props/height.props.js
var e = { height: { type: "string", className: "rt-r-h", customProperties: ["--height"], responsive: true }, minHeight: { type: "string", className: "rt-r-min-h", customProperties: ["--min-height"], responsive: true }, maxHeight: { type: "string", className: "rt-r-max-h", customProperties: ["--max-height"], responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/components/dialog.props.js
var r = ["1", "2", "3", "4"];
var s2 = { ...o, align: { type: "enum", className: "rt-r-align", values: ["start", "center"], default: "center" }, size: { type: "enum", className: "rt-r-size", values: r, default: "3", responsive: true }, width: t.width, minWidth: t.minWidth, maxWidth: { ...t.maxWidth, default: "600px" }, ...e };

// node_modules/@radix-ui/themes/dist/esm/components/heading.js
var o5 = __toESM(require_react(), 1);
var import_classnames2 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/props/color.prop.js
var o2 = ["gray", "gold", "bronze", "brown", "yellow", "amber", "orange", "tomato", "red", "ruby", "crimson", "pink", "plum", "purple", "violet", "iris", "indigo", "blue", "cyan", "teal", "jade", "green", "grass", "lime", "mint", "sky"];
var e2 = ["auto", "gray", "mauve", "slate", "sage", "olive", "sand"];
var r2 = { color: { type: "enum", values: o2, default: void 0 } };
var s3 = { color: { type: "enum", values: o2, default: "" } };

// node_modules/@radix-ui/themes/dist/esm/props/high-contrast.prop.js
var o3 = { highContrast: { type: "boolean", className: "rt-high-contrast", default: void 0 } };

// node_modules/@radix-ui/themes/dist/esm/props/leading-trim.prop.js
var e3 = ["normal", "start", "end", "both"];
var r3 = { trim: { type: "enum", className: "rt-r-lt", values: e3, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/props/text-align.prop.js
var e4 = ["left", "center", "right"];
var t2 = { align: { type: "enum", className: "rt-r-ta", values: e4, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/props/text-wrap.prop.js
var e5 = ["wrap", "nowrap", "pretty", "balance"];
var r4 = { wrap: { type: "enum", className: "rt-r-tw", values: e5, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/props/truncate.prop.js
var e6 = { truncate: { type: "boolean", className: "rt-truncate" } };

// node_modules/@radix-ui/themes/dist/esm/props/weight.prop.js
var e7 = ["light", "regular", "medium", "bold"];
var t3 = { weight: { type: "enum", className: "rt-r-weight", values: e7, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/components/heading.props.js
var m = ["h1", "h2", "h3", "h4", "h5", "h6"];
var a = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var n = { as: { type: "enum", values: m, default: "h1" }, ...o, size: { type: "enum", className: "rt-r-size", values: a, default: "6", responsive: true }, ...t3, ...t2, ...r3, ...e6, ...r4, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/helpers/extract-props.js
var import_classnames = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/props/prop-def.js
var e8 = ["initial", "xs", "sm", "md", "lg", "xl"];

// node_modules/@radix-ui/themes/dist/esm/helpers/has-own-property.js
function e9(n26, r46) {
  return Object.prototype.hasOwnProperty.call(n26, r46);
}

// node_modules/@radix-ui/themes/dist/esm/helpers/is-responsive-object.js
function i(e45) {
  return typeof e45 == "object" && Object.keys(e45).some((s26) => e8.includes(s26));
}

// node_modules/@radix-ui/themes/dist/esm/helpers/get-responsive-styles.js
function R({ className: r46, customProperties: n26, ...t35 }) {
  const p37 = g({ allowArbitraryValues: true, className: r46, ...t35 }), e45 = m2({ customProperties: n26, ...t35 });
  return [p37, e45];
}
function g({ allowArbitraryValues: r46, value: n26, className: t35, propValues: p37, parseValue: e45 = (s26) => s26 }) {
  const s26 = [];
  if (n26) {
    if (typeof n26 == "string" && p37.includes(n26)) return l(t35, n26, e45);
    if (i(n26)) {
      const i24 = n26;
      for (const o59 in i24) {
        if (!e9(i24, o59) || !e8.includes(o59)) continue;
        const u10 = i24[o59];
        if (u10 !== void 0) {
          if (p37.includes(u10)) {
            const f21 = l(t35, u10, e45), v11 = o59 === "initial" ? f21 : `${o59}:${f21}`;
            s26.push(v11);
          } else if (r46) {
            const f21 = o59 === "initial" ? t35 : `${o59}:${t35}`;
            s26.push(f21);
          }
        }
      }
      return s26.join(" ");
    }
    if (r46) return t35;
  }
}
function l(r46, n26, t35) {
  const p37 = r46 ? "-" : "", e45 = t35(n26), s26 = e45?.startsWith("-"), i24 = s26 ? "-" : "", o59 = s26 ? e45?.substring(1) : e45;
  return `${i24}${r46}${p37}${o59}`;
}
function m2({ customProperties: r46, value: n26, propValues: t35, parseValue: p37 = (e45) => e45 }) {
  let e45 = {};
  if (!(!n26 || typeof n26 == "string" && t35.includes(n26))) {
    if (typeof n26 == "string" && (e45 = Object.fromEntries(r46.map((s26) => [s26, n26]))), i(n26)) {
      const s26 = n26;
      for (const i24 in s26) {
        if (!e9(s26, i24) || !e8.includes(i24)) continue;
        const o59 = s26[i24];
        if (!t35.includes(o59)) for (const u10 of r46) e45 = { [i24 === "initial" ? u10 : `${u10}-${i24}`]: o59, ...e45 };
      }
    }
    for (const s26 in e45) {
      const i24 = e45[s26];
      i24 !== void 0 && (e45[s26] = p37(i24));
    }
    return e45;
  }
}

// node_modules/@radix-ui/themes/dist/esm/helpers/merge-styles.js
function l2(...t35) {
  let e45 = {};
  for (const n26 of t35) n26 && (e45 = { ...e45, ...n26 });
  return Object.keys(e45).length ? e45 : void 0;
}

// node_modules/@radix-ui/themes/dist/esm/helpers/extract-props.js
function N(...r46) {
  return Object.assign({}, ...r46);
}
function v(r46, ...m16) {
  let t35, l13;
  const a39 = { ...r46 }, f21 = N(...m16);
  for (const n26 in f21) {
    let s26 = a39[n26];
    const e45 = f21[n26];
    if (e45.default !== void 0 && s26 === void 0 && (s26 = e45.default), e45.type === "enum" && ![e45.default, ...e45.values].includes(s26) && !i(s26) && (s26 = e45.default), a39[n26] = s26, "className" in e45 && e45.className) {
      delete a39[n26];
      const u10 = "responsive" in e45;
      if (!s26 || i(s26) && !u10) continue;
      if (i(s26) && (e45.default !== void 0 && s26.initial === void 0 && (s26.initial = e45.default), e45.type === "enum" && ([e45.default, ...e45.values].includes(s26.initial) || (s26.initial = e45.default))), e45.type === "enum") {
        const i24 = g({ allowArbitraryValues: false, value: s26, className: e45.className, propValues: e45.values, parseValue: e45.parseValue });
        t35 = (0, import_classnames.default)(t35, i24);
        continue;
      }
      if (e45.type === "string" || e45.type === "enum | string") {
        const i24 = e45.type === "string" ? [] : e45.values, [d10, y7] = R({ className: e45.className, customProperties: e45.customProperties, propValues: i24, parseValue: e45.parseValue, value: s26 });
        l13 = l2(l13, y7), t35 = (0, import_classnames.default)(t35, d10);
        continue;
      }
      if (e45.type === "boolean" && s26) {
        t35 = (0, import_classnames.default)(t35, e45.className);
        continue;
      }
    }
  }
  return a39.className = (0, import_classnames.default)(t35, r46.className), a39.style = l2(l13, r46.style), a39;
}

// node_modules/@radix-ui/themes/dist/esm/props/margin.props.js
var e10 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9"];
var r5 = { m: { type: "enum | string", values: e10, responsive: true, className: "rt-r-m", customProperties: ["--m"] }, mx: { type: "enum | string", values: e10, responsive: true, className: "rt-r-mx", customProperties: ["--ml", "--mr"] }, my: { type: "enum | string", values: e10, responsive: true, className: "rt-r-my", customProperties: ["--mt", "--mb"] }, mt: { type: "enum | string", values: e10, responsive: true, className: "rt-r-mt", customProperties: ["--mt"] }, mr: { type: "enum | string", values: e10, responsive: true, className: "rt-r-mr", customProperties: ["--mr"] }, mb: { type: "enum | string", values: e10, responsive: true, className: "rt-r-mb", customProperties: ["--mb"] }, ml: { type: "enum | string", values: e10, responsive: true, className: "rt-r-ml", customProperties: ["--ml"] } };

// node_modules/@radix-ui/themes/dist/esm/components/heading.js
var r6 = o5.forwardRef((p37, t35) => {
  const { children: e45, className: s26, asChild: a39, as: n26 = "h1", color: i24, ...m16 } = v(p37, n, r5);
  return o5.createElement(dist_exports.Root, { "data-accent-color": i24, ...m16, ref: t35, className: (0, import_classnames2.default)("rt-Heading", s26) }, a39 ? e45 : o5.createElement(n26, null, e45));
});
r6.displayName = "Heading";

// node_modules/@radix-ui/themes/dist/esm/components/text.js
var o6 = __toESM(require_react(), 1);
var import_classnames3 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/text.props.js
var m3 = ["span", "div", "label", "p"];
var a2 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var n2 = { as: { type: "enum", values: m3, default: "span" }, ...o, size: { type: "enum", className: "rt-r-size", values: a2, responsive: true }, ...t3, ...t2, ...r3, ...e6, ...r4, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/text.js
var p = o6.forwardRef((t35, r46) => {
  const { children: e45, className: s26, asChild: m16, as: a39 = "span", color: n26, ...P9 } = v(t35, n2, r5);
  return o6.createElement(dist_exports.Root, { "data-accent-color": n26, ...P9, ref: r46, className: (0, import_classnames3.default)("rt-Text", s26) }, m16 ? e45 : o6.createElement(a39, null, e45));
});
p.displayName = "Text";

// node_modules/@radix-ui/themes/dist/esm/components/theme.js
var e12 = __toESM(require_react(), 1);
var import_classnames4 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/helpers/get-matching-gray-color.js
function a3(e45) {
  switch (e45) {
    case "tomato":
    case "red":
    case "ruby":
    case "crimson":
    case "pink":
    case "plum":
    case "purple":
    case "violet":
      return "mauve";
    case "iris":
    case "indigo":
    case "blue":
    case "sky":
    case "cyan":
      return "slate";
    case "teal":
    case "jade":
    case "mint":
    case "green":
      return "sage";
    case "grass":
    case "lime":
      return "olive";
    case "yellow":
    case "amber":
    case "orange":
    case "brown":
    case "gold":
    case "bronze":
      return "sand";
    case "gray":
      return "gray";
  }
}

// node_modules/@radix-ui/themes/dist/esm/props/radius.prop.js
var e11 = ["none", "small", "medium", "large", "full"];
var r7 = { radius: { type: "enum", values: e11, default: void 0 } };

// node_modules/@radix-ui/themes/dist/esm/components/theme.props.js
var p2 = ["inherit", "light", "dark"];
var t4 = ["solid", "translucent"];
var n3 = ["90%", "95%", "100%", "105%", "110%"];
var s4 = { ...o, hasBackground: { type: "boolean", default: true }, appearance: { type: "enum", values: p2, default: "inherit" }, accentColor: { type: "enum", values: o2, default: "indigo" }, grayColor: { type: "enum", values: e2, default: "auto" }, panelBackground: { type: "enum", values: t4, default: "translucent" }, radius: { type: "enum", values: e11, default: "medium" }, scaling: { type: "enum", values: n3, default: "100%" } };

// node_modules/@radix-ui/themes/dist/esm/components/theme.js
var d2 = () => {
};
var P = e12.createContext(void 0);
function H() {
  const a39 = e12.useContext(P);
  if (a39 === void 0) throw new Error("`useThemeContext` must be used within a `Theme`");
  return a39;
}
var R2 = e12.forwardRef((a39, s26) => e12.useContext(P) === void 0 ? e12.createElement(dist_exports32.Provider, { delayDuration: 200 }, e12.createElement(dist_exports3.Provider, { dir: "ltr" }, e12.createElement(I, { ...a39, ref: s26 }))) : e12.createElement(A, { ...a39, ref: s26 }));
R2.displayName = "Theme";
var I = e12.forwardRef((a39, s26) => {
  const { appearance: r46 = s4.appearance.default, accentColor: c5 = s4.accentColor.default, grayColor: l13 = s4.grayColor.default, panelBackground: p37 = s4.panelBackground.default, radius: n26 = s4.radius.default, scaling: t35 = s4.scaling.default, hasBackground: i24 = s4.hasBackground.default, ...u10 } = a39, [h4, m16] = e12.useState(r46);
  e12.useEffect(() => m16(r46), [r46]);
  const [y7, g8] = e12.useState(c5);
  e12.useEffect(() => g8(c5), [c5]);
  const [v11, C7] = e12.useState(l13);
  e12.useEffect(() => C7(l13), [l13]);
  const [k3, f21] = e12.useState(p37);
  e12.useEffect(() => f21(p37), [p37]);
  const [B5, x4] = e12.useState(n26);
  e12.useEffect(() => x4(n26), [n26]);
  const [T6, b6] = e12.useState(t35);
  return e12.useEffect(() => b6(t35), [t35]), e12.createElement(A, { ...u10, ref: s26, isRoot: true, hasBackground: i24, appearance: h4, accentColor: y7, grayColor: v11, panelBackground: k3, radius: B5, scaling: T6, onAppearanceChange: m16, onAccentColorChange: g8, onGrayColorChange: C7, onPanelBackgroundChange: f21, onRadiusChange: x4, onScalingChange: b6 });
});
I.displayName = "ThemeRoot";
var A = e12.forwardRef((a39, s26) => {
  const r46 = e12.useContext(P), { asChild: c5, isRoot: l13, hasBackground: p37, appearance: n26 = r46?.appearance ?? s4.appearance.default, accentColor: t35 = r46?.accentColor ?? s4.accentColor.default, grayColor: i24 = r46?.resolvedGrayColor ?? s4.grayColor.default, panelBackground: u10 = r46?.panelBackground ?? s4.panelBackground.default, radius: h4 = r46?.radius ?? s4.radius.default, scaling: m16 = r46?.scaling ?? s4.scaling.default, onAppearanceChange: y7 = d2, onAccentColorChange: g8 = d2, onGrayColorChange: v11 = d2, onPanelBackgroundChange: C7 = d2, onRadiusChange: k3 = d2, onScalingChange: f21 = d2, ...B5 } = a39, x4 = c5 ? dist_exports.Root : "div", T6 = i24 === "auto" ? a3(t35) : i24, b6 = a39.appearance === "light" || a39.appearance === "dark", S5 = p37 === void 0 ? l13 || b6 : p37;
  return e12.createElement(P.Provider, { value: e12.useMemo(() => ({ appearance: n26, accentColor: t35, grayColor: i24, resolvedGrayColor: T6, panelBackground: u10, radius: h4, scaling: m16, onAppearanceChange: y7, onAccentColorChange: g8, onGrayColorChange: v11, onPanelBackgroundChange: C7, onRadiusChange: k3, onScalingChange: f21 }), [n26, t35, i24, T6, u10, h4, m16, y7, g8, v11, C7, k3, f21]) }, e12.createElement(x4, { "data-is-root-theme": l13 ? "true" : "false", "data-accent-color": t35, "data-gray-color": T6, "data-has-background": S5 ? "true" : "false", "data-panel-background": u10, "data-radius": h4, "data-scaling": m16, ref: s26, ...B5, className: (0, import_classnames4.default)("radix-themes", { light: n26 === "light", dark: n26 === "dark" }, B5.className) }));
});
A.displayName = "ThemeImpl";

// node_modules/@radix-ui/themes/dist/esm/helpers/require-react-element.js
var o7 = __toESM(require_react(), 1);
var a4 = (t35) => {
  if (!o7.isValidElement(t35)) throw Error(`Expected a single React Element child, but got: ${o7.Children.toArray(t35).map((e45) => typeof e45 == "object" && "type" in e45 && typeof e45.type == "string" ? e45.type : typeof e45).join(", ")}`);
  return t35;
};

// node_modules/@radix-ui/themes/dist/esm/components/alert-dialog.js
var n4 = (t35) => e13.createElement(dist_exports11.Root, { ...t35 });
n4.displayName = "AlertDialog.Root";
var s5 = e13.forwardRef(({ children: t35, ...o59 }, i24) => e13.createElement(dist_exports11.Trigger, { ...o59, ref: i24, asChild: true }, a4(t35)));
s5.displayName = "AlertDialog.Trigger";
var p3 = e13.forwardRef(({ align: t35, ...o59 }, i24) => {
  const { align: P9, ...c5 } = s2, { className: f21 } = v({ align: t35 }, { align: P9 }), { className: C7, forceMount: d10, container: y7, ...v11 } = v(o59, c5);
  return e13.createElement(dist_exports11.Portal, { container: y7, forceMount: d10 }, e13.createElement(R2, { asChild: true }, e13.createElement(dist_exports11.Overlay, { className: "rt-BaseDialogOverlay rt-AlertDialogOverlay" }, e13.createElement("div", { className: "rt-BaseDialogScroll rt-AlertDialogScroll" }, e13.createElement("div", { className: `rt-BaseDialogScrollPadding rt-AlertDialogScrollPadding ${f21}` }, e13.createElement(dist_exports11.Content, { ...v11, ref: i24, className: (0, import_classnames5.default)("rt-BaseDialogContent", "rt-AlertDialogContent", C7) }))))));
});
p3.displayName = "AlertDialog.Content";
var g2 = e13.forwardRef((t35, o59) => e13.createElement(dist_exports11.Title, { asChild: true }, e13.createElement(r6, { size: "5", mb: "3", trim: "start", ...t35, asChild: false, ref: o59 })));
g2.displayName = "AlertDialog.Title";
var m4 = e13.forwardRef((t35, o59) => e13.createElement(dist_exports11.Description, { asChild: true }, e13.createElement(p, { as: "p", size: "3", ...t35, asChild: false, ref: o59 })));
m4.displayName = "AlertDialog.Description";
var D = e13.forwardRef(({ children: t35, ...o59 }, i24) => e13.createElement(dist_exports11.Action, { ...o59, ref: i24, asChild: true }, a4(t35)));
D.displayName = "AlertDialog.Action";
var A2 = e13.forwardRef(({ children: t35, ...o59 }, i24) => e13.createElement(dist_exports11.Cancel, { ...o59, ref: i24, asChild: true }, a4(t35)));
A2.displayName = "AlertDialog.Cancel";

// node_modules/@radix-ui/themes/dist/esm/components/aspect-ratio.js
var i2 = dist_exports12.Root;

// node_modules/@radix-ui/themes/dist/esm/components/avatar.js
var r8 = __toESM(require_react(), 1);
var import_classnames6 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/avatar.props.js
var s6 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var a5 = ["solid", "soft"];
var p4 = { ...o, size: { type: "enum", className: "rt-r-size", values: s6, default: "3", responsive: true }, variant: { type: "enum", className: "rt-variant", values: a5, default: "soft" }, ...s3, ...o3, ...r7, fallback: { type: "ReactNode", required: true } };

// node_modules/@radix-ui/themes/dist/esm/helpers/get-subtree.js
var a6 = __toESM(require_react(), 1);
function d3(i24, e45) {
  const { asChild: r46, children: c5 } = i24;
  if (!r46) return typeof e45 == "function" ? e45(c5) : e45;
  const t35 = a6.Children.only(c5);
  return a6.cloneElement(t35, { children: typeof e45 == "function" ? e45(t35.props.children) : e45 });
}

// node_modules/@radix-ui/themes/dist/esm/components/avatar.js
var i3 = r8.forwardRef((t35, e45) => {
  const { asChild: o59, children: a39, className: s26, style: p37, color: v11, radius: f21, ...d10 } = v(t35, p4, r5);
  return r8.createElement(dist_exports13.Root, { "data-accent-color": v11, "data-radius": f21, className: (0, import_classnames6.default)("rt-reset", "rt-AvatarRoot", s26), style: p37, asChild: o59 }, d3({ asChild: o59, children: a39 }, r8.createElement(n5, { ref: e45, ...d10 })));
});
i3.displayName = "Avatar";
var n5 = r8.forwardRef(({ fallback: t35, ...e45 }, o59) => {
  const [a39, s26] = r8.useState("idle");
  return r8.createElement(r8.Fragment, null, a39 === "idle" || a39 === "loading" ? r8.createElement("span", { className: "rt-AvatarFallback" }) : null, a39 === "error" ? r8.createElement(dist_exports13.Fallback, { className: (0, import_classnames6.default)("rt-AvatarFallback", { "rt-one-letter": typeof t35 == "string" && t35.length === 1, "rt-two-letters": typeof t35 == "string" && t35.length === 2 }), delayMs: 0 }, t35) : null, r8.createElement(dist_exports13.Image, { ref: o59, className: "rt-AvatarImage", ...e45, onLoadingStatusChange: (p37) => {
    e45.onLoadingStatusChange?.(p37), s26(p37);
  } }));
});
n5.displayName = "AvatarImpl";

// node_modules/@radix-ui/themes/dist/esm/components/badge.js
var o8 = __toESM(require_react(), 1);
var import_classnames7 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/badge.props.js
var t5 = ["1", "2", "3"];
var a7 = ["solid", "soft", "surface", "outline"];
var p5 = { ...o, size: { type: "enum", className: "rt-r-size", values: t5, default: "1", responsive: true }, variant: { type: "enum", className: "rt-variant", values: a7, default: "soft" }, ...s3, ...o3, ...r7 };

// node_modules/@radix-ui/themes/dist/esm/components/badge.js
var e14 = o8.forwardRef((r46, p37) => {
  const { asChild: t35, className: s26, color: a39, radius: m16, ...n26 } = v(r46, p5, r5), d10 = t35 ? dist_exports.Root : "span";
  return o8.createElement(d10, { "data-accent-color": a39, "data-radius": m16, ...n26, ref: p37, className: (0, import_classnames7.default)("rt-reset", "rt-Badge", s26) });
});
e14.displayName = "Badge";

// node_modules/@radix-ui/themes/dist/esm/components/blockquote.js
var o9 = __toESM(require_react(), 1);
var import_classnames8 = __toESM(require_classnames(), 1);
var e15 = o9.forwardRef((t35, p37) => {
  const { asChild: r46, children: s26, className: m16, ...l13 } = t35, c5 = r46 ? dist_exports.Root : "blockquote";
  return o9.createElement(p, { asChild: true, ...l13, ref: p37, className: (0, import_classnames8.default)("rt-Blockquote", m16) }, o9.createElement(c5, null, s26));
});
e15.displayName = "Blockquote";

// node_modules/@radix-ui/themes/dist/esm/components/box.js
var o11 = __toESM(require_react(), 1);
var import_classnames9 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/slot.js
var l4 = dist_exports.Root;
var e16 = dist_exports.Root;
var r9 = dist_exports.Slottable;

// node_modules/@radix-ui/themes/dist/esm/components/box.props.js
var s7 = ["div", "span"];
var o10 = ["none", "inline", "inline-block", "block", "contents"];
var p6 = { as: { type: "enum", values: s7, default: "div" }, ...o, display: { type: "enum", className: "rt-r-display", values: o10, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/props/padding.props.js
var e17 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var p7 = { p: { type: "enum | string", className: "rt-r-p", customProperties: ["--p"], values: e17, responsive: true }, px: { type: "enum | string", className: "rt-r-px", customProperties: ["--pl", "--pr"], values: e17, responsive: true }, py: { type: "enum | string", className: "rt-r-py", customProperties: ["--pt", "--pb"], values: e17, responsive: true }, pt: { type: "enum | string", className: "rt-r-pt", customProperties: ["--pt"], values: e17, responsive: true }, pr: { type: "enum | string", className: "rt-r-pr", customProperties: ["--pr"], values: e17, responsive: true }, pb: { type: "enum | string", className: "rt-r-pb", customProperties: ["--pb"], values: e17, responsive: true }, pl: { type: "enum | string", className: "rt-r-pl", customProperties: ["--pl"], values: e17, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/props/layout.props.js
var r10 = ["visible", "hidden", "clip", "scroll", "auto"];
var i4 = ["static", "relative", "absolute", "fixed", "sticky"];
var e18 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9"];
var p8 = ["0", "1"];
var n7 = ["0", "1"];
var u = { ...p7, ...t, ...e, position: { type: "enum", className: "rt-r-position", values: i4, responsive: true }, inset: { type: "enum | string", className: "rt-r-inset", customProperties: ["--inset"], values: e18, responsive: true }, top: { type: "enum | string", className: "rt-r-top", customProperties: ["--top"], values: e18, responsive: true }, right: { type: "enum | string", className: "rt-r-right", customProperties: ["--right"], values: e18, responsive: true }, bottom: { type: "enum | string", className: "rt-r-bottom", customProperties: ["--bottom"], values: e18, responsive: true }, left: { type: "enum | string", className: "rt-r-left", customProperties: ["--left"], values: e18, responsive: true }, overflow: { type: "enum", className: "rt-r-overflow", values: r10, responsive: true }, overflowX: { type: "enum", className: "rt-r-ox", values: r10, responsive: true }, overflowY: { type: "enum", className: "rt-r-oy", values: r10, responsive: true }, flexBasis: { type: "string", className: "rt-r-fb", customProperties: ["--flex-basis"], responsive: true }, flexShrink: { type: "enum | string", className: "rt-r-fs", customProperties: ["--flex-shrink"], values: p8, responsive: true }, flexGrow: { type: "enum | string", className: "rt-r-fg", customProperties: ["--flex-grow"], values: n7, responsive: true }, gridArea: { type: "string", className: "rt-r-ga", customProperties: ["--grid-area"], responsive: true }, gridColumn: { type: "string", className: "rt-r-gc", customProperties: ["--grid-column"], responsive: true }, gridColumnStart: { type: "string", className: "rt-r-gcs", customProperties: ["--grid-column-start"], responsive: true }, gridColumnEnd: { type: "string", className: "rt-r-gce", customProperties: ["--grid-column-end"], responsive: true }, gridRow: { type: "string", className: "rt-r-gr", customProperties: ["--grid-row"], responsive: true }, gridRowStart: { type: "string", className: "rt-r-grs", customProperties: ["--grid-row-start"], responsive: true }, gridRowEnd: { type: "string", className: "rt-r-gre", customProperties: ["--grid-row-end"], responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/components/box.js
var p9 = o11.forwardRef((r46, s26) => {
  const { className: t35, asChild: e45, as: m16 = "div", ...a39 } = v(r46, p6, u, r5);
  return o11.createElement(e45 ? e16 : m16, { ...a39, ref: s26, className: (0, import_classnames9.default)("rt-Box", t35) });
});
p9.displayName = "Box";

// node_modules/@radix-ui/themes/dist/esm/components/button.js
var t8 = __toESM(require_react(), 1);
var import_classnames13 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/_internal/base-button.js
var o14 = __toESM(require_react(), 1);
var import_classnames12 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/_internal/base-button.props.js
var t6 = ["1", "2", "3", "4"];
var a8 = ["classic", "solid", "soft", "surface", "outline", "ghost"];
var i5 = { ...o, size: { type: "enum", className: "rt-r-size", values: t6, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: a8, default: "solid" }, ...s3, ...o3, ...r7, loading: { type: "boolean", className: "rt-loading", default: false } };

// node_modules/@radix-ui/themes/dist/esm/components/flex.js
var o13 = __toESM(require_react(), 1);
var import_classnames10 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/props/gap.props.js
var e19 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var p10 = { gap: { type: "enum | string", className: "rt-r-gap", customProperties: ["--gap"], values: e19, responsive: true }, gapX: { type: "enum | string", className: "rt-r-cg", customProperties: ["--column-gap"], values: e19, responsive: true }, gapY: { type: "enum | string", className: "rt-r-rg", customProperties: ["--row-gap"], values: e19, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/components/flex.props.js
var t7 = ["div", "span"];
var p11 = ["none", "inline-flex", "flex"];
var a9 = ["row", "column", "row-reverse", "column-reverse"];
var o12 = ["start", "center", "end", "baseline", "stretch"];
var n9 = ["start", "center", "end", "between"];
var l5 = ["nowrap", "wrap", "wrap-reverse"];
var u2 = { as: { type: "enum", values: t7, default: "div" }, ...o, display: { type: "enum", className: "rt-r-display", values: p11, responsive: true }, direction: { type: "enum", className: "rt-r-fd", values: a9, responsive: true }, align: { type: "enum", className: "rt-r-ai", values: o12, responsive: true }, justify: { type: "enum", className: "rt-r-jc", values: n9, parseValue: f2, responsive: true }, wrap: { type: "enum", className: "rt-r-fw", values: l5, responsive: true }, ...p10 };
function f2(e45) {
  return e45 === "between" ? "space-between" : e45;
}

// node_modules/@radix-ui/themes/dist/esm/components/flex.js
var p12 = o13.forwardRef((r46, e45) => {
  const { className: s26, asChild: t35, as: m16 = "div", ...l13 } = v(r46, u2, u, r5);
  return o13.createElement(t35 ? e16 : m16, { ...l13, ref: e45, className: (0, import_classnames10.default)("rt-Flex", s26) });
});
p12.displayName = "Flex";

// node_modules/@radix-ui/themes/dist/esm/components/spinner.js
var n10 = __toESM(require_react(), 1);
var import_classnames11 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/spinner.props.js
var e20 = ["1", "2", "3"];
var s8 = { size: { type: "enum", className: "rt-r-size", values: e20, default: "2", responsive: true }, loading: { type: "boolean", default: true } };

// node_modules/@radix-ui/themes/dist/esm/components/spinner.js
var s9 = n10.forwardRef((i24, o59) => {
  const { className: a39, children: e45, loading: t35, ...m16 } = v(i24, s8, r5);
  if (!t35) return e45;
  const r46 = n10.createElement("span", { ...m16, ref: o59, className: (0, import_classnames11.default)("rt-Spinner", a39) }, n10.createElement("span", { className: "rt-SpinnerLeaf" }), n10.createElement("span", { className: "rt-SpinnerLeaf" }), n10.createElement("span", { className: "rt-SpinnerLeaf" }), n10.createElement("span", { className: "rt-SpinnerLeaf" }), n10.createElement("span", { className: "rt-SpinnerLeaf" }), n10.createElement("span", { className: "rt-SpinnerLeaf" }), n10.createElement("span", { className: "rt-SpinnerLeaf" }), n10.createElement("span", { className: "rt-SpinnerLeaf" }));
  return e45 === void 0 ? r46 : n10.createElement(p12, { asChild: true, position: "relative", align: "center", justify: "center" }, n10.createElement("span", null, n10.createElement("span", { "aria-hidden": true, style: { display: "contents", visibility: "hidden" }, inert: void 0 }, e45), n10.createElement(p12, { asChild: true, align: "center", justify: "center", position: "absolute", inset: "0" }, n10.createElement("span", null, r46))));
});
s9.displayName = "Spinner";

// node_modules/@radix-ui/themes/dist/esm/components/visually-hidden.js
var d4 = dist_exports8.Root;
var e21 = dist_exports8.Root;

// node_modules/@radix-ui/themes/dist/esm/helpers/map-prop-values.js
function s10(e45, t35) {
  if (e45 !== void 0) return typeof e45 == "string" ? t35(e45) : Object.fromEntries(Object.entries(e45).map(([n26, o59]) => [n26, t35(o59)]));
}
function p13(e45) {
  return e45 === "3" ? "3" : "2";
}
function r11(e45) {
  switch (e45) {
    case "1":
      return "1";
    case "2":
    case "3":
      return "2";
    case "4":
      return "3";
  }
}

// node_modules/@radix-ui/themes/dist/esm/components/_internal/base-button.js
var n11 = o14.forwardRef((t35, p37) => {
  const { size: i24 = i5.size.default } = t35, { className: a39, children: e45, asChild: m16, color: d10, radius: l13, disabled: s26 = t35.loading, ...u10 } = v(t35, i5, r5), f21 = m16 ? dist_exports.Root : "button";
  return o14.createElement(f21, { "data-disabled": s26 || void 0, "data-accent-color": d10, "data-radius": l13, ...u10, ref: p37, className: (0, import_classnames12.default)("rt-reset", "rt-BaseButton", a39), disabled: s26 }, t35.loading ? o14.createElement(o14.Fragment, null, o14.createElement("span", { style: { display: "contents", visibility: "hidden" }, "aria-hidden": true }, e45), o14.createElement(d4, null, e45), o14.createElement(p12, { asChild: true, align: "center", justify: "center", position: "absolute", inset: "0" }, o14.createElement("span", null, o14.createElement(s9, { size: s10(i24, r11) })))) : e45);
});
n11.displayName = "BaseButton";

// node_modules/@radix-ui/themes/dist/esm/components/button.js
var o15 = t8.forwardRef(({ className: e45, ...n26 }, r46) => t8.createElement(n11, { ...n26, ref: r46, className: (0, import_classnames13.default)("rt-Button", e45) }));
o15.displayName = "Button";

// node_modules/@radix-ui/themes/dist/esm/components/callout.js
var callout_exports = {};
__export(callout_exports, {
  Icon: () => m5,
  Root: () => n12,
  Text: () => u3
});
var o16 = __toESM(require_react(), 1);
var import_classnames14 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/callout.props.js
var t9 = ["1", "2", "3"];
var r12 = ["soft", "surface", "outline"];
var a11 = { ...o, size: { type: "enum", className: "rt-r-size", values: t9, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: r12, default: "soft" }, ...s3, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/callout.js
var a12 = o16.createContext({});
var n12 = o16.forwardRef((t35, l13) => {
  const { size: e45 = a11.size.default } = t35, { asChild: r46, children: C7, className: i24, color: c5, ...f21 } = v(t35, a11, r5), P9 = r46 ? dist_exports.Root : "div";
  return o16.createElement(P9, { "data-accent-color": c5, ...f21, className: (0, import_classnames14.default)("rt-CalloutRoot", i24), ref: l13 }, o16.createElement(a12.Provider, { value: o16.useMemo(() => ({ size: e45 }), [e45]) }, C7));
});
n12.displayName = "Callout.Root";
var m5 = o16.forwardRef(({ className: t35, ...l13 }, e45) => o16.createElement("div", { ...l13, className: (0, import_classnames14.default)("rt-CalloutIcon", t35), ref: e45 }));
m5.displayName = "Callout.Icon";
var u3 = o16.forwardRef(({ className: t35, ...l13 }, e45) => {
  const { size: r46 } = o16.useContext(a12);
  return o16.createElement(p, { as: "p", size: s10(r46, p13), ...l13, asChild: false, ref: e45, className: (0, import_classnames14.default)("rt-CalloutText", t35) });
});
u3.displayName = "Callout.Text";

// node_modules/@radix-ui/themes/dist/esm/components/card.js
var r14 = __toESM(require_react(), 1);
var import_classnames15 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/card.props.js
var e22 = ["1", "2", "3", "4", "5"];
var r13 = ["surface", "classic", "ghost"];
var a13 = { ...o, size: { type: "enum", className: "rt-r-size", values: e22, default: "1", responsive: true }, variant: { type: "enum", className: "rt-variant", values: r13, default: "surface" } };

// node_modules/@radix-ui/themes/dist/esm/components/card.js
var o17 = r14.forwardRef((p37, e45) => {
  const { asChild: t35, className: s26, ...a39 } = v(p37, a13, r5), m16 = t35 ? dist_exports.Root : "div";
  return r14.createElement(m16, { ref: e45, ...a39, className: (0, import_classnames15.default)("rt-reset", "rt-BaseCard", "rt-Card", s26) });
});
o17.displayName = "Card";

// node_modules/@radix-ui/themes/dist/esm/components/checkbox-cards.js
var checkbox_cards_exports = {};
__export(checkbox_cards_exports, {
  Item: () => k,
  Root: () => b
});
var o21 = __toESM(require_react(), 1);
var import_classnames17 = __toESM(require_classnames(), 1);

// node_modules/radix-ui/dist/internal.mjs
var Primitive2 = Primitive;
Primitive2.dispatchDiscreteCustomEvent = dispatchDiscreteCustomEvent;
Primitive2.Root = Primitive;

// node_modules/@radix-ui/themes/dist/esm/components/checkbox-group.primitive.js
var e23 = __toESM(require_react(), 1);
var { useDirection: A3 } = dist_exports3;
var P2 = "CheckboxGroup";
var [M, O] = dist_exports2.createContextScope(P2, [dist_exports6.createRovingFocusGroupScope, dist_exports14.createCheckboxScope]);
var I2 = dist_exports6.createRovingFocusGroupScope();
var g3 = dist_exports14.createCheckboxScope();
var [w, T2] = M(P2);
var v2 = e23.forwardRef((r46, n26) => {
  const { __scopeCheckboxGroup: o59, name: i24, defaultValue: c5, value: t35, required: p37 = false, disabled: s26 = false, orientation: h4, dir: l13, loop: b6 = true, onValueChange: u10, ...k3 } = r46, S5 = I2(o59), R6 = A3(l13), [E5 = [], a39] = useControllableState({ prop: t35, defaultProp: c5, onChange: u10 }), F = e23.useCallback((x4) => a39((m16 = []) => [...m16, x4]), [a39]), _ = e23.useCallback((x4) => a39((m16 = []) => m16.filter((V) => V !== x4)), [a39]);
  return e23.createElement(w, { scope: o59, name: i24, required: p37, disabled: s26, value: E5, onItemCheck: F, onItemUncheck: _ }, e23.createElement(dist_exports6.Root, { asChild: true, ...S5, orientation: h4, dir: R6, loop: b6 }, e23.createElement(Primitive2.div, { role: "group", "data-disabled": s26 ? "" : void 0, dir: R6, ...k3, ref: n26 })));
});
v2.displayName = P2;
var y = "CheckboxGroupItem";
var f4 = e23.forwardRef((r46, n26) => {
  const { __scopeCheckboxGroup: o59, disabled: i24, ...c5 } = r46, t35 = T2(y, o59), p37 = t35.disabled || i24, s26 = I2(o59), h4 = g3(o59), l13 = e23.useRef(null), b6 = useComposedRefs(n26, l13), u10 = t35.value?.includes(c5.value);
  return e23.createElement(dist_exports6.Item, { asChild: true, ...s26, focusable: !p37, active: u10 }, e23.createElement(dist_exports14.Root, { name: t35.name, disabled: p37, required: t35.required, checked: u10, ...h4, ...c5, ref: b6, onCheckedChange: (k3) => {
    k3 ? t35.onItemCheck(r46.value) : t35.onItemUncheck(r46.value);
  } }));
});
f4.displayName = y;
var B2 = "CheckboxGroupIndicator";
var G = e23.forwardRef((r46, n26) => {
  const { __scopeCheckboxGroup: o59, ...i24 } = r46, c5 = g3(o59);
  return e23.createElement(dist_exports14.Indicator, { ...c5, ...i24, ref: n26 });
});
G.displayName = B2;
var H2 = v2;
var K = f4;
var X = G;

// node_modules/@radix-ui/themes/dist/esm/components/grid.props.js
var a14 = ["div", "span"];
var n13 = ["none", "inline-grid", "grid"];
var p14 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var u4 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var i6 = ["row", "column", "dense", "row-dense", "column-dense"];
var l6 = ["start", "center", "end", "baseline", "stretch"];
var f5 = ["start", "center", "end", "between"];
var s13 = { as: { type: "enum", values: a14, default: "div" }, ...o, display: { type: "enum", className: "rt-r-display", values: n13, responsive: true }, areas: { type: "string", className: "rt-r-gta", customProperties: ["--grid-template-areas"], responsive: true }, columns: { type: "enum | string", className: "rt-r-gtc", customProperties: ["--grid-template-columns"], values: p14, parseValue: r15, responsive: true }, rows: { type: "enum | string", className: "rt-r-gtr", customProperties: ["--grid-template-rows"], values: u4, parseValue: r15, responsive: true }, flow: { type: "enum", className: "rt-r-gaf", values: i6, responsive: true }, align: { type: "enum", className: "rt-r-ai", values: l6, responsive: true }, justify: { type: "enum", className: "rt-r-jc", values: f5, parseValue: m6, responsive: true }, ...p10 };
function r15(e45) {
  return s13.columns.values.includes(e45) ? e45 : e45?.match(/^\d+$/) ? `repeat(${e45}, minmax(0, 1fr))` : e45;
}
function m6(e45) {
  return e45 === "between" ? "space-between" : e45;
}

// node_modules/@radix-ui/themes/dist/esm/components/checkbox-cards.props.js
var a15 = ["1", "2", "3"];
var t10 = ["surface", "classic"];
var p15 = { ...o, size: { type: "enum", className: "rt-r-size", values: a15, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t10, default: "surface" }, ...r2, ...o3, columns: { ...s13.columns, default: "repeat(auto-fit, minmax(200px, 1fr))" }, gap: { ...s13.gap, default: "4" } };

// node_modules/@radix-ui/themes/dist/esm/components/_internal/base-checkbox.props.js
var r16 = ["1", "2", "3"];
var o18 = ["classic", "surface", "soft"];
var t11 = { size: { type: "enum", className: "rt-r-size", values: r16, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: o18, default: "surface" }, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/grid.js
var r17 = __toESM(require_react(), 1);
var import_classnames16 = __toESM(require_classnames(), 1);
var o19 = r17.forwardRef((p37, s26) => {
  const { className: t35, asChild: e45, as: i24 = "div", ...m16 } = v(p37, s13, u, r5);
  return r17.createElement(e45 ? e16 : i24, { ...m16, ref: s26, className: (0, import_classnames16.default)("rt-Grid", t35) });
});
o19.displayName = "Grid";

// node_modules/@radix-ui/themes/dist/esm/components/icons.js
var import_react3 = __toESM(require_react(), 1);
var r18 = import_react3.default.forwardRef((e45, n26) => import_react3.default.createElement("svg", { width: "9", height: "9", viewBox: "0 0 9 9", fill: "currentcolor", xmlns: "http://www.w3.org/2000/svg", ...e45, ref: n26 }, import_react3.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M0.75 4.5C0.75 4.08579 1.08579 3.75 1.5 3.75H7.5C7.91421 3.75 8.25 4.08579 8.25 4.5C8.25 4.91421 7.91421 5.25 7.5 5.25H1.5C1.08579 5.25 0.75 4.91421 0.75 4.5Z" })));
r18.displayName = "ThickDividerHorizontalIcon";
var t12 = import_react3.default.forwardRef((e45, n26) => import_react3.default.createElement("svg", { width: "9", height: "9", viewBox: "0 0 9 9", fill: "currentcolor", xmlns: "http://www.w3.org/2000/svg", ...e45, ref: n26 }, import_react3.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8.53547 0.62293C8.88226 0.849446 8.97976 1.3142 8.75325 1.66099L4.5083 8.1599C4.38833 8.34356 4.19397 8.4655 3.9764 8.49358C3.75883 8.52167 3.53987 8.45309 3.3772 8.30591L0.616113 5.80777C0.308959 5.52987 0.285246 5.05559 0.563148 4.74844C0.84105 4.44128 1.31533 4.41757 1.62249 4.69547L3.73256 6.60459L7.49741 0.840706C7.72393 0.493916 8.18868 0.396414 8.53547 0.62293Z" })));
t12.displayName = "ThickCheckIcon";
var i7 = import_react3.default.forwardRef((e45, n26) => import_react3.default.createElement("svg", { width: "9", height: "9", viewBox: "0 0 9 9", fill: "currentcolor", xmlns: "http://www.w3.org/2000/svg", ...e45, ref: n26 }, import_react3.default.createElement("path", { d: "M0.135232 3.15803C0.324102 2.95657 0.640521 2.94637 0.841971 3.13523L4.5 6.56464L8.158 3.13523C8.3595 2.94637 8.6759 2.95657 8.8648 3.15803C9.0536 3.35949 9.0434 3.67591 8.842 3.86477L4.84197 7.6148C4.64964 7.7951 4.35036 7.7951 4.15803 7.6148L0.158031 3.86477C-0.0434285 3.67591 -0.0536285 3.35949 0.135232 3.15803Z" })));
i7.displayName = "ChevronDownIcon";
var l7 = import_react3.default.forwardRef((e45, n26) => import_react3.default.createElement("svg", { width: "9", height: "9", viewBox: "0 0 9 9", fill: "currentcolor", xmlns: "http://www.w3.org/2000/svg", ...e45, ref: n26 }, import_react3.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M3.23826 0.201711C3.54108 -0.0809141 4.01567 -0.0645489 4.29829 0.238264L7.79829 3.98826C8.06724 4.27642 8.06724 4.72359 7.79829 5.01174L4.29829 8.76174C4.01567 9.06455 3.54108 9.08092 3.23826 8.79829C2.93545 8.51567 2.91909 8.04108 3.20171 7.73826L6.22409 4.5L3.20171 1.26174C2.91909 0.958928 2.93545 0.484337 3.23826 0.201711Z" })));
l7.displayName = "ThickChevronRightIcon";

// node_modules/@radix-ui/themes/dist/esm/components/checkbox-cards.js
var x2 = "CheckboxCards";
var [G2] = dist_exports2.createContextScope(x2, [O]);
var d6 = O();
var [v3, N2] = G2(x2);
var b = o21.forwardRef((e45, s26) => {
  const { __scopeCheckboxCards: r46, className: c5, color: p37, ...C7 } = v(e45, p15, r5), t35 = d6(r46);
  return o21.createElement(v3, { scope: r46, size: e45.size, highContrast: e45.highContrast }, o21.createElement(o19, { asChild: true }, o21.createElement(H2, { ...t35, "data-accent-color": p37, ...C7, ref: s26, className: (0, import_classnames17.default)("rt-CheckboxCardsRoot", c5) })));
});
b.displayName = "CheckboxCards.Root";
var k = o21.forwardRef(({ __scopeCheckboxCards: e45, children: s26, className: r46, style: c5, ...p37 }, C7) => {
  const t35 = N2("CheckboxCardsItem", e45), i24 = d6(e45), { className: P9 } = v({ size: t35?.size, variant: "surface", highContrast: t35?.highContrast }, t11);
  return o21.createElement("label", { className: (0, import_classnames17.default)("rt-BaseCard", "rt-CheckboxCardsItem", r46), style: c5 }, s26, o21.createElement(K, { ...i24, ...p37, ref: C7, className: (0, import_classnames17.default)("rt-reset", "rt-BaseCheckboxRoot", "rt-CheckboxCardCheckbox", P9) }, o21.createElement(X, { ...i24, asChild: true, className: "rt-BaseCheckboxIndicator" }, o21.createElement(t12, null))));
});
k.displayName = "CheckboxCards.Item";

// node_modules/@radix-ui/themes/dist/esm/components/checkbox-group.js
var checkbox_group_exports = {};
__export(checkbox_group_exports, {
  Item: () => l8,
  Root: () => f6
});
var o22 = __toESM(require_react(), 1);
var import_classnames18 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/checkbox-group.props.js
var e24 = { ...o, ...t11 };

// node_modules/@radix-ui/themes/dist/esm/components/checkbox-group.js
var b2 = "CheckboxGroup";
var [N3] = dist_exports2.createContextScope(b2, [O]);
var G3 = O();
var [E2, P3] = N3(b2);
var f6 = o22.forwardRef(({ color: s26 = e24.color.default, highContrast: e45 = e24.highContrast.default, size: r46 = e24.size.default, variant: t35 = e24.variant.default, ...p37 }, m16) => {
  const { __scopeCheckboxGroup: c5, className: h4, ...I6 } = v(p37, r5), d10 = G3(c5);
  return o22.createElement(E2, { scope: c5, color: s26, size: r46, highContrast: e45, variant: t35 }, o22.createElement(H2, { ...d10, ...I6, ref: m16, className: (0, import_classnames18.default)("rt-CheckboxGroupRoot", h4) }));
});
f6.displayName = "CheckboxGroup.Root";
var l8 = o22.forwardRef((s26, e45) => {
  const { __scopeCheckboxGroup: r46, children: t35, className: p37, style: m16, ...c5 } = s26, { size: h4 } = P3("CheckboxGroupItem", r46);
  return t35 ? o22.createElement(p, { as: "label", size: h4, className: (0, import_classnames18.default)("rt-CheckboxGroupItem", p37), style: m16 }, o22.createElement(i8, { __scopeCheckboxGroup: r46, ...c5, ref: e45 }), t35 && o22.createElement("span", { className: "rt-CheckboxGroupItemInner" }, t35)) : o22.createElement(i8, { __scopeCheckboxGroup: r46, ...c5, ref: e45, className: p37, style: m16 });
});
l8.displayName = "CheckboxGroup.Item";
var i8 = o22.forwardRef(({ __scopeCheckboxGroup: s26, ...e45 }, r46) => {
  const t35 = P3("CheckboxGroupItemCheckbox", s26), p37 = G3(s26), { color: m16, className: c5 } = v({ ...e45, ...t35 }, e24, r5);
  return o22.createElement(K, { ...p37, "data-accent-color": m16, ...e45, ref: r46, className: (0, import_classnames18.default)("rt-reset", "rt-BaseCheckboxRoot", "rt-CheckboxGroupItemCheckbox", c5) }, o22.createElement(X, { ...p37, asChild: true, className: "rt-BaseCheckboxIndicator" }, o22.createElement(t12, null)));
});
i8.displayName = "CheckboxGroup.ItemCheckbox";

// node_modules/@radix-ui/themes/dist/esm/components/checkbox.js
var e25 = __toESM(require_react(), 1);
var import_classnames19 = __toESM(require_classnames(), 1);
var c = e25.forwardRef((p37, i24) => {
  const { className: s26, color: h4, checked: a39, defaultChecked: o59, onCheckedChange: m16, ...n26 } = v(p37, t11, r5), [r46, k3] = useControllableState({ prop: a39, defaultProp: o59, onChange: m16 });
  return e25.createElement(dist_exports14.Root, { "data-accent-color": h4, ...n26, defaultChecked: o59, checked: r46, onCheckedChange: k3, asChild: false, ref: i24, className: (0, import_classnames19.default)("rt-reset", "rt-BaseCheckboxRoot", "rt-CheckboxRoot", s26) }, e25.createElement(dist_exports14.Indicator, { asChild: true, className: "rt-BaseCheckboxIndicator rt-CheckboxIndicator" }, e25.createElement(r46 === "indeterminate" ? r18 : t12, null)));
});
c.displayName = "Checkbox";

// node_modules/@radix-ui/themes/dist/esm/components/code.js
var r19 = __toESM(require_react(), 1);
var import_classnames20 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/code.props.js
var a18 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var i9 = ["solid", "soft", "outline", "ghost"];
var f7 = { ...o, size: { type: "enum", className: "rt-r-size", values: a18, responsive: true }, variant: { type: "enum", className: "rt-variant", values: i9, default: "soft" }, ...t3, ...s3, ...o3, ...e6, ...r4 };

// node_modules/@radix-ui/themes/dist/esm/components/code.js
var p16 = r19.forwardRef((o59, t35) => {
  const { asChild: s26, className: m16, color: e45, ...d10 } = v(o59, f7, r5), n26 = o59.variant === "ghost" ? e45 || void 0 : e45, a39 = s26 ? dist_exports.Root : "code";
  return r19.createElement(a39, { "data-accent-color": n26, ...d10, ref: t35, className: (0, import_classnames20.default)("rt-reset", "rt-Code", m16) });
});
p16.displayName = "Code";

// node_modules/@radix-ui/themes/dist/esm/components/container.js
var o23 = __toESM(require_react(), 1);
var import_classnames21 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/container.props.js
var r20 = ["1", "2", "3", "4"];
var t13 = ["none", "initial"];
var p17 = ["left", "center", "right"];
var n14 = { ...o, size: { type: "enum", className: "rt-r-size", values: r20, default: "4", responsive: true }, display: { type: "enum", className: "rt-r-display", values: t13, parseValue: a19, responsive: true }, align: { type: "enum", className: "rt-r-ai", values: p17, parseValue: i10, responsive: true } };
function a19(e45) {
  return e45 === "initial" ? "flex" : e45;
}
function i10(e45) {
  return e45 === "left" ? "start" : e45 === "right" ? "end" : e45;
}

// node_modules/@radix-ui/themes/dist/esm/components/container.js
var p18 = o23.forwardRef(({ width: n26, minWidth: s26, maxWidth: i24, height: m16, minHeight: a39, maxHeight: f21, ...P9 }, l13) => {
  const { asChild: r46, children: C7, className: c5, ...y7 } = v(P9, n14, u, r5), { className: d10, style: h4 } = v({ width: n26, minWidth: s26, maxWidth: i24, height: m16, minHeight: a39, maxHeight: f21 }, t, e), u10 = r46 ? dist_exports.Root : "div";
  return o23.createElement(u10, { ...y7, ref: l13, className: (0, import_classnames21.default)("rt-Container", c5) }, d3({ asChild: r46, children: C7 }, (v11) => o23.createElement("div", { className: (0, import_classnames21.default)("rt-ContainerInner", d10), style: h4 }, v11)));
});
p18.displayName = "Container";

// node_modules/@radix-ui/themes/dist/esm/components/context-menu.js
var context_menu_exports = {};
__export(context_menu_exports, {
  CheckboxItem: () => G4,
  Content: () => v4,
  Group: () => N4,
  Item: () => R3,
  Label: () => y2,
  RadioGroup: () => T3,
  RadioItem: () => E3,
  Root: () => h,
  Separator: () => W,
  Sub: () => w2,
  SubContent: () => k2,
  SubTrigger: () => B3,
  Trigger: () => S2
});
var e26 = __toESM(require_react(), 1);
var import_classnames24 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/scroll-area.js
var r23 = __toESM(require_react(), 1);
var import_classnames23 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/scroll-area.props.js
var r21 = ["1", "2", "3"];
var o24 = ["vertical", "horizontal", "both"];
var t15 = { ...o, size: { type: "enum", className: "rt-r-size", values: r21, default: "1", responsive: true }, ...r7, scrollbars: { type: "enum", values: o24, default: "both" } };

// node_modules/@radix-ui/themes/dist/esm/helpers/extract-margin-props.js
function a20(r46) {
  const { m: t35, mx: m16, my: o59, mt: p37, mr: n26, mb: s26, ml: e45, ...i24 } = r46;
  return { m: t35, mx: m16, my: o59, mt: p37, mr: n26, mb: s26, ml: e45, rest: i24 };
}

// node_modules/@radix-ui/themes/dist/esm/helpers/get-margin-styles.js
var import_classnames22 = __toESM(require_classnames(), 1);
var r22 = r5.m.values;
function S(s26) {
  const [e45, t35] = R({ className: "rt-r-m", customProperties: ["--margin"], propValues: r22, value: s26.m }), [a39, o59] = R({ className: "rt-r-mx", customProperties: ["--margin-left", "--margin-right"], propValues: r22, value: s26.mx }), [l13, i24] = R({ className: "rt-r-my", customProperties: ["--margin-top", "--margin-bottom"], propValues: r22, value: s26.my }), [p37, u10] = R({ className: "rt-r-mt", customProperties: ["--margin-top"], propValues: r22, value: s26.mt }), [n26, c5] = R({ className: "rt-r-mr", customProperties: ["--margin-right"], propValues: r22, value: s26.mr }), [g8, P9] = R({ className: "rt-r-mb", customProperties: ["--margin-bottom"], propValues: r22, value: s26.mb }), [N8, C7] = R({ className: "rt-r-ml", customProperties: ["--margin-left"], propValues: r22, value: s26.ml });
  return [(0, import_classnames22.default)(e45, a39, l13, p37, n26, g8, N8), l2(t35, o59, i24, u10, c5, P9, C7)];
}

// node_modules/@radix-ui/themes/dist/esm/components/scroll-area.js
var c2 = r23.forwardRef((n26, S5) => {
  const { rest: f21, ...P9 } = a20(n26), [u10, A4] = S(P9), { asChild: a39, children: d10, className: y7, style: v11, type: t35, scrollHideDelay: N8 = t35 !== "scroll" ? 0 : void 0, dir: V, size: i24 = t15.size.default, radius: p37 = t15.radius.default, scrollbars: l13 = t15.scrollbars.default, ...b6 } = f21;
  return r23.createElement(dist_exports24.Root, { type: t35, scrollHideDelay: N8, className: (0, import_classnames23.default)("rt-ScrollAreaRoot", u10, y7), style: l2(A4, v11), asChild: a39 }, d3({ asChild: a39, children: d10 }, (g8) => r23.createElement(r23.Fragment, null, r23.createElement(dist_exports24.Viewport, { ...b6, ref: S5, className: "rt-ScrollAreaViewport" }, g8), r23.createElement("div", { className: "rt-ScrollAreaViewportFocusRing" }), l13 !== "vertical" ? r23.createElement(dist_exports24.Scrollbar, { "data-radius": p37, orientation: "horizontal", className: (0, import_classnames23.default)("rt-ScrollAreaScrollbar", g({ className: "rt-r-size", value: i24, propValues: t15.size.values })) }, r23.createElement(dist_exports24.Thumb, { className: "rt-ScrollAreaThumb" })) : null, l13 !== "horizontal" ? r23.createElement(dist_exports24.Scrollbar, { "data-radius": p37, orientation: "vertical", className: (0, import_classnames23.default)("rt-ScrollAreaScrollbar", g({ className: "rt-r-size", value: i24, propValues: t15.size.values })) }, r23.createElement(dist_exports24.Thumb, { className: "rt-ScrollAreaThumb" })) : null, l13 === "both" ? r23.createElement(dist_exports24.Corner, { className: "rt-ScrollAreaCorner" }) : null)));
});
c2.displayName = "ScrollArea";

// node_modules/@radix-ui/themes/dist/esm/components/_internal/base-menu.props.js
var o25 = ["1", "2"];
var r24 = ["solid", "soft"];
var n15 = { size: { type: "enum", className: "rt-r-size", values: o25, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: r24, default: "solid" }, ...r2, ...o3 };
var a21 = { ...o, ...r2, shortcut: { type: "string" } };
var i11 = { ...r2, shortcut: { type: "string" } };
var p19 = { ...r2 };

// node_modules/@radix-ui/themes/dist/esm/components/context-menu.js
var h = (t35) => e26.createElement(dist_exports15.Root, { ...t35 });
h.displayName = "ContextMenu.Root";
var S2 = e26.forwardRef(({ children: t35, ...n26 }, o59) => e26.createElement(dist_exports15.Trigger, { ...n26, ref: o59, asChild: true }, a4(t35)));
S2.displayName = "ContextMenu.Trigger";
var g4 = e26.createContext({});
var v4 = e26.forwardRef((t35, n26) => {
  const o59 = H(), { size: a39 = n15.size.default, variant: u10 = n15.variant.default, highContrast: i24 = n15.highContrast.default } = t35, { className: C7, children: m16, color: x4, container: M2, forceMount: l13, ...L2 } = v(t35, n15), c5 = x4 || o59.accentColor;
  return e26.createElement(dist_exports15.Portal, { container: M2, forceMount: l13 }, e26.createElement(R2, { asChild: true }, e26.createElement(dist_exports15.Content, { "data-accent-color": c5, alignOffset: -Number(a39) * 4, collisionPadding: 10, ...L2, asChild: false, ref: n26, className: (0, import_classnames24.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-ContextMenuContent", C7) }, e26.createElement(c2, { type: "auto" }, e26.createElement("div", { className: (0, import_classnames24.default)("rt-BaseMenuViewport", "rt-ContextMenuViewport") }, e26.createElement(g4.Provider, { value: e26.useMemo(() => ({ size: a39, variant: u10, color: c5, highContrast: i24 }), [a39, u10, c5, i24]) }, m16))))));
});
v4.displayName = "ContextMenu.Content";
var y2 = e26.forwardRef(({ className: t35, ...n26 }, o59) => e26.createElement(dist_exports15.Label, { ...n26, asChild: false, ref: o59, className: (0, import_classnames24.default)("rt-BaseMenuLabel", "rt-ContextMenuLabel", t35) }));
y2.displayName = "ContextMenu.Label";
var R3 = e26.forwardRef((t35, n26) => {
  const { className: o59, children: a39, color: u10 = a21.color.default, shortcut: i24, ...C7 } = t35;
  return e26.createElement(dist_exports15.Item, { "data-accent-color": u10, ...C7, ref: n26, className: (0, import_classnames24.default)("rt-reset", "rt-BaseMenuItem", "rt-ContextMenuItem", o59) }, e26.createElement(dist_exports.Slottable, null, a39), i24 && e26.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" }, i24));
});
R3.displayName = "ContextMenu.Item";
var N4 = e26.forwardRef(({ className: t35, ...n26 }, o59) => e26.createElement(dist_exports15.Group, { ...n26, asChild: false, ref: o59, className: (0, import_classnames24.default)("rt-BaseMenuGroup", "rt-ContextMenuGroup", t35) }));
N4.displayName = "ContextMenu.Group";
var T3 = e26.forwardRef(({ className: t35, ...n26 }, o59) => e26.createElement(dist_exports15.RadioGroup, { ...n26, asChild: false, ref: o59, className: (0, import_classnames24.default)("rt-BaseMenuRadioGroup", "rt-ContextMenuRadioGroup", t35) }));
T3.displayName = "ContextMenu.RadioGroup";
var E3 = e26.forwardRef((t35, n26) => {
  const { children: o59, className: a39, color: u10 = p19.color.default, ...i24 } = t35;
  return e26.createElement(dist_exports15.RadioItem, { ...i24, asChild: false, ref: n26, "data-accent-color": u10, className: (0, import_classnames24.default)("rt-BaseMenuItem", "rt-BaseMenuRadioItem", "rt-ContextMenuItem", "rt-ContextMenuRadioItem", a39) }, e26.createElement(dist_exports.Slottable, null, o59), e26.createElement(dist_exports15.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator" }, e26.createElement(t12, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })));
});
E3.displayName = "ContextMenu.RadioItem";
var G4 = e26.forwardRef((t35, n26) => {
  const { children: o59, className: a39, shortcut: u10, color: i24 = i11.color.default, ...C7 } = t35;
  return e26.createElement(dist_exports15.CheckboxItem, { ...C7, asChild: false, ref: n26, "data-accent-color": i24, className: (0, import_classnames24.default)("rt-BaseMenuItem", "rt-BaseMenuCheckboxItem", "rt-ContextMenuItem", "rt-ContextMenuCheckboxItem", a39) }, e26.createElement(dist_exports.Slottable, null, o59), e26.createElement(dist_exports15.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator" }, e26.createElement(t12, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })), u10 && e26.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" }, u10));
});
G4.displayName = "ContextMenu.CheckboxItem";
var w2 = (t35) => e26.createElement(dist_exports15.Sub, { ...t35 });
w2.displayName = "ContextMenu.Sub";
var B3 = e26.forwardRef((t35, n26) => {
  const { className: o59, children: a39, ...u10 } = t35;
  return e26.createElement(dist_exports15.SubTrigger, { ...u10, asChild: false, ref: n26, className: (0, import_classnames24.default)("rt-BaseMenuItem", "rt-BaseMenuSubTrigger", "rt-ContextMenuItem", "rt-ContextMenuSubTrigger", o59) }, a39, e26.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" }, e26.createElement(l7, { className: "rt-BaseMenuSubTriggerIcon rt-ContextMenuSubTriggerIcon" })));
});
B3.displayName = "ContextMenu.SubTrigger";
var k2 = e26.forwardRef((t35, n26) => {
  const { size: o59, variant: a39, color: u10, highContrast: i24 } = e26.useContext(g4), { className: C7, children: m16, container: x4, forceMount: M2, ...l13 } = v({ size: o59, variant: a39, color: u10, highContrast: i24, ...t35 }, n15);
  return e26.createElement(dist_exports15.Portal, { container: x4, forceMount: M2 }, e26.createElement(R2, { asChild: true }, e26.createElement(dist_exports15.SubContent, { "data-accent-color": u10, alignOffset: -Number(o59) * 4, sideOffset: 1, collisionPadding: 10, ...l13, asChild: false, ref: n26, className: (0, import_classnames24.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-BaseMenuSubContent", "rt-ContextMenuContent", "rt-ContextMenuSubContent", C7) }, e26.createElement(c2, { type: "auto" }, e26.createElement("div", { className: (0, import_classnames24.default)("rt-BaseMenuViewport", "rt-ContextMenuViewport") }, m16)))));
});
k2.displayName = "ContextMenu.SubContent";
var W = e26.forwardRef(({ className: t35, ...n26 }, o59) => e26.createElement(dist_exports15.Separator, { ...n26, asChild: false, ref: o59, className: (0, import_classnames24.default)("rt-BaseMenuSeparator", "rt-ContextMenuSeparator", t35) }));
W.displayName = "ContextMenu.Separator";

// node_modules/@radix-ui/themes/dist/esm/components/data-list.js
var data_list_exports = {};
__export(data_list_exports, {
  Item: () => m8,
  Label: () => L,
  Root: () => i13,
  Value: () => l9
});
var import_classnames25 = __toESM(require_classnames(), 1);
var t16 = __toESM(require_react(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/data-list.props.js
var s16 = ["start", "center", "end", "baseline", "stretch"];
var i12 = ["horizontal", "vertical"];
var a22 = ["1", "2", "3"];
var n16 = { orientation: { type: "enum", className: "rt-r-orientation", values: i12, default: "horizontal", responsive: true }, size: { type: "enum", className: "rt-r-size", values: a22, default: "2", responsive: true }, trim: { ...r3.trim, className: "rt-r-trim" } };
var p20 = { align: { type: "enum", className: "rt-r-ai", values: s16, responsive: true } };
var m7 = { ...t, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/data-list.js
var i13 = t16.forwardRef((a39, e45) => {
  const { className: s26, ...o59 } = v(a39, n16, r5);
  return t16.createElement(p, { asChild: true }, t16.createElement("dl", { ...o59, ref: e45, className: (0, import_classnames25.default)("rt-DataListRoot", s26) }));
});
i13.displayName = "DataList.Root";
var m8 = t16.forwardRef((a39, e45) => {
  const { className: s26, ...o59 } = v(a39, p20);
  return t16.createElement("div", { ...o59, ref: e45, className: (0, import_classnames25.default)("rt-DataListItem", s26) });
});
m8.displayName = "DataList.Item";
var L = t16.forwardRef((a39, e45) => {
  const { className: s26, color: o59, ...n26 } = v(a39, m7);
  return t16.createElement("dt", { ...n26, "data-accent-color": o59, ref: e45, className: (0, import_classnames25.default)("rt-DataListLabel", s26) });
});
L.displayName = "DataList.Label";
var l9 = t16.forwardRef(({ children: a39, className: e45, ...s26 }, o59) => t16.createElement("dd", { ...s26, ref: o59, className: (0, import_classnames25.default)(e45, "rt-DataListValue") }, a39));
l9.displayName = "DataList.Value";

// node_modules/@radix-ui/themes/dist/esm/components/dialog.js
var dialog_exports = {};
__export(dialog_exports, {
  Close: () => D2,
  Content: () => p21,
  Description: () => m9,
  Root: () => s17,
  Title: () => g5,
  Trigger: () => n17
});
var o26 = __toESM(require_react(), 1);
var import_classnames26 = __toESM(require_classnames(), 1);
var s17 = (e45) => o26.createElement(dist_exports5.Root, { ...e45, modal: true });
s17.displayName = "Dialog.Root";
var n17 = o26.forwardRef(({ children: e45, ...i24 }, r46) => o26.createElement(dist_exports5.Trigger, { ...i24, ref: r46, asChild: true }, a4(e45)));
n17.displayName = "Dialog.Trigger";
var p21 = o26.forwardRef(({ align: e45, ...i24 }, r46) => {
  const { align: P9, ...f21 } = s2, { className: C7 } = v({ align: e45 }, { align: P9 }), { className: d10, forceMount: c5, container: y7, ...T6 } = v(i24, f21);
  return o26.createElement(dist_exports5.Portal, { container: y7, forceMount: c5 }, o26.createElement(R2, { asChild: true }, o26.createElement(dist_exports5.Overlay, { className: "rt-BaseDialogOverlay rt-DialogOverlay" }, o26.createElement("div", { className: "rt-BaseDialogScroll rt-DialogScroll" }, o26.createElement("div", { className: `rt-BaseDialogScrollPadding rt-DialogScrollPadding ${C7}` }, o26.createElement(dist_exports5.Content, { ...T6, ref: r46, className: (0, import_classnames26.default)("rt-BaseDialogContent", "rt-DialogContent", d10) }))))));
});
p21.displayName = "Dialog.Content";
var g5 = o26.forwardRef((e45, i24) => o26.createElement(dist_exports5.Title, { asChild: true }, o26.createElement(r6, { size: "5", mb: "3", trim: "start", ...e45, asChild: false, ref: i24 })));
g5.displayName = "Dialog.Title";
var m9 = o26.forwardRef((e45, i24) => o26.createElement(dist_exports5.Description, { asChild: true }, o26.createElement(p, { as: "p", size: "3", ...e45, asChild: false, ref: i24 })));
m9.displayName = "Dialog.Description";
var D2 = o26.forwardRef(({ children: e45, ...i24 }, r46) => o26.createElement(dist_exports5.Close, { ...i24, ref: r46, asChild: true }, a4(e45)));
D2.displayName = "Dialog.Close";

// node_modules/@radix-ui/themes/dist/esm/components/dropdown-menu.js
var dropdown_menu_exports = {};
__export(dropdown_menu_exports, {
  CheckboxItem: () => T4,
  Content: () => g6,
  Group: () => R4,
  Item: () => v6,
  Label: () => y3,
  RadioGroup: () => S3,
  RadioItem: () => x3,
  Root: () => I3,
  Separator: () => B4,
  Sub: () => N5,
  SubContent: () => G5,
  SubTrigger: () => E4,
  Trigger: () => h2,
  TriggerIcon: () => i7
});
var o27 = __toESM(require_react(), 1);
var import_classnames27 = __toESM(require_classnames(), 1);
var I3 = (e45) => o27.createElement(dist_exports7.Root, { ...e45 });
I3.displayName = "DropdownMenu.Root";
var h2 = o27.forwardRef(({ children: e45, ...n26 }, r46) => o27.createElement(dist_exports7.Trigger, { ...n26, ref: r46, asChild: true }, a4(e45)));
h2.displayName = "DropdownMenu.Trigger";
var b3 = o27.createContext({});
var g6 = o27.forwardRef((e45, n26) => {
  const r46 = H(), { size: s26 = n15.size.default, variant: p37 = n15.variant.default, highContrast: u10 = n15.highContrast.default } = e45, { className: a39, children: m16, color: M2, container: w3, forceMount: D3, ...k3 } = v(e45, n15), l13 = M2 || r46.accentColor;
  return o27.createElement(dist_exports7.Portal, { container: w3, forceMount: D3 }, o27.createElement(R2, { asChild: true }, o27.createElement(dist_exports7.Content, { "data-accent-color": l13, align: "start", sideOffset: 4, collisionPadding: 10, ...k3, asChild: false, ref: n26, className: (0, import_classnames27.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-DropdownMenuContent", a39) }, o27.createElement(c2, { type: "auto" }, o27.createElement("div", { className: (0, import_classnames27.default)("rt-BaseMenuViewport", "rt-DropdownMenuViewport") }, o27.createElement(b3.Provider, { value: o27.useMemo(() => ({ size: s26, variant: p37, color: l13, highContrast: u10 }), [s26, p37, l13, u10]) }, m16))))));
});
g6.displayName = "DropdownMenu.Content";
var y3 = o27.forwardRef(({ className: e45, ...n26 }, r46) => o27.createElement(dist_exports7.Label, { ...n26, asChild: false, ref: r46, className: (0, import_classnames27.default)("rt-BaseMenuLabel", "rt-DropdownMenuLabel", e45) }));
y3.displayName = "DropdownMenu.Label";
var v6 = o27.forwardRef((e45, n26) => {
  const { className: r46, children: s26, color: p37 = a21.color.default, shortcut: u10, ...a39 } = e45;
  return o27.createElement(dist_exports7.Item, { "data-accent-color": p37, ...a39, ref: n26, className: (0, import_classnames27.default)("rt-reset", "rt-BaseMenuItem", "rt-DropdownMenuItem", r46) }, o27.createElement(dist_exports.Slottable, null, s26), u10 && o27.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, u10));
});
v6.displayName = "DropdownMenu.Item";
var R4 = o27.forwardRef(({ className: e45, ...n26 }, r46) => o27.createElement(dist_exports7.Group, { ...n26, asChild: false, ref: r46, className: (0, import_classnames27.default)("rt-BaseMenuGroup", "rt-DropdownMenuGroup", e45) }));
R4.displayName = "DropdownMenu.Group";
var S3 = o27.forwardRef(({ className: e45, ...n26 }, r46) => o27.createElement(dist_exports7.RadioGroup, { ...n26, asChild: false, ref: r46, className: (0, import_classnames27.default)("rt-BaseMenuRadioGroup", "rt-DropdownMenuRadioGroup", e45) }));
S3.displayName = "DropdownMenu.RadioGroup";
var x3 = o27.forwardRef((e45, n26) => {
  const { children: r46, className: s26, color: p37 = p19.color.default, ...u10 } = e45;
  return o27.createElement(dist_exports7.RadioItem, { ...u10, asChild: false, ref: n26, "data-accent-color": p37, className: (0, import_classnames27.default)("rt-BaseMenuItem", "rt-BaseMenuRadioItem", "rt-DropdownMenuItem", "rt-DropdownMenuRadioItem", s26) }, r46, o27.createElement(dist_exports7.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" }, o27.createElement(t12, { className: "rt-BaseMenuItemIndicatorIcon rt-DropdownMenuItemIndicatorIcon" })));
});
x3.displayName = "DropdownMenu.RadioItem";
var T4 = o27.forwardRef((e45, n26) => {
  const { children: r46, className: s26, shortcut: p37, color: u10 = i11.color.default, ...a39 } = e45;
  return o27.createElement(dist_exports7.CheckboxItem, { ...a39, asChild: false, ref: n26, "data-accent-color": u10, className: (0, import_classnames27.default)("rt-BaseMenuItem", "rt-BaseMenuCheckboxItem", "rt-DropdownMenuItem", "rt-DropdownMenuCheckboxItem", s26) }, r46, o27.createElement(dist_exports7.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" }, o27.createElement(t12, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })), p37 && o27.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, p37));
});
T4.displayName = "DropdownMenu.CheckboxItem";
var N5 = (e45) => o27.createElement(dist_exports7.Sub, { ...e45 });
N5.displayName = "DropdownMenu.Sub";
var E4 = o27.forwardRef((e45, n26) => {
  const { className: r46, children: s26, ...p37 } = e45;
  return o27.createElement(dist_exports7.SubTrigger, { ...p37, asChild: false, ref: n26, className: (0, import_classnames27.default)("rt-BaseMenuItem", "rt-BaseMenuSubTrigger", "rt-DropdownMenuItem", "rt-DropdownMenuSubTrigger", r46) }, s26, o27.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, o27.createElement(l7, { className: "rt-BaseMenuSubTriggerIcon rt-DropdownMenuSubtriggerIcon" })));
});
E4.displayName = "DropdownMenu.SubTrigger";
var G5 = o27.forwardRef((e45, n26) => {
  const { size: r46, variant: s26, color: p37, highContrast: u10 } = o27.useContext(b3), { className: a39, children: m16, container: M2, forceMount: w3, ...D3 } = v({ size: r46, variant: s26, color: p37, highContrast: u10, ...e45 }, n15);
  return o27.createElement(dist_exports7.Portal, { container: M2, forceMount: w3 }, o27.createElement(R2, { asChild: true }, o27.createElement(dist_exports7.SubContent, { "data-accent-color": p37, alignOffset: -Number(r46) * 4, sideOffset: 1, collisionPadding: 10, ...D3, asChild: false, ref: n26, className: (0, import_classnames27.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-BaseMenuSubContent", "rt-DropdownMenuContent", "rt-DropdownMenuSubContent", a39) }, o27.createElement(c2, { type: "auto" }, o27.createElement("div", { className: (0, import_classnames27.default)("rt-BaseMenuViewport", "rt-DropdownMenuViewport") }, m16)))));
});
G5.displayName = "DropdownMenu.SubContent";
var B4 = o27.forwardRef(({ className: e45, ...n26 }, r46) => o27.createElement(dist_exports7.Separator, { ...n26, asChild: false, ref: r46, className: (0, import_classnames27.default)("rt-BaseMenuSeparator", "rt-DropdownMenuSeparator", e45) }));
B4.displayName = "DropdownMenu.Separator";

// node_modules/@radix-ui/themes/dist/esm/components/em.js
var o28 = __toESM(require_react(), 1);
var import_classnames28 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/em.props.js
var t17 = { ...o, ...e6, ...r4 };

// node_modules/@radix-ui/themes/dist/esm/components/em.js
var e27 = o28.forwardRef((p37, m16) => {
  const { asChild: r46, className: t35, ...s26 } = v(p37, t17), f21 = r46 ? dist_exports.Root : "em";
  return o28.createElement(f21, { ...s26, ref: m16, className: (0, import_classnames28.default)("rt-Em", t35) });
});
e27.displayName = "Em";

// node_modules/@radix-ui/themes/dist/esm/components/hover-card.js
var hover_card_exports = {};
__export(hover_card_exports, {
  Content: () => C3,
  Root: () => p23,
  Trigger: () => s18
});
var r27 = __toESM(require_react(), 1);
var import_classnames29 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/hover-card.props.js
var r26 = ["1", "2", "3"];
var p22 = { ...o, size: { type: "enum", className: "rt-r-size", values: r26, default: "2", responsive: true }, width: t.width, minWidth: t.minWidth, maxWidth: { ...t.maxWidth, default: "480px" }, ...e };

// node_modules/@radix-ui/themes/dist/esm/components/hover-card.js
var p23 = (e45) => r27.createElement(dist_exports17.Root, { closeDelay: 150, openDelay: 200, ...e45 });
p23.displayName = "HoverCard.Root";
var s18 = r27.forwardRef(({ children: e45, className: t35, ...n26 }, a39) => r27.createElement(dist_exports17.Trigger, { ref: a39, className: (0, import_classnames29.default)("rt-HoverCardTrigger", t35), ...n26, asChild: true }, a4(e45)));
s18.displayName = "HoverCard.Trigger";
var C3 = r27.forwardRef((e45, t35) => {
  const { className: n26, forceMount: a39, container: m16, ...d10 } = v(e45, p22);
  return r27.createElement(dist_exports17.Portal, { container: m16, forceMount: a39 }, r27.createElement(R2, { asChild: true }, r27.createElement(dist_exports17.Content, { align: "start", sideOffset: 8, collisionPadding: 10, ...d10, ref: t35, className: (0, import_classnames29.default)("rt-PopperContent", "rt-HoverCardContent", n26) })));
});
C3.displayName = "HoverCard.Content";

// node_modules/@radix-ui/themes/dist/esm/components/icon-button.js
var t18 = __toESM(require_react(), 1);
var import_classnames30 = __toESM(require_classnames(), 1);
var o29 = t18.forwardRef(({ className: e45, ...n26 }, r46) => t18.createElement(n11, { ...n26, ref: r46, className: (0, import_classnames30.default)("rt-IconButton", e45) }));
o29.displayName = "IconButton";

// node_modules/@radix-ui/themes/dist/esm/components/inset.js
var o30 = __toESM(require_react(), 1);
var import_classnames31 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/inset.props.js
var a23 = ["all", "x", "y", "top", "bottom", "left", "right"];
var t19 = ["border-box", "padding-box"];
var e28 = ["current", "0"];
var u5 = { ...o, side: { type: "enum", className: "rt-r-side", values: a23, default: "all", responsive: true }, clip: { type: "enum", className: "rt-r-clip", values: t19, default: "border-box", responsive: true }, p: { type: "enum", className: "rt-r-p", values: e28, parseValue: p24, responsive: true }, px: { type: "enum", className: "rt-r-px", values: e28, parseValue: p24, responsive: true }, py: { type: "enum", className: "rt-r-py", values: e28, parseValue: p24, responsive: true }, pt: { type: "enum", className: "rt-r-pt", values: e28, parseValue: p24, responsive: true }, pr: { type: "enum", className: "rt-r-pr", values: e28, parseValue: p24, responsive: true }, pb: { type: "enum", className: "rt-r-pb", values: e28, parseValue: p24, responsive: true }, pl: { type: "enum", className: "rt-r-pl", values: e28, parseValue: p24, responsive: true } };
function p24(s26) {
  return s26 === "current" ? "inset" : s26;
}

// node_modules/@radix-ui/themes/dist/esm/components/inset.js
var e29 = o30.forwardRef((r46, t35) => {
  const { asChild: p37, className: s26, ...n26 } = v(r46, u5, r5), m16 = p37 ? dist_exports.Root : "div";
  return o30.createElement(m16, { ...n26, ref: t35, className: (0, import_classnames31.default)("rt-Inset", s26) });
});
e29.displayName = "Inset";

// node_modules/@radix-ui/themes/dist/esm/components/kbd.js
var o32 = __toESM(require_react(), 1);
var import_classnames32 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/kbd.props.js
var e30 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var o31 = { ...o, size: { type: "enum", className: "rt-r-size", values: e30, responsive: true } };

// node_modules/@radix-ui/themes/dist/esm/components/kbd.js
var r28 = o32.forwardRef((p37, e45) => {
  const { asChild: t35, className: s26, ...m16 } = v(p37, o31, r5), d10 = t35 ? dist_exports.Root : "kbd";
  return o32.createElement(d10, { ...m16, ref: e45, className: (0, import_classnames32.default)("rt-reset", "rt-Kbd", s26) });
});
r28.displayName = "Kbd";

// node_modules/@radix-ui/themes/dist/esm/components/link.js
var o33 = __toESM(require_react(), 1);
var import_classnames33 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/link.props.js
var n19 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var f11 = ["auto", "always", "hover", "none"];
var m10 = { ...o, size: { type: "enum", className: "rt-r-size", values: n19, responsive: true }, ...t3, ...r3, ...e6, ...r4, underline: { type: "enum", className: "rt-underline", values: f11, default: "auto" }, ...s3, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/link.js
var e31 = o33.forwardRef((p37, t35) => {
  const { children: r46, className: s26, color: n26, asChild: i24, ...m16 } = v(p37, m10);
  return o33.createElement(p, { ...m16, "data-accent-color": n26, ref: t35, asChild: true, className: (0, import_classnames33.default)("rt-reset", "rt-Link", s26) }, i24 ? r46 : o33.createElement("a", null, r46));
});
e31.displayName = "Link";

// node_modules/@radix-ui/themes/dist/esm/components/popover.js
var popover_exports = {};
__export(popover_exports, {
  Anchor: () => m11,
  Close: () => v7,
  Content: () => i16,
  Root: () => P4,
  Trigger: () => s20
});
var o34 = __toESM(require_react(), 1);
var import_classnames34 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/popover.props.js
var p25 = ["1", "2", "3", "4"];
var r29 = { ...o, size: { type: "enum", className: "rt-r-size", values: p25, default: "2", responsive: true }, width: t.width, minWidth: t.minWidth, maxWidth: { ...t.maxWidth, default: "480px" }, ...e };

// node_modules/@radix-ui/themes/dist/esm/components/popover.js
var P4 = (e45) => o34.createElement(dist_exports21.Root, { ...e45 });
P4.displayName = "Popover.Root";
var s20 = o34.forwardRef(({ children: e45, ...r46 }, t35) => o34.createElement(dist_exports21.Trigger, { ...r46, ref: t35, asChild: true }, a4(e45)));
s20.displayName = "Popover.Trigger";
var i16 = o34.forwardRef((e45, r46) => {
  const { className: t35, forceMount: a39, container: f21, ...l13 } = v(e45, r29);
  return o34.createElement(dist_exports21.Portal, { container: f21, forceMount: a39 }, o34.createElement(R2, { asChild: true }, o34.createElement(dist_exports21.Content, { align: "start", sideOffset: 8, collisionPadding: 10, ...l13, ref: r46, className: (0, import_classnames34.default)("rt-PopperContent", "rt-PopoverContent", t35) })));
});
i16.displayName = "Popover.Content";
var v7 = o34.forwardRef(({ children: e45, ...r46 }, t35) => o34.createElement(dist_exports21.Close, { ...r46, ref: t35, asChild: true }, a4(e45)));
v7.displayName = "Popover.Close";
var m11 = o34.forwardRef(({ children: e45, ...r46 }, t35) => o34.createElement(dist_exports21.Anchor, { ...r46, ref: t35 }));
m11.displayName = "Popover.Anchor";

// node_modules/@radix-ui/themes/dist/esm/components/portal.js
var r30 = dist_exports4.Root;
var P5 = dist_exports4.Root;

// node_modules/@radix-ui/themes/dist/esm/components/progress.js
var o36 = __toESM(require_react(), 1);
var import_classnames35 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/progress.props.js
var o35 = ["1", "2", "3"];
var t20 = ["classic", "surface", "soft"];
var a25 = { size: { type: "enum", className: "rt-r-size", values: o35, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t20, default: "surface" }, ...r2, ...o3, ...r7, duration: { type: "string" } };

// node_modules/@radix-ui/themes/dist/esm/components/progress.js
var s21 = o36.forwardRef((p37, t35) => {
  const { className: m16, style: i24, color: a39, radius: n26, duration: P9, ...r46 } = v(p37, a25, r5);
  return o36.createElement(dist_exports22.Root, { "data-accent-color": a39, "data-radius": n26, ref: t35, className: (0, import_classnames35.default)("rt-ProgressRoot", m16), style: l2({ "--progress-duration": "value" in r46 ? void 0 : P9, "--progress-value": "value" in r46 ? r46.value : void 0, "--progress-max": "max" in r46 ? r46.max : void 0 }, i24), ...r46, asChild: false }, o36.createElement(dist_exports22.Indicator, { className: "rt-ProgressIndicator" }));
});
s21.displayName = "Progress";

// node_modules/@radix-ui/themes/dist/esm/components/quote.js
var o37 = __toESM(require_react(), 1);
var import_classnames36 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/quote.props.js
var p26 = { ...o, ...e6, ...r4 };

// node_modules/@radix-ui/themes/dist/esm/components/quote.js
var e32 = o37.forwardRef((t35, p37) => {
  const { asChild: r46, className: s26, ...m16 } = v(t35, p26), f21 = r46 ? dist_exports.Root : "q";
  return o37.createElement(f21, { ...m16, ref: p37, className: (0, import_classnames36.default)("rt-Quote", s26) });
});
e32.displayName = "Quote";

// node_modules/@radix-ui/themes/dist/esm/components/radio-cards.js
var radio_cards_exports = {};
__export(radio_cards_exports, {
  Item: () => i17,
  Root: () => p28
});
var o38 = __toESM(require_react(), 1);
var import_classnames37 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/radio-cards.props.js
var a26 = ["1", "2", "3"];
var t21 = ["surface", "classic"];
var p27 = { ...o, size: { type: "enum", className: "rt-r-size", values: a26, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t21, default: "surface" }, ...r2, ...o3, columns: { ...s13.columns, default: "repeat(auto-fit, minmax(160px, 1fr))" }, gap: { ...s13.gap, default: "4" } };

// node_modules/@radix-ui/themes/dist/esm/components/radio-cards.js
var p28 = o38.forwardRef((r46, t35) => {
  const { className: e45, color: d10, ...m16 } = v(r46, p27, r5);
  return o38.createElement(o19, { asChild: true }, o38.createElement(dist_exports23.Root, { "data-accent-color": d10, ...m16, ref: t35, className: (0, import_classnames37.default)("rt-RadioCardsRoot", e45) }));
});
p28.displayName = "RadioCards.Root";
var i17 = o38.forwardRef(({ className: r46, ...t35 }, e45) => o38.createElement(dist_exports23.Item, { ...t35, asChild: false, ref: e45, className: (0, import_classnames37.default)("rt-reset", "rt-BaseCard", "rt-RadioCardsItem", r46) }));
i17.displayName = "RadioCards.Item";

// node_modules/@radix-ui/themes/dist/esm/components/radio-group.js
var radio_group_exports = {};
__export(radio_group_exports, {
  Item: () => y4,
  Root: () => I4
});
var o40 = __toESM(require_react(), 1);
var import_classnames38 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/radio-group.props.js
var o39 = ["1", "2", "3"];
var t22 = ["classic", "surface", "soft"];
var a28 = { ...o, size: { type: "enum", className: "rt-r-size", values: o39, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t22, default: "surface" }, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/radio-group.js
var f13 = "RadioGroup";
var [v8] = dist_exports2.createContextScope(f13, [dist_exports23.createRadioGroupScope]);
var P6 = dist_exports23.createRadioGroupScope();
var [S4, l10] = v8(f13);
var I4 = o40.forwardRef(({ color: a39 = a28.color.default, highContrast: e45 = a28.highContrast.default, size: r46 = a28.size.default, variant: t35 = a28.variant.default, ...i24 }, s26) => {
  const { __scopeRadioGroup: p37, className: m16, ...x4 } = v(i24, r5), C7 = P6(p37);
  return o40.createElement(S4, { scope: p37, color: a39, highContrast: e45, size: r46, variant: t35 }, o40.createElement(dist_exports23.Root, { ...C7, ...x4, ref: s26, className: (0, import_classnames38.default)("rt-RadioGroupRoot", m16) }));
});
I4.displayName = "RadioGroup.Root";
var y4 = o40.forwardRef((a39, e45) => {
  const { __scopeRadioGroup: r46, children: t35, className: i24, style: s26, ...p37 } = a39, { size: m16 } = l10("RadioGroupItem", r46);
  return t35 ? o40.createElement(p, { as: "label", size: m16, className: (0, import_classnames38.default)("rt-RadioGroupItem", i24), style: s26 }, o40.createElement(n21, { __scopeRadioGroup: r46, ...p37, ref: e45 }), t35 && o40.createElement("span", { className: "rt-RadioGroupItemInner" }, t35)) : o40.createElement(n21, { __scopeRadioGroup: r46, ...p37, ref: e45, className: i24, style: s26 });
});
y4.displayName = "RadioGroup.Item";
var n21 = o40.forwardRef(({ __scopeRadioGroup: a39, ...e45 }, r46) => {
  const t35 = l10("RadioGroupItemRadio", a39), i24 = P6(a39), { color: s26, className: p37 } = v({ ...e45, ...t35 }, a28, r5);
  return o40.createElement(dist_exports23.Item, { ...i24, "data-accent-color": s26, ...e45, asChild: false, ref: r46, className: (0, import_classnames38.default)("rt-reset", "rt-BaseRadioRoot", p37) });
});
n21.displayName = "RadioGroup.ItemRadio";

// node_modules/@radix-ui/themes/dist/esm/components/radio.js
var o42 = __toESM(require_react(), 1);
var import_classnames39 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/_internal/base-radio.props.js
var r31 = ["1", "2", "3"];
var o41 = ["classic", "surface", "soft"];
var t23 = { size: { type: "enum", className: "rt-r-size", values: r31, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: o41, default: "surface" }, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/radio.js
var e33 = o42.forwardRef((r46, t35) => {
  const p37 = o42.useRef(null), { className: a39, color: s26, onChange: i24, onValueChange: n26, ...m16 } = v(r46, t23, r5);
  return o42.createElement("input", { type: "radio", "data-accent-color": s26, ...m16, onChange: composeEventHandlers(i24, (d10) => n26?.(d10.currentTarget.value)), ref: composeRefs(p37, t35), className: (0, import_classnames39.default)("rt-reset", "rt-BaseRadioRoot", "rt-RadioRoot", a39) });
});
e33.displayName = "Radio";

// node_modules/@radix-ui/themes/dist/esm/components/reset.js
var e34 = __toESM(require_react(), 1);
var import_classnames40 = __toESM(require_classnames(), 1);
var o43 = e34.forwardRef(({ className: t35, children: r46, ...s26 }, p37) => e34.createElement(dist_exports.Root, { ...s26, ref: p37, className: (0, import_classnames40.default)("rt-reset", t35) }, a4(r46)));
o43.displayName = "Reset";

// node_modules/@radix-ui/themes/dist/esm/components/segmented-control.js
var segmented_control_exports = {};
__export(segmented_control_exports, {
  Item: () => l11,
  Root: () => p29
});
var e35 = __toESM(require_react(), 1);
var import_classnames41 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/segmented-control.props.js
var s22 = ["1", "2", "3"];
var a29 = ["surface", "classic"];
var o44 = { disabled: { type: "boolean", className: "disabled", default: false }, size: { type: "enum", className: "rt-r-size", values: s22, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: a29, default: "surface" }, ...r7 };

// node_modules/@radix-ui/themes/dist/esm/components/segmented-control.js
var p29 = e35.forwardRef((o59, t35) => {
  const { className: r46, children: n26, radius: d10, value: i24, defaultValue: g8, onValueChange: f21, ...P9 } = v(o59, o44, r5), [u10, C7] = useControllableState({ prop: i24, onChange: f21, defaultProp: g8 });
  return e35.createElement(dist_exports30.Root, { "data-disabled": o59.disabled || void 0, "data-radius": d10, ref: t35, className: (0, import_classnames41.default)("rt-SegmentedControlRoot", r46), onValueChange: (s26) => {
    s26 && C7(s26);
  }, ...P9, type: "single", value: u10, asChild: false, disabled: !!o59.disabled }, n26, e35.createElement("div", { className: "rt-SegmentedControlIndicator" }));
});
p29.displayName = "SegmentedControl.Root";
var l11 = e35.forwardRef(({ children: o59, className: t35, ...r46 }, n26) => e35.createElement(dist_exports30.Item, { ref: n26, className: (0, import_classnames41.default)("rt-reset", "rt-SegmentedControlItem", t35), ...r46, disabled: false, asChild: false }, e35.createElement("span", { className: "rt-SegmentedControlItemSeparator" }), e35.createElement("span", { className: "rt-SegmentedControlItemLabel" }, e35.createElement("span", { className: "rt-SegmentedControlItemLabelActive" }, o59), e35.createElement("span", { className: "rt-SegmentedControlItemLabelInactive", "aria-hidden": true }, o59))));
l11.displayName = "SegmentedControl.Item";

// node_modules/@radix-ui/themes/dist/esm/components/section.js
var o46 = __toESM(require_react(), 1);
var import_classnames42 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/section.props.js
var p30 = ["1", "2", "3", "4"];
var o45 = ["none", "initial"];
var t24 = { ...o, size: { type: "enum", className: "rt-r-size", values: p30, default: "3", responsive: true }, display: { type: "enum", className: "rt-r-display", values: o45, parseValue: r32, responsive: true } };
function r32(e45) {
  return e45 === "initial" ? "block" : e45;
}

// node_modules/@radix-ui/themes/dist/esm/components/section.js
var r33 = o46.forwardRef((t35, p37) => {
  const { asChild: e45, className: s26, ...m16 } = v(t35, t24, u, r5), i24 = e45 ? dist_exports.Root : "section";
  return o46.createElement(i24, { ...m16, ref: p37, className: (0, import_classnames42.default)("rt-Section", s26) });
});
r33.displayName = "Section";

// node_modules/@radix-ui/themes/dist/esm/components/select.js
var select_exports = {};
__export(select_exports, {
  Content: () => g7,
  Group: () => y5,
  Item: () => v9,
  Label: () => h3,
  Root: () => C5,
  Separator: () => I5,
  Trigger: () => u7
});
var e36 = __toESM(require_react(), 1);
var import_classnames43 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/select.props.js
var r34 = ["1", "2", "3"];
var o47 = { size: { type: "enum", className: "rt-r-size", values: r34, default: "2", responsive: true } };
var a31 = ["classic", "surface", "soft", "ghost"];
var i18 = { variant: { type: "enum", className: "rt-variant", values: a31, default: "surface" }, ...r2, ...r7, placeholder: { type: "string" } };
var n23 = ["solid", "soft"];
var p31 = { variant: { type: "enum", className: "rt-variant", values: n23, default: "solid" }, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/select.js
var f15 = e36.createContext({});
var C5 = (r46) => {
  const { children: o59, size: t35 = o47.size.default, ...s26 } = r46;
  return e36.createElement(dist_exports25.Root, { ...s26 }, e36.createElement(f15.Provider, { value: e36.useMemo(() => ({ size: t35 }), [t35]) }, o59));
};
C5.displayName = "Select.Root";
var u7 = e36.forwardRef((r46, o59) => {
  const t35 = e36.useContext(f15), { children: s26, className: p37, color: n26, radius: m16, placeholder: c5, ...S5 } = v({ size: t35?.size, ...r46 }, { size: o47.size }, i18, r5);
  return e36.createElement(dist_exports25.Trigger, { asChild: true }, e36.createElement("button", { "data-accent-color": n26, "data-radius": m16, ...S5, ref: o59, className: (0, import_classnames43.default)("rt-reset", "rt-SelectTrigger", p37) }, e36.createElement("span", { className: "rt-SelectTriggerInner" }, e36.createElement(dist_exports25.Value, { placeholder: c5 }, s26)), e36.createElement(dist_exports25.Icon, { asChild: true }, e36.createElement(i7, { className: "rt-SelectIcon" }))));
});
u7.displayName = "Select.Trigger";
var g7 = e36.forwardRef((r46, o59) => {
  const t35 = e36.useContext(f15), { className: s26, children: p37, color: n26, container: m16, ...c5 } = v({ size: t35?.size, ...r46 }, { size: o47.size }, p31), S5 = H(), T6 = n26 || S5.accentColor;
  return e36.createElement(dist_exports25.Portal, { container: m16 }, e36.createElement(R2, { asChild: true }, e36.createElement(dist_exports25.Content, { "data-accent-color": T6, sideOffset: 4, ...c5, asChild: false, ref: o59, className: (0, import_classnames43.default)({ "rt-PopperContent": c5.position === "popper" }, "rt-SelectContent", s26) }, e36.createElement(dist_exports24.Root, { type: "auto", className: "rt-ScrollAreaRoot" }, e36.createElement(dist_exports25.Viewport, { asChild: true, className: "rt-SelectViewport" }, e36.createElement(dist_exports24.Viewport, { className: "rt-ScrollAreaViewport", style: { overflowY: void 0 } }, p37)), e36.createElement(dist_exports24.Scrollbar, { className: "rt-ScrollAreaScrollbar rt-r-size-1", orientation: "vertical" }, e36.createElement(dist_exports24.Thumb, { className: "rt-ScrollAreaThumb" }))))));
});
g7.displayName = "Select.Content";
var v9 = e36.forwardRef((r46, o59) => {
  const { className: t35, children: s26, ...p37 } = r46;
  return e36.createElement(dist_exports25.Item, { ...p37, asChild: false, ref: o59, className: (0, import_classnames43.default)("rt-SelectItem", t35) }, e36.createElement(dist_exports25.ItemIndicator, { className: "rt-SelectItemIndicator" }, e36.createElement(t12, { className: "rt-SelectItemIndicatorIcon" })), e36.createElement(dist_exports25.ItemText, null, s26));
});
v9.displayName = "Select.Item";
var y5 = e36.forwardRef(({ className: r46, ...o59 }, t35) => e36.createElement(dist_exports25.Group, { ...o59, asChild: false, ref: t35, className: (0, import_classnames43.default)("rt-SelectGroup", r46) }));
y5.displayName = "Select.Group";
var h3 = e36.forwardRef(({ className: r46, ...o59 }, t35) => e36.createElement(dist_exports25.Label, { ...o59, asChild: false, ref: t35, className: (0, import_classnames43.default)("rt-SelectLabel", r46) }));
h3.displayName = "Select.Label";
var I5 = e36.forwardRef(({ className: r46, ...o59 }, t35) => e36.createElement(dist_exports25.Separator, { ...o59, asChild: false, ref: t35, className: (0, import_classnames43.default)("rt-SelectSeparator", r46) }));
I5.displayName = "Select.Separator";

// node_modules/@radix-ui/themes/dist/esm/components/separator.js
var r36 = __toESM(require_react(), 1);
var import_classnames44 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/separator.props.js
var e37 = ["horizontal", "vertical"];
var r35 = ["1", "2", "3", "4"];
var t25 = { orientation: { type: "enum", className: "rt-r-orientation", values: e37, default: "horizontal", responsive: true }, size: { type: "enum", className: "rt-r-size", values: r35, default: "1", responsive: true }, color: { ...r2.color, default: "gray" }, decorative: { type: "boolean", default: true } };

// node_modules/@radix-ui/themes/dist/esm/components/separator.js
var o48 = r36.forwardRef((p37, e45) => {
  const { className: t35, color: a39, decorative: s26, ...m16 } = v(p37, t25, r5);
  return r36.createElement("span", { "data-accent-color": a39, role: s26 ? void 0 : "separator", ...m16, ref: e45, className: (0, import_classnames44.default)("rt-Separator", t35) });
});
o48.displayName = "Separator";

// node_modules/@radix-ui/themes/dist/esm/components/skeleton.js
var o50 = __toESM(require_react(), 1);
var import_classnames45 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/helpers/inert.js
var o49 = __toESM(require_react(), 1);
var r37 = parseFloat(o49.version) >= 19 || "";

// node_modules/@radix-ui/themes/dist/esm/components/skeleton.props.js
var p32 = { loading: { type: "boolean", default: true }, ...t, ...e };

// node_modules/@radix-ui/themes/dist/esm/components/skeleton.js
var r38 = o50.forwardRef((t35, p37) => {
  const { children: e45, className: n26, loading: s26, ...m16 } = v(t35, p32, r5);
  if (!s26) return e45;
  const i24 = o50.isValidElement(e45) ? dist_exports.Root : "span";
  return o50.createElement(i24, { ref: p37, "aria-hidden": true, className: (0, import_classnames45.default)("rt-Skeleton", n26), "data-inline-skeleton": o50.isValidElement(e45) ? void 0 : true, tabIndex: -1, inert: r37, ...m16 }, e45);
});
r38.displayName = "Skeleton";

// node_modules/@radix-ui/themes/dist/esm/components/slider.js
var e38 = __toESM(require_react(), 1);
var import_classnames46 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/slider.props.js
var o51 = ["1", "2", "3"];
var t26 = ["classic", "surface", "soft"];
var a33 = { size: { type: "enum", className: "rt-r-size", values: o51, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t26, default: "surface" }, ...r2, ...o3, ...r7 };

// node_modules/@radix-ui/themes/dist/esm/components/slider.js
var s23 = e38.forwardRef((i24, a39) => {
  const { className: d10, color: l13, radius: m16, tabIndex: t35, ...r46 } = v(i24, a33, r5);
  return e38.createElement(dist_exports26.Root, { "data-accent-color": l13, "data-radius": m16, ref: a39, ...r46, asChild: false, className: (0, import_classnames46.default)("rt-SliderRoot", d10) }, e38.createElement(dist_exports26.Track, { className: "rt-SliderTrack" }, e38.createElement(dist_exports26.Range, { className: (0, import_classnames46.default)("rt-SliderRange", { "rt-high-contrast": i24.highContrast }), "data-inverted": r46.inverted ? "" : void 0 })), (r46.value ?? r46.defaultValue ?? []).map((S5, n26) => e38.createElement(dist_exports26.Thumb, { key: n26, className: "rt-SliderThumb", ...t35 !== void 0 ? { tabIndex: t35 } : void 0 })));
});
s23.displayName = "Slider";

// node_modules/@radix-ui/themes/dist/esm/components/strong.js
var o52 = __toESM(require_react(), 1);
var import_classnames47 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/strong.props.js
var p34 = { ...o, ...e6, ...r4 };

// node_modules/@radix-ui/themes/dist/esm/components/strong.js
var r39 = o52.forwardRef((t35, e45) => {
  const { asChild: p37, className: s26, ...n26 } = v(t35, p34), m16 = p37 ? dist_exports.Root : "strong";
  return o52.createElement(m16, { ...n26, ref: e45, className: (0, import_classnames47.default)("rt-Strong", s26) });
});
r39.displayName = "Strong";

// node_modules/@radix-ui/themes/dist/esm/components/switch.js
var t28 = __toESM(require_react(), 1);
var import_classnames48 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/switch.props.js
var o53 = ["1", "2", "3"];
var t27 = ["classic", "surface", "soft"];
var a34 = { size: { type: "enum", className: "rt-r-size", values: o53, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t27, default: "surface" }, ...r2, ...o3, ...r7 };

// node_modules/@radix-ui/themes/dist/esm/components/switch.js
var i20 = t28.forwardRef((o59, p37) => {
  const { className: s26, color: m16, radius: c5, ...a39 } = v(o59, a34, r5);
  return t28.createElement(dist_exports27.Root, { "data-accent-color": m16, "data-radius": c5, ...a39, asChild: false, ref: p37, className: (0, import_classnames48.default)("rt-reset", "rt-SwitchRoot", s26) }, t28.createElement(dist_exports27.Thumb, { className: (0, import_classnames48.default)("rt-SwitchThumb", { "rt-high-contrast": o59.highContrast }) }));
});
i20.displayName = "Switch";

// node_modules/@radix-ui/themes/dist/esm/components/tab-nav.js
var tab_nav_exports = {};
__export(tab_nav_exports, {
  Link: () => v10,
  Root: () => N6
});
var o55 = __toESM(require_react(), 1);
var import_classnames49 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/_internal/base-tab-list.props.js
var r41 = ["1", "2"];
var t29 = ["nowrap", "wrap", "wrap-reverse"];
var o54 = ["start", "center", "end"];
var p35 = { size: { type: "enum", className: "rt-r-size", values: r41, default: "2", responsive: true }, wrap: { type: "enum", className: "rt-r-fw", values: t29, responsive: true }, justify: { type: "enum", className: "rt-r-jc", values: o54, responsive: true }, ...r2, ...o3 };

// node_modules/@radix-ui/themes/dist/esm/components/tab-nav.props.js
var e39 = { ...o, active: { type: "boolean", default: false } };

// node_modules/@radix-ui/themes/dist/esm/components/tab-nav.js
var N6 = o55.forwardRef((t35, r46) => {
  const { children: a39, className: s26, color: n26, ...p37 } = v(t35, p35, r5);
  return o55.createElement(dist_exports19.Root, { className: "rt-TabNavRoot", "data-accent-color": n26, ...p37, asChild: false, ref: r46 }, o55.createElement(dist_exports19.List, { className: (0, import_classnames49.default)("rt-reset", "rt-BaseTabList", "rt-TabNavList", s26) }, a39));
});
N6.displayName = "TabNav.Root";
var v10 = o55.forwardRef((t35, r46) => {
  const { asChild: a39, children: s26, className: n26, ...p37 } = t35;
  return o55.createElement(dist_exports19.Item, { className: "rt-TabNavItem" }, o55.createElement(dist_exports19.Link, { ...p37, ref: r46, className: (0, import_classnames49.default)("rt-reset", "rt-BaseTabListTrigger", "rt-TabNavLink", n26), onSelect: void 0, asChild: a39 }, d3({ asChild: a39, children: s26 }, (i24) => o55.createElement(o55.Fragment, null, o55.createElement("span", { className: "rt-BaseTabListTriggerInner rt-TabNavLinkInner" }, i24), o55.createElement("span", { className: "rt-BaseTabListTriggerInnerHidden rt-TabNavLinkInnerHidden" }, i24)))));
});
v10.displayName = "TabNav.Link";

// node_modules/@radix-ui/themes/dist/esm/components/table.js
var table_exports = {};
__export(table_exports, {
  Body: () => b4,
  Cell: () => T5,
  ColumnHeaderCell: () => f18,
  Header: () => d8,
  Root: () => m14,
  Row: () => P7,
  RowHeaderCell: () => R5
});
var e40 = __toESM(require_react(), 1);
var import_classnames50 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/table.props.js
var r42 = ["1", "2", "3"];
var a35 = ["surface", "ghost"];
var o56 = ["auto", "fixed"];
var n25 = { size: { type: "enum", className: "rt-r-size", values: r42, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: a35, default: "ghost" }, layout: { type: "enum", className: "rt-r-tl", values: o56, responsive: true } };
var i21 = ["start", "center", "end", "baseline"];
var u8 = { align: { type: "enum", className: "rt-r-va", values: i21, parseValue: l12, responsive: true } };
function l12(e45) {
  return { baseline: "baseline", start: "top", center: "middle", end: "bottom" }[e45];
}
var p36 = ["start", "center", "end"];
var f17 = { justify: { type: "enum", className: "rt-r-ta", values: p36, parseValue: c3, responsive: true }, ...t, ...p7 };
function c3(e45) {
  return { start: "left", center: "center", end: "right" }[e45];
}

// node_modules/@radix-ui/themes/dist/esm/components/table.js
var m14 = e40.forwardRef((o59, l13) => {
  const { layout: a39, ...r46 } = n25, { className: C7, children: c5, layout: y7, ...i24 } = v(o59, r46, r5), w3 = g({ value: y7, className: n25.layout.className, propValues: n25.layout.values });
  return e40.createElement("div", { ref: l13, className: (0, import_classnames50.default)("rt-TableRoot", C7), ...i24 }, e40.createElement(c2, null, e40.createElement("table", { className: (0, import_classnames50.default)("rt-TableRootTable", w3) }, c5)));
});
m14.displayName = "Table.Root";
var d8 = e40.forwardRef(({ className: o59, ...l13 }, a39) => e40.createElement("thead", { ...l13, ref: a39, className: (0, import_classnames50.default)("rt-TableHeader", o59) }));
d8.displayName = "Table.Header";
var b4 = e40.forwardRef(({ className: o59, ...l13 }, a39) => e40.createElement("tbody", { ...l13, ref: a39, className: (0, import_classnames50.default)("rt-TableBody", o59) }));
b4.displayName = "Table.Body";
var P7 = e40.forwardRef((o59, l13) => {
  const { className: a39, ...r46 } = v(o59, u8);
  return e40.createElement("tr", { ...r46, ref: l13, className: (0, import_classnames50.default)("rt-TableRow", a39) });
});
P7.displayName = "Table.Row";
var T5 = e40.forwardRef((o59, l13) => {
  const { className: a39, ...r46 } = v(o59, f17);
  return e40.createElement("td", { className: (0, import_classnames50.default)("rt-TableCell", a39), ref: l13, ...r46 });
});
T5.displayName = "Table.Cell";
var f18 = e40.forwardRef((o59, l13) => {
  const { className: a39, ...r46 } = v(o59, f17);
  return e40.createElement("th", { className: (0, import_classnames50.default)("rt-TableCell", "rt-TableColumnHeaderCell", a39), scope: "col", ref: l13, ...r46 });
});
f18.displayName = "Table.ColumnHeaderCell";
var R5 = e40.forwardRef((o59, l13) => {
  const { className: a39, ...r46 } = v(o59, f17);
  return e40.createElement("th", { className: (0, import_classnames50.default)("rt-TableCell", "rt-TableRowHeaderCell", a39), scope: "row", ref: l13, ...r46 });
});
R5.displayName = "Table.RowHeaderCell";

// node_modules/@radix-ui/themes/dist/esm/components/tabs.js
var tabs_exports = {};
__export(tabs_exports, {
  Content: () => f19,
  List: () => b5,
  Root: () => m15,
  Trigger: () => P8
});
var s25 = __toESM(require_react(), 1);
var import_classnames51 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/tabs.props.js
var s24 = { ...o };
var t31 = { ...o };

// node_modules/@radix-ui/themes/dist/esm/components/tabs.js
var m15 = s25.forwardRef((t35, o59) => {
  const { className: r46, ...e45 } = v(t35, r5);
  return s25.createElement(dist_exports28.Root, { ...e45, ref: o59, className: (0, import_classnames51.default)("rt-TabsRoot", r46) });
});
m15.displayName = "Tabs.Root";
var b5 = s25.forwardRef((t35, o59) => {
  const { className: r46, color: e45, ...n26 } = v(t35, p35, r5);
  return s25.createElement(dist_exports28.List, { "data-accent-color": e45, ...n26, asChild: false, ref: o59, className: (0, import_classnames51.default)("rt-BaseTabList", "rt-TabsList", r46) });
});
b5.displayName = "Tabs.List";
var P8 = s25.forwardRef((t35, o59) => {
  const { className: r46, children: e45, ...n26 } = t35;
  return s25.createElement(dist_exports28.Trigger, { ...n26, asChild: false, ref: o59, className: (0, import_classnames51.default)("rt-reset", "rt-BaseTabListTrigger", "rt-TabsTrigger", r46) }, s25.createElement("span", { className: "rt-BaseTabListTriggerInner rt-TabsTriggerInner" }, e45), s25.createElement("span", { className: "rt-BaseTabListTriggerInnerHidden rt-TabsTriggerInnerHidden" }, e45));
});
P8.displayName = "Tabs.Trigger";
var f19 = s25.forwardRef((t35, o59) => {
  const { className: r46, ...e45 } = v(t35, r5);
  return s25.createElement(dist_exports28.Content, { ...e45, ref: o59, className: (0, import_classnames51.default)("rt-TabsContent", r46) });
});
f19.displayName = "Tabs.Content";

// node_modules/@radix-ui/themes/dist/esm/components/text-area.js
var e41 = __toESM(require_react(), 1);
var import_classnames52 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/text-area.props.js
var r43 = ["1", "2", "3"];
var t32 = ["classic", "surface", "soft"];
var o57 = ["none", "vertical", "horizontal", "both"];
var a37 = { size: { type: "enum", className: "rt-r-size", values: r43, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t32, default: "surface" }, resize: { type: "enum", className: "rt-r-resize", values: o57, responsive: true }, ...r2, ...r7 };

// node_modules/@radix-ui/themes/dist/esm/components/text-area.js
var r44 = e41.forwardRef((t35, o59) => {
  const { className: p37, color: a39, radius: s26, style: m16, ...n26 } = v(t35, a37, r5);
  return e41.createElement("div", { "data-accent-color": a39, "data-radius": s26, className: (0, import_classnames52.default)("rt-TextAreaRoot", p37), style: m16 }, e41.createElement("textarea", { className: "rt-reset rt-TextAreaInput", ref: o59, ...n26 }));
});
r44.displayName = "TextArea";

// node_modules/@radix-ui/themes/dist/esm/components/text-field.js
var text_field_exports = {};
__export(text_field_exports, {
  Root: () => u9,
  Slot: () => c4
});
var t34 = __toESM(require_react(), 1);
var import_classnames53 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/text-field.props.js
var r45 = ["1", "2", "3"];
var t33 = ["classic", "surface", "soft"];
var f20 = { size: { type: "enum", className: "rt-r-size", values: r45, default: "2", responsive: true }, variant: { type: "enum", className: "rt-variant", values: t33, default: "surface" }, ...r2, ...r7 };
var a38 = ["left", "right"];
var i23 = { side: { type: "enum", values: a38 }, ...r2, gap: u2.gap, px: p7.px, pl: p7.pl, pr: p7.pr };

// node_modules/@radix-ui/themes/dist/esm/components/text-field.js
var u9 = t34.forwardRef((r46, s26) => {
  const e45 = t34.useRef(null), { children: l13, className: i24, color: p37, radius: f21, style: x4, ...P9 } = v(r46, f20, r5);
  return t34.createElement("div", { "data-accent-color": p37, "data-radius": f21, style: x4, className: (0, import_classnames53.default)("rt-TextFieldRoot", i24), onPointerDown: (T6) => {
    const n26 = T6.target;
    if (n26.closest("input, button, a")) return;
    const o59 = e45.current;
    if (!o59) return;
    const a39 = n26.closest(`
            .rt-TextFieldSlot[data-side='right'],
            .rt-TextFieldSlot:not([data-side='right']) ~ .rt-TextFieldSlot:not([data-side='left'])
          `) ? o59.value.length : 0;
    requestAnimationFrame(() => {
      try {
        o59.setSelectionRange(a39, a39);
      } catch {
      }
      o59.focus();
    });
  } }, t34.createElement("input", { spellCheck: "false", ...P9, ref: composeRefs(e45, s26), className: "rt-reset rt-TextFieldInput" }), l13);
});
u9.displayName = "TextField.Root";
var c4 = t34.forwardRef((r46, s26) => {
  const { className: e45, color: l13, side: i24, ...p37 } = v(r46, i23);
  return t34.createElement("div", { "data-accent-color": l13, "data-side": i24, ...p37, ref: s26, className: (0, import_classnames53.default)("rt-TextFieldSlot", e45) });
});
c4.displayName = "TextField.Slot";

// node_modules/@radix-ui/themes/dist/esm/components/theme-panel.js
var e42 = __toESM(require_react(), 1);
var N7 = e42.forwardRef(({ defaultOpen: n26 = true, ...a39 }, l13) => {
  const [c5, h4] = e42.useState(n26);
  return e42.createElement(z, { ...a39, ref: l13, open: c5, onOpenChange: h4 });
});
N7.displayName = "ThemePanel";
var z = e42.forwardRef((n26, a39) => {
  const { open: l13, onOpenChange: c5, onAppearanceChange: h4, ...v11 } = n26, G6 = H(), { appearance: d10, onAppearanceChange: B5, accentColor: g8, onAccentColorChange: $, grayColor: f21, onGrayColorChange: F, panelBackground: T6, onPanelBackgroundChange: O2, radius: w3, onRadiusChange: D3, scaling: x4, onScalingChange: j } = G6, E5 = h4 !== void 0, K2 = useCallbackRef(h4), k3 = e42.useCallback((t35) => {
    const o59 = a92();
    if (d10 !== "inherit") {
      B5(t35);
      return;
    }
    E5 ? K2(t35) : (H3(t35), l92(t35)), o59();
  }, [d10, B5, E5, K2]), P9 = a3(g8), S5 = f21 === "auto" ? P9 : f21, [W2, M2] = e42.useState("idle");
  async function U() {
    const t35 = { appearance: d10 === s4.appearance.default ? void 0 : d10, accentColor: g8 === s4.accentColor.default ? void 0 : g8, grayColor: f21 === s4.grayColor.default ? void 0 : f21, panelBackground: T6 === s4.panelBackground.default ? void 0 : T6, radius: w3 === s4.radius.default ? void 0 : w3, scaling: x4 === s4.scaling.default ? void 0 : x4 }, o59 = Object.keys(t35).filter((i24) => t35[i24] !== void 0).map((i24) => `${i24}="${t35[i24]}"`).join(" "), m16 = o59 ? `<Theme ${o59}>` : "<Theme>";
    M2("copying"), await navigator.clipboard.writeText(m16), M2("copied"), setTimeout(() => M2("idle"), 2e3);
  }
  const [Z, H3] = e42.useState(d10 === "inherit" ? null : d10), b6 = `
      [contenteditable],
      [role="combobox"],
      [role="listbox"],
      [role="menu"],
      input:not([type="radio"], [type="checkbox"]),
      select,
      textarea
    `;
  return e42.useEffect(() => {
    function t35(o59) {
      const m16 = o59.altKey || o59.ctrlKey || o59.shiftKey || o59.metaKey, i24 = document.activeElement?.closest(b6);
      o59.key?.toUpperCase() === "T" && !m16 && !i24 && c5(!l13);
    }
    return document.addEventListener("keydown", t35), () => document.removeEventListener("keydown", t35);
  }, [c5, l13, b6]), e42.useEffect(() => {
    function t35(o59) {
      const m16 = o59.altKey || o59.ctrlKey || o59.shiftKey || o59.metaKey, i24 = document.activeElement?.closest(b6);
      o59.key?.toUpperCase() === "D" && !m16 && !i24 && k3(Z === "light" ? "dark" : "light");
    }
    return document.addEventListener("keydown", t35), () => document.removeEventListener("keydown", t35);
  }, [k3, Z, b6]), e42.useEffect(() => {
    const t35 = document.documentElement, o59 = document.body;
    function m16() {
      const y7 = t35.classList.contains("dark") || t35.classList.contains("dark-theme") || o59.classList.contains("dark") || o59.classList.contains("dark-theme");
      H3(d10 === "inherit" ? y7 ? "dark" : "light" : d10);
    }
    const i24 = new MutationObserver(function(y7) {
      y7.forEach(function(X2) {
        X2.attributeName === "class" && m16();
      });
    });
    return m16(), d10 === "inherit" && (i24.observe(t35, { attributes: true }), i24.observe(o59, { attributes: true })), () => i24.disconnect();
  }, [d10]), e42.createElement(R2, { asChild: true, radius: "medium", scaling: "100%" }, e42.createElement(p12, { direction: "column", position: "fixed", top: "0", right: "0", mr: "4", mt: "4", inert: l13 ? void 0 : r37, ...v11, ref: a39, style: { zIndex: 9999, overflow: "hidden", maxHeight: "calc(100vh - var(--space-4) - var(--space-4))", borderRadius: "var(--radius-4)", backgroundColor: "var(--color-panel-solid)", transformOrigin: "top center", transitionProperty: "transform, box-shadow", transitionDuration: "200ms", transitionTimingFunction: l13 ? "ease-out" : "ease-in", transform: l13 ? "none" : "translateX(105%)", boxShadow: l13 ? "var(--shadow-5)" : "var(--shadow-2)", ...n26.style } }, e42.createElement(c2, null, e42.createElement(p9, { flexGrow: "1", p: "5", position: "relative" }, e42.createElement(p9, { position: "absolute", top: "0", right: "0", m: "2" }, e42.createElement(e43, { content: "Press T to show/hide the Theme Panel", side: "bottom", sideOffset: 6 }, e42.createElement(r28, { asChild: true, size: "3", tabIndex: 0, className: "rt-ThemePanelShortcut" }, e42.createElement("button", { onClick: () => c5(!l13) }, "T")))), e42.createElement(r6, { size: "5", trim: "both", as: "h3", mb: "5" }, "Theme"), e42.createElement(p, { id: "accent-color-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Accent color"), e42.createElement(o19, { columns: "10", gap: "2", mt: "3", role: "group", "aria-labelledby": "accent-color-title" }, s4.accentColor.values.map((t35) => e42.createElement("label", { key: t35, className: "rt-ThemePanelSwatch", style: { backgroundColor: `var(--${t35}-9)` } }, e42.createElement(e43, { content: `${C6(t35)}${g8 === "gray" && S5 !== "gray" ? ` (${C6(S5)})` : ""}` }, e42.createElement("input", { className: "rt-ThemePanelSwatchInput", type: "radio", name: "accentColor", value: t35, checked: g8 === t35, onChange: (o59) => $(o59.target.value) }))))), e42.createElement(p12, { asChild: true, align: "center", justify: "between" }, e42.createElement(p, { as: "p", id: "gray-color-title", size: "2", weight: "medium", mt: "5" }, "Gray color")), e42.createElement(o19, { columns: "10", gap: "2", mt: "3", role: "group", "aria-labelledby": "gray-color-title" }, s4.grayColor.values.map((t35) => e42.createElement(p12, { key: t35, asChild: true, align: "center", justify: "center" }, e42.createElement("label", { className: "rt-ThemePanelSwatch", style: { backgroundColor: t35 === "auto" ? `var(--${P9}-9)` : t35 === "gray" ? "var(--gray-9)" : `var(--${t35}-9)`, filter: t35 === "gray" ? "saturate(0)" : void 0 } }, e42.createElement(e43, { content: `${C6(t35)}${t35 === "auto" ? ` (${C6(P9)})` : ""}` }, e42.createElement("input", { className: "rt-ThemePanelSwatchInput", type: "radio", name: "grayColor", value: t35, checked: f21 === t35, onChange: (o59) => F(o59.target.value) })))))), e42.createElement(p, { id: "appearance-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Appearance"), e42.createElement(o19, { columns: "2", gap: "2", mt: "3", role: "group", "aria-labelledby": "appearance-title" }, ["light", "dark"].map((t35) => e42.createElement("label", { key: t35, className: "rt-ThemePanelRadioCard" }, e42.createElement("input", { className: "rt-ThemePanelRadioCardInput", type: "radio", name: "appearance", value: t35, checked: Z === t35, onChange: (o59) => k3(o59.target.value) }), e42.createElement(p12, { align: "center", justify: "center", height: "32px", gap: "2" }, t35 === "light" ? e42.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -1px" } }, e42.createElement("path", { d: "M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })) : e42.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -1px" } }, e42.createElement("path", { d: "M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })), e42.createElement(p, { size: "1", weight: "medium" }, C6(t35)))))), e42.createElement(p, { id: "radius-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Radius"), e42.createElement(o19, { columns: "5", gap: "2", mt: "3", role: "group", "aria-labelledby": "radius-title" }, s4.radius.values.map((t35) => e42.createElement(p12, { key: t35, direction: "column", align: "center" }, e42.createElement("label", { className: "rt-ThemePanelRadioCard" }, e42.createElement("input", { className: "rt-ThemePanelRadioCardInput", type: "radio", name: "radius", id: `theme-panel-radius-${t35}`, value: t35, checked: w3 === t35, onChange: (o59) => D3(o59.target.value) }), e42.createElement(R2, { asChild: true, radius: t35 }, e42.createElement(p9, { m: "3", width: "32px", height: "32px", style: { borderTopLeftRadius: t35 === "full" ? "80%" : "var(--radius-5)", backgroundImage: "linear-gradient(to bottom right, var(--accent-3), var(--accent-4))", borderTop: "2px solid var(--accent-a8)", borderLeft: "2px solid var(--accent-a8)" } }))), e42.createElement(p9, { asChild: true, pt: "2" }, e42.createElement(p, { asChild: true, size: "1", color: "gray" }, e42.createElement("label", { htmlFor: `theme-panel-radius-${t35}` }, C6(t35))))))), e42.createElement(p, { id: "scaling-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Scaling"), e42.createElement(o19, { columns: "5", gap: "2", mt: "3", role: "group", "aria-labelledby": "scaling-title" }, s4.scaling.values.map((t35) => e42.createElement("label", { key: t35, className: "rt-ThemePanelRadioCard" }, e42.createElement("input", { className: "rt-ThemePanelRadioCardInput", type: "radio", name: "scaling", value: t35, checked: x4 === t35, onChange: (o59) => j(o59.target.value) }), e42.createElement(p12, { align: "center", justify: "center", height: "32px" }, e42.createElement(R2, { asChild: true, scaling: t35 }, e42.createElement(p12, { align: "center", justify: "center" }, e42.createElement(p, { size: "1", weight: "medium" }, C6(t35)))))))), e42.createElement(p12, { mt: "5", align: "center", gap: "2" }, e42.createElement(p, { id: "panel-background-title", as: "p", size: "2", weight: "medium" }, "Panel background"), e42.createElement(popover_exports.Root, null, e42.createElement(popover_exports.Trigger, null, e42.createElement(o29, { size: "1", variant: "ghost", color: "gray" }, e42.createElement(s, { label: "Learn more about panel background options" }, e42.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg" }, e42.createElement("path", { d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z", fillRule: "evenodd", clipRule: "evenodd" }))))), e42.createElement(popover_exports.Content, { size: "1", style: { maxWidth: 220 }, side: "top", align: "center" }, e42.createElement(p, { as: "p", size: "2" }, "Whether Card and Table panels are translucent, showing some of the background behind them.")))), e42.createElement(o19, { columns: "2", gap: "2", mt: "3", role: "group", "aria-labelledby": "panel-background-title" }, s4.panelBackground.values.map((t35) => e42.createElement("label", { key: t35, className: "rt-ThemePanelRadioCard" }, e42.createElement("input", { className: "rt-ThemePanelRadioCardInput", type: "radio", name: "panelBackground", value: t35, checked: T6 === t35, onChange: (o59) => O2(o59.target.value) }), e42.createElement(p12, { align: "center", justify: "center", height: "32px", gap: "2" }, t35 === "solid" ? e42.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -2px" } }, e42.createElement("path", { d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })) : e42.createElement("svg", { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -2px" } }, e42.createElement("path", { opacity: ".05", d: "M6.78296 13.376C8.73904 9.95284 8.73904 5.04719 6.78296 1.62405L7.21708 1.37598C9.261 4.95283 9.261 10.0472 7.21708 13.624L6.78296 13.376Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".1", d: "M7.28204 13.4775C9.23929 9.99523 9.23929 5.00475 7.28204 1.52248L7.71791 1.2775C9.76067 4.9119 9.76067 10.0881 7.71791 13.7225L7.28204 13.4775Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".15", d: "M7.82098 13.5064C9.72502 9.99523 9.72636 5.01411 7.82492 1.50084L8.26465 1.26285C10.2465 4.92466 10.2451 10.085 8.26052 13.7448L7.82098 13.5064Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".2", d: "M8.41284 13.429C10.1952 9.92842 10.1957 5.07537 8.41435 1.57402L8.85999 1.34729C10.7139 4.99113 10.7133 10.0128 8.85841 13.6559L8.41284 13.429Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".25", d: "M9.02441 13.2956C10.6567 9.8379 10.6586 5.17715 9.03005 1.71656L9.48245 1.50366C11.1745 5.09919 11.1726 9.91629 9.47657 13.5091L9.02441 13.2956Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".3", d: "M9.66809 13.0655C11.1097 9.69572 11.1107 5.3121 9.67088 1.94095L10.1307 1.74457C11.6241 5.24121 11.6231 9.76683 10.1278 13.2622L9.66809 13.0655Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".35", d: "M10.331 12.7456C11.5551 9.52073 11.5564 5.49103 10.3347 2.26444L10.8024 2.0874C12.0672 5.42815 12.0659 9.58394 10.7985 12.9231L10.331 12.7456Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".4", d: "M11.0155 12.2986C11.9938 9.29744 11.9948 5.71296 11.0184 2.71067L11.4939 2.55603C12.503 5.6589 12.502 9.35178 11.4909 12.4535L11.0155 12.2986Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".45", d: "M11.7214 11.668C12.4254 9.01303 12.4262 5.99691 11.7237 3.34116L12.2071 3.21329C12.9318 5.95292 12.931 9.05728 12.2047 11.7961L11.7214 11.668Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { opacity: ".5", d: "M12.4432 10.752C12.8524 8.63762 12.8523 6.36089 12.4429 4.2466L12.9338 4.15155C13.3553 6.32861 13.3554 8.66985 12.9341 10.847L12.4432 10.752Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }), e42.createElement("path", { d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })), e42.createElement(p, { size: "1", weight: "medium" }, C6(t35)))))), e42.createElement(o15, { mt: "5", style: { width: "100%" }, onClick: U }, W2 === "copied" ? "Copied" : "Copy Theme")))));
});
z.displayName = "ThemePanelImpl";
function a92() {
  const n26 = document.createElement("style");
  return n26.appendChild(document.createTextNode("*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")), document.head.appendChild(n26), () => {
    window.getComputedStyle(document.body), setTimeout(() => {
      document.head.removeChild(n26);
    }, 1);
  };
}
function C6(n26) {
  return n26.charAt(0).toUpperCase() + n26.slice(1);
}
function l92(n26) {
  const a39 = document.documentElement, l13 = a39.classList.contains("light-theme"), c5 = a39.classList.contains("dark-theme"), h4 = a39.classList.contains("light"), v11 = a39.classList.contains("dark");
  (l13 || c5) && (a39.classList.remove("light-theme", "dark-theme"), a39.style.colorScheme = n26, a39.classList.add(`${n26}-theme`)), (h4 || v11) && (a39.classList.remove("light", "dark"), a39.style.colorScheme = n26, a39.classList.add(n26)), !l13 && !c5 && !h4 && !v11 && (a39.style.colorScheme = n26, a39.classList.add(n26));
}

// node_modules/@radix-ui/themes/dist/esm/components/tooltip.js
var o58 = __toESM(require_react(), 1);
var import_classnames54 = __toESM(require_classnames(), 1);

// node_modules/@radix-ui/themes/dist/esm/components/tooltip.props.js
var e44 = { content: { type: "ReactNode", required: true }, width: t.width, minWidth: t.minWidth, maxWidth: { ...t.maxWidth, default: "360px" } };

// node_modules/@radix-ui/themes/dist/esm/components/tooltip.js
var e43 = o58.forwardRef((i24, p37) => {
  const { children: r46, className: n26, open: s26, defaultOpen: l13, onOpenChange: m16, delayDuration: a39, disableHoverableContent: f21, content: P9, container: T6, forceMount: c5, ...d10 } = v(i24, e44), C7 = { open: s26, defaultOpen: l13, onOpenChange: m16, delayDuration: a39, disableHoverableContent: f21 };
  return o58.createElement(dist_exports32.Root, { ...C7 }, o58.createElement(dist_exports32.Trigger, { asChild: true }, r46), o58.createElement(dist_exports32.Portal, { container: T6, forceMount: c5 }, o58.createElement(R2, { asChild: true }, o58.createElement(dist_exports32.Content, { sideOffset: 4, collisionPadding: 10, ...d10, asChild: false, ref: p37, className: (0, import_classnames54.default)("rt-TooltipContent", n26) }, o58.createElement(p, { as: "p", className: "rt-TooltipText", size: "1" }, P9), o58.createElement(dist_exports32.Arrow, { className: "rt-TooltipArrow" })))));
});
e43.displayName = "Tooltip";
export {
  s as AccessibleIcon,
  alert_dialog_exports as AlertDialog,
  i2 as AspectRatio,
  i3 as Avatar,
  e14 as Badge,
  e15 as Blockquote,
  p9 as Box,
  o15 as Button,
  callout_exports as Callout,
  o17 as Card,
  c as Checkbox,
  checkbox_cards_exports as CheckboxCards,
  checkbox_group_exports as CheckboxGroup,
  i7 as ChevronDownIcon,
  p16 as Code,
  p18 as Container,
  context_menu_exports as ContextMenu,
  data_list_exports as DataList,
  dialog_exports as Dialog,
  dropdown_menu_exports as DropdownMenu,
  e27 as Em,
  p12 as Flex,
  o19 as Grid,
  r6 as Heading,
  hover_card_exports as HoverCard,
  o29 as IconButton,
  e29 as Inset,
  r28 as Kbd,
  e31 as Link,
  popover_exports as Popover,
  r30 as Portal,
  s21 as Progress,
  e32 as Quote,
  e33 as Radio,
  radio_cards_exports as RadioCards,
  radio_group_exports as RadioGroup,
  o43 as Reset,
  c2 as ScrollArea,
  r33 as Section,
  segmented_control_exports as SegmentedControl,
  select_exports as Select,
  o48 as Separator,
  r38 as Skeleton,
  s23 as Slider,
  e16 as Slot,
  r9 as Slottable,
  s9 as Spinner,
  r39 as Strong,
  i20 as Switch,
  tab_nav_exports as TabNav,
  table_exports as Table,
  tabs_exports as Tabs,
  p as Text,
  r44 as TextArea,
  text_field_exports as TextField,
  R2 as Theme,
  P as ThemeContext,
  N7 as ThemePanel,
  t12 as ThickCheckIcon,
  l7 as ThickChevronRightIcon,
  r18 as ThickDividerHorizontalIcon,
  e43 as Tooltip,
  d4 as VisuallyHidden,
  H as useThemeContext
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=@radix-ui_themes.js.map
